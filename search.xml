<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript常见兼容性问题</title>
      <link href="/2023/06/27/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/Javascript%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2023/06/27/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/Javascript%E5%B8%B8%E8%A7%81%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="记录问题"><a href="#记录问题" class="headerlink" title="记录问题"></a>记录问题</h2><ol><li>2023-6-27<blockquote><p><code>new Date()</code>在Ios操作系统上如果使用<code>new Date(&quot;2023-5-21 12:12:12&quot;)</code>返回的结果是<code>null</code><br>2022-05-20 12:00:00 – NaN<br>  2022-5-20 12:00:00 – NaN<br>  2022-5-20T12:00:00 – NaN<br>  2022-05-20T12:00:00 – 165403212300000<br>  2022&#x2F;5&#x2F;20T12:00:00 – 165403212300000<br>  2022&#x2F;05&#x2F;20T12:00:00 – 165403212300000<br>解决方法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(dateTime).<span class="title function_">replace</span>(<span class="regexp">/-/g</span>,<span class="string">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础使用</title>
      <link href="/2023/05/26/%E5%89%8D%E7%AB%AF%E7%AF%87/TS/TypeScript%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/26/%E5%89%8D%E7%AB%AF%E7%AF%87/TS/TypeScript%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="TS基础操作"><a href="#TS基础操作" class="headerlink" title="TS基础操作"></a>TS基础操作</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><h2 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h2><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="非空断言操作符-！"><a href="#非空断言操作符-！" class="headerlink" title="非空断言操作符 ！"></a>非空断言操作符 ！</h3><h3 id="keyof操作符"><a href="#keyof操作符" class="headerlink" title="keyof操作符"></a>keyof操作符</h3><blockquote><p>TypeScript允许遍历某种类型的属性</p></blockquote><ul><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string;</span><br><span class="line">  <span class="attr">age</span>: number;</span><br><span class="line">  <span class="attr">location</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type <span class="variable constant_">K1</span> = keyof <span class="title class_">Person</span>; <span class="comment">// &quot;name&quot; | &quot;age&quot; | &quot;location&quot;</span></span><br><span class="line">type <span class="variable constant_">K2</span> = keyof <span class="title class_">Person</span>[];  <span class="comment">// number | &quot;length&quot; | &quot;push&quot; | &quot;concat&quot; | ...</span></span><br><span class="line">type <span class="variable constant_">K3</span> = keyof &#123; [<span class="attr">x</span>: string]: <span class="title class_">Person</span> &#125;;  <span class="comment">// string | number</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>操作类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string = <span class="string">&quot;Semlinker&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">sname</span>: keyof <span class="title class_">Person</span>;</span><br><span class="line">sname = <span class="string">&quot;name&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>函数中使用<br>例如:在js中，有这样的一种函数处理：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">prop</span>(<span class="params">obj, key</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数接口两个参数，obj和key，并返回obj中对应key的属性值。但是，这里存在的问题是，我们并不知道obj是什么，也不知道属性的类型。所以，在TypeScript中，这种情况需要改成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">prop</span>(<span class="params">obj:object, key: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样是会报错的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Element</span> implicitly has an <span class="string">&#x27;any&#x27;</span> type because expression <span class="keyword">of</span> type <span class="string">&#x27;string&#x27;</span> can<span class="string">&#x27;t be used to index type &#x27;</span>&#123;&#125;<span class="string">&#x27;.</span></span><br><span class="line"><span class="string">// 元素隐式地拥有 `any` 类型，因为 `string` 类型不能被用于索引 `&#123;&#125;` 类型</span></span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Todo</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: number;</span><br><span class="line">  <span class="attr">text</span>: string;</span><br><span class="line">  <span class="attr">done</span>: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Todo</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">text</span>: <span class="string">&quot;Learn TypeScript keyof&quot;</span>,</span><br><span class="line">  <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> prop&lt;T <span class="keyword">extends</span> object, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> id = <span class="title function_">prop</span>(todo, <span class="string">&quot;id&quot;</span>); <span class="comment">// const id: number</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="title function_">prop</span>(todo, <span class="string">&quot;text&quot;</span>); <span class="comment">// const text: string</span></span><br><span class="line"><span class="keyword">const</span> done = <span class="title function_">prop</span>(todo, <span class="string">&quot;done&quot;</span>); <span class="comment">// const done: boolean</span></span><br></pre></td></tr></table></figure><h2 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h2><h2 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h2>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> TS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript的EventLoop事件循环</title>
      <link href="/2023/03/14/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/Javascript%E7%9A%84EventLoop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/03/14/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/Javascript%E7%9A%84EventLoop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>“請說說什麼是 Event Loop?” 這句經典的面試題不知道嚇倒了多少人，包括曾經的我自己…，這篇就是本人用來喚醒記憶用的日常 MDN 閱讀筆記，歡迎對這主題”好像懂又好像不懂”的夥伴們一起來深入了解一下吧</p></div><blockquote><p>前言<br>在開始之前需要先簡單釐清一下概念，我們都知道 Javascript 語言本身是單線程環境，也就是一次只同時處理一件事（call stack），但在瀏覽器中，V8 引擎中 “concurrency model” 並行模型及 “Event Loop” 的概念卻鮮少被提及，因為他是實作在瀏覽器環境的強大功能，而不是被原生的 Javascript ECMAScript 明定規範。</p></blockquote><p>下面馬上來介紹下這幾個幫助 Javascript 更加強大的特性～</p><ol><li><p>執行環境 Runtime Concept<br>在正式講到 Javascript 的 Event Loop 前，我們有必要先了解所謂的執行環境，下面圖片參考自 MDN，可以看到共可分為主要三個概念：Stack, Heap, Queue：</p></li><li><p>Stack 堆疊（call stack）<br>每次呼叫一個函式後，會產生一個包含該函式執行環境參數的 frame，每次呼叫一個新函式就會往 Stack 內疊加，而每當一個函式執行結束後，就會將該函式對應的 frame 從 Stack 中移除，這是作為單線程的 Javascript 的基本特性。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo go&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar go&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>();</span><br></pre></td></tr></table></figure><p>上面範例中，bar 呼叫後會往 Stack 裡堆疊一個含有 bar 執行環境參數的 frame，而 bar 中又呼叫了 foo，所以會再往 Stack 裡堆疊一個含有 foo 環境的 frame，之後當 foo 執行完畢就會從 Stack 中移除該 foo 執行的 frame，最後 bar 執行完畢移除 bar 的 frame。</p><p>總結來說，Stack 的功能主要就是紀錄當前環境正在做什麼的一個追蹤序列。</p><ol start="3"><li><p>Heap 堆積<br>可以把 Heap 想像成一個記憶體，裡面分配儲藏著各種物件，是一個無結構的大區域。</p></li><li><p>Queue 佇列<br>Javascript 執行環境的 Queue 主要基於 FIFO（First in First Out）原則執行，裡面裝載著所有待處理的Task，每當 Stack 中有空間釋出時，就會從 Queue 中提取一個Task進行處理，並將該 Task 中相關聯的所有 function 執行完畢後才會提取下一個。</p></li><li><p>Event Loop 事件循環<br>呈上面的 Queue 概念，因為在實作此一概念的功能時常常以下方的範例方式進行，故被取名為 Event Loop:</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.<span class="title function_">waitForMessage</span>()) &#123;</span><br><span class="line">  queue.<span class="title function_">processNextMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 Queue 中沒有任何 Task 時，waitForMessage 會同步地等待新 task 到來。</p><p>以下介紹有關 Event Loop 的幾個特性：</p><p>Run to completion 執行到完成<br>每個Task會在當前 task 處理完成後才處理下一個</p><p>優點：分析程式時提供可靠性，可確保程式依序有效的執行不被取代。<br>缺點：若一個 task 要很久的時間來執行完畢，網頁程式會無法即時處理使用者的基本操作，例如 click 或 scroll。瀏覽器為了避免此問題會跳出警告提示執行過久，實作上建議盡可能縮短task的執行時間，或是將一個task切割成數個執行。<br>Adding message 添加訊息<br>Basic<br>那麼究竟瀏覽器會怎麼添加 Task 呢？在一般狀況下，一個 task 必須同時由兩個部分構成 - 事件觸發, 事件監聽者，前者比如常見的點擊事件，而後者比如 addEventListener，如果沒有事件監聽者，則該事件就不會形成訊息。或是如常見的 script tag 也會添加一個新的 task 進入 queue</p><p><strong>setTimeout 與誤差</strong><br>另一個常見的添加訊息方式是 web API 中的 setTimeout 等等，當 Javascript 執行時遇到這些 web API 時，就會將第一個參數中指定的動作轉為訊息加入瀏覽器 Queue 中，而第二個參數為延遲時間，若當下無其他訊息已在 Queue 裡，則該訊息將在延遲時間過後被立即取出調用。若 Queue 中已有其他訊息，則該訊息必須等到在他之前所添加的其他訊息執行完畢，也因此第二個參數只能表示最短時間，而不是一個精準的時間。</p><p>下面範例展示失準的 setTimeout 延遲：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> local = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i++ &lt; <span class="number">99999999</span>) &#123; &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wait 1:&#x27;</span>, local - now);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> local = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wait 2:&#x27;</span>, local - now);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// wait 1: 1000</span></span><br><span class="line"><span class="comment">// wait 1: 1057</span></span><br></pre></td></tr></table></figure><p>可以看到我們使用兩個相同延遲 1000ms 的 setTimeout，可以明顯看到第二個晚了 57ms，該時間就是等待前一個執行完畢的等待時間，雖然看起來差不多，但如果是在 setInterval 的狀況下，誤差就會逐漸擴大。</p><p><strong>Zero delays（零延遲）</strong><br>「零延遲」並非意味著函式（callback function）會在 0ms 之後立刻被執行。實際延遲狀況會參考佇列中等待的訊息數量來決定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message in callback&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// message in callback</span></span><br></pre></td></tr></table></figure><p>可以看到範例中，即使設定延遲時間為 0，其仍視為新的訊息並必須等待當前訊息執行完畢。</p><p>Never Blocking（絕不阻塞）<br>事件循環這個模型有一個非常有趣的特色就是預設狀況下永不阻塞，但凡事總有例外，像是 alert 或是同步的 XHR，好的實作方式是盡力避開他們～</p><p>實作<br>上面講了一堆理論，實作上我們該怎麼使用這些特性又是另一個問題，常見進行非同步的方式有幾種，包含最基本的 callback 回調函式，上面講到的 setTimeout，以及現今最流行使用的 promise。</p><ul><li>Callback 回調函式<br>以下是一個最簡單的點擊事件監聽，我們明確定義了一個添加訊息的方式，當後續按鈕點擊觸發後，瀏覽器就會添加一個 cb 訊息到 Queue 中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;button clicked&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>setTimeout<br>直接使用 web api 添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><ul><li>Promise<br>使用 Promise 物件進行操作，並在 then 中定義回調函式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">cb</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something - sync&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;do something - async&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Micro-amp-Macro-queue"><a href="#Micro-amp-Macro-queue" class="headerlink" title="Micro &amp; Macro queue"></a>Micro &amp; Macro queue</h2><p>上面的回調函式已經很清楚是一個Task會添加到 Queue 中，這裡先不討論了，這裡專注討論 <code>setTimeout</code> 與 <code>promise</code> 的差異，相信很多人吃過很多雞但都沒看過雞吧！！…</p><p>誒不是！！兩個都用過但其實是有些微差異的，繼續往下看看這個範例，先想想他的輸出順序會是如何？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise exec&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise after resolve&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise then&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout exec&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"><span class="comment">// 答案是</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// promise exec</span></span><br><span class="line"><span class="comment">// promise after resolve</span></span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// promise then</span></span><br><span class="line"><span class="comment">// setTimeout exec</span></span><br></pre></td></tr></table></figure><p>這邊要介紹一個 <code>micro</code>, <code>macro queue</code> 的概念，在 <code>Javascript</code> 的事件中，分為兩個分類：</p><p><strong>micro queue</strong>: <code>promise</code>,<code>Mutation Observer API</code>, <code>queueMicrotask</code><br><strong>macro queue(task queue)</strong>: <code>setTimeout</code>, <code>dom event listener</code>, <code>script</code></p><ul><li><p>Microtask<br>microtask 是ㄧ段函式，並會在當前創造他的 function stack 執行完畢(清空)離開後，並在將控制權限交給 Event Loop 之前執行，如此可確保 microtask 不會影響污染到其他 script 的執行，也確保 user agent 不會在 microtask 執行完畢前做出相應的反應。</p></li><li><p>Macrotask(Task)<br>Macrotask 主要與 Microtask 有兩大差異：</p></li></ul><p>每當 Task 執行結束時，Event Loop 會檢查當前 task 是否有明確回傳控制權給其他 javascript code，如果沒有，則會將所有存在 micro queue 中的動作執行，並依此往復執行數次（包含其他事件驅動或 script 回調等等）</p><p>即使使用 <code>setTimeout</code> 或 <code>queueMicrotask</code> 一次添加大量 <code>microtask</code>，其也會在下一個 <code>Task</code> 執行前執行完畢，因為 <code>micro queue</code> 會在每個 task 執行後執行並清空，不論在當前 <code>Task</code> 內添加了多少 <code>microtask</code></p><p>解說答案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise exec&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">  <span class="comment">// 3</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise after resolve&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise then&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout exec&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>promise</code> 建立時內部的回調會立即調用，這邊要注意的是 <code>resolve</code> 後並不會停止後續的程式執行，當 <code>end</code> 執行完畢後代表 <code>task</code> 已結束，接著會檢查並調用所有 <code>micro queue</code> 中的 <code>task</code>，當 <code>micro queue</code> 清空後，<code>event loop</code> 提取下一個 <code>Task</code> 執行。</p><p>結論<br>本篇主要介紹基礎的 Event Loop 概念，如果你對更深入的差異內容感興趣，可以前往這裡觀看詳細的解釋。</p><p>以下結論重點：</p><p>Micro Queue 會在每次 Task 執行結束後，全部調用並清空，接著 Event Loop 提取下一個 Task 執行。<br><strong>Microtask</strong> 包含 <code>Promise</code> 的 <code>then</code>, <code>queueMicrotask</code> 等等動作。<br><strong>Macrotask</strong> 包含 <code>Event Callback</code>, <code>setTimeout</code>, <code>script</code> 等等。<br>希望大家看完本篇後都能對 <code>Javascript</code> 的 <code>Event Loop</code> 有更深度的了解摟，下次面試官再問也不怕拉～</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> eventloop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pinia的使用</title>
      <link href="/2023/03/14/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/pinia%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/03/14/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/pinia%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Pinia-vs-Vuex"><a href="#Pinia-vs-Vuex" class="headerlink" title="Pinia vs. Vuex"></a>Pinia vs. Vuex</h1><ul><li>移除 Mutations</li><li>Typescript 不再需要多餘的 types 來包裝</li><li>不再需要引入各種 magic string，直接引入函數，享受自動補全帶來的快樂</li><li>不再需要動態註冊模組，預設都是動態註冊</li><li>拋棄 Nested Module，在保持模組互相引入的前提下，採用 Flat Module，甚至可以進行<code>circular dependencies</code> 讓兩模組互相調用（需注意可能產生無限迴圈）</li><li>無需 namespaced，所有模組都已自動 namespaced</li></ul><hr><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装pinia"><a href="#安装pinia" class="headerlink" title="安装pinia"></a>安装pinia</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add pinia</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>與 Vuex 不同，因為 pinia 是預設動態創建模組，我們可以先註冊完 app 後再來寫模組具體內容<br><strong>store&#x2F;index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 創建 pinia</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure><blockquote><p>使用vue2需额外引入<code>PiniaVuePlugin</code>,如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia, <span class="title class_">PiniaVuePlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">PiniaVuePlugin</span>);</span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> pinia;</span><br></pre></td></tr></table></figure><blockquote><p>如果vue2使用的是webpack，需要在 module 的 rules 裏添加如下規則，否則會出現 esmodule 引入的錯誤</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// FIX: Can’t import the named export &#x27;XXX&#x27; from non EcmaScript module</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.mjs$/</span>,</span><br><span class="line">        <span class="attr">include</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;javascript/auto&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 綁定 pinia 到 app</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Vue2 註冊方式則跟 vuex 相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  pinia,</span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建Module"><a href="#创建Module" class="headerlink" title="创建Module"></a>创建Module</h3><p>引入 <code>defineStore</code> 方法，Options 與 Vuex 除了 mutations 以外基本相同，包含 <code>state</code>, <code>getters</code>, <code>actions</code></p><p><strong>store&#x2F;main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 這邊 defineStore 會自動動態註冊模組，回傳值為 hook function</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;Main&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 注意 state 是一個 function，推薦使用 arrow function</span></span><br><span class="line">  <span class="comment">// 可幫助 typescript 更好進行類型推斷</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="title class_">APILoading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用Usage"><a href="#使用Usage" class="headerlink" title="使用Usage"></a>使用Usage</h2><h3 id="vue3示例"><a href="#vue3示例" class="headerlink" title="vue3示例"></a>vue3示例</h3><ul><li>state</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// App.vue</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 引入 defineStore 回傳的 hook</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// store 物件是 reactive，注意不可直接解構</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      store,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>解构store<br>因為 store 是個 reactive 物件，如果需要解構，可使用 storeToRefs 進行解構</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// refs</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">APILoading</span> &#125; = <span class="title function_">storeToRefs</span>(store);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title class_">APILoading</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Options API Support<br>引入 mapState 可以像 Vuex 一樣註冊到 options API，但不用 magic string，而是注入 hook function 即可</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 hook</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 可透過 this.counter 取得狀態</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useStore, [<span class="string">&#x27;counter&#x27;</span>]),</span><br><span class="line">    <span class="comment">// 與上方相同，但註冊為 this.storeCounter</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(useStore, &#123;</span><br><span class="line">      <span class="attr">storeCounter</span>: <span class="string">&#x27;counter&#x27;</span>,</span><br><span class="line">      <span class="comment">// 也可以 function 直接取得 store 進行複雜處理</span></span><br><span class="line">      <span class="attr">double</span>: <span class="function"><span class="params">store</span> =&gt;</span> store.<span class="property">counter</span> * <span class="number">2</span>,</span><br><span class="line">      <span class="comment">// 一樣可正確註冊，但 typescript 會無法正確自動推斷類型</span></span><br><span class="line">      <span class="title function_">magicValue</span>(<span class="params">store</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> store.<span class="property">someGetter</span> + <span class="variable language_">this</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">double</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>Getters<br>getters 與 Vuex 相同，第一個 args 為 state</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 可用箭頭函數</span></span><br><span class="line">    <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">counter</span> * <span class="number">2</span>,</span><br><span class="line">    <span class="comment">// this 指向 store 本身</span></span><br><span class="line">    <span class="title function_">doubleCountPlusOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 组件内使用</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">    store.<span class="property">counter</span> = <span class="number">3</span></span><br><span class="line">    store.<span class="property">doubleCount</span> <span class="comment">// 6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Actions<br>actions 就像組件中的 methods，且支援 async function，跟 state, getters 相同，透過 this 可以調用取得</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">counter</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span>++;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">randomizeCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">counter</span> = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">100</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">    store.<span class="title function_">increment</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Options API Support與 Vuex 相同<br>5. Subscribe actions<br>可使用 $onAction 監聽 action 的調用，詳細可參考官方說明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回傳 unsubscribe 函數</span></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.$onAction(<span class="function">(<span class="params">&#123; name, after, onError &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">&#x27;increment&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// after 會在 action 調用完全返回後才執行</span></span><br><span class="line">    <span class="comment">// 會等待所有回傳的 promise</span></span><br><span class="line">    <span class="title function_">after</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">        <span class="string">`Finished &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">          <span class="built_in">Date</span>.now() - startTime</span></span></span><br><span class="line"><span class="subst"><span class="string">        &#125;</span>ms.\nResult: <span class="subst">$&#123;result&#125;</span>.`</span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// onError 會在 action 報錯時調用</span></span><br><span class="line">    <span class="title function_">onError</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`Failed &quot;<span class="subst">$&#123;name&#125;</span>&quot; after <span class="subst">$&#123;<span class="built_in">Date</span>.now() - startTime&#125;</span>ms.\nError: <span class="subst">$&#123;error&#125;</span>.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可手動移除監聽</span></span><br><span class="line"><span class="title function_">unsubscribe</span>();</span><br></pre></td></tr></table></figure><h1 id="Usage-組件外使用"><a href="#Usage-組件外使用" class="headerlink" title="Usage 組件外使用"></a>Usage 組件外使用</h1><hr><p>組件外使用須特別注意調用時機，由於 pinia 的 store 完全依賴主核心 pinia 的安裝，需要確保所有 store hook 調用在 pinia 註冊在 app 後</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pinia <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useStore &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先註冊</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 後調用</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br></pre></td></tr></table></figure><p>但刻意處理這種調用時機是非常累人的，建議都一律在函數 function 中調用即可保證 pinia 正確安裝完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// X: 在函數外調用</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// O: 在函數中調用</span></span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pinia </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7环境问题</title>
      <link href="/2023/03/08/Linux%E7%AF%87/centos7%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/"/>
      <url>/2023/03/08/Linux%E7%AF%87/centos7%E7%8E%AF%E5%A2%83%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="centos-安装python3导致yum报错"><a href="#centos-安装python3导致yum报错" class="headerlink" title="centos 安装python3导致yum报错"></a>centos 安装python3导致yum报错</h2><blockquote><p>centos yum报错 File “&#x2F;usr&#x2F;bin&#x2F;yum”, line 30 except KeyboardInterrupt, e:</p></blockquote><p><strong>报错：</strong><br>报错一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;/usr/bin/yum&quot;</span>, line 30</span><br><span class="line">   except KeyboardInterrupt, e:</span><br></pre></td></tr></table></figure><p>报错二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;/usr/libexec/urlgrabber-ext-down&quot;</span>, line 28</span><br><span class="line">  except OSError, e:</span><br></pre></td></tr></table></figure><p><strong>原因：</strong><br>以上两个报错，是因为我安装python3之后，同时让它作为默认版本软链接到&#x2F;usr&#x2F;bin&#x2F;python导致。<br> yum默认使用系统自带的python2.7作为解释器，现在默认python3.6，也就解析2.7语法报错了。</p><p><strong>解决方法：</strong><br>报错一：<br>编辑&#x2F;usr&#x2F;bin&#x2F;yum，将第一行原本&#x2F;usr&#x2F;bin&#x2F;python修改为&#x2F;usr&#x2F;bin&#x2F;python2即可，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python2</span></span><br><span class="line">import sys</span><br><span class="line">try:</span><br><span class="line">    import yum</span><br><span class="line">except ImportError:</span><br><span class="line">    <span class="built_in">print</span> &gt;&gt; sys.stderr, <span class="string">&quot;&quot;</span><span class="string">&quot;\</span></span><br><span class="line"><span class="string">There was a problem importing one of the Python modules</span></span><br><span class="line"><span class="string">required to run yum. The error leading to this problem was:</span></span><br><span class="line"><span class="string">...(以下省略)</span></span><br></pre></td></tr></table></figure><p>报错二：<br>编辑<code>/usr/libexec/urlgrabber-ext-down</code>，也是把第一行修改为<code>/usr/bin/python2</code>即可，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/python2</span></span><br><span class="line"><span class="comment">#  A very simple external downloader</span></span><br><span class="line"><span class="comment">#  Copyright 2011-2012 Zdenek Pavlas</span></span><br><span class="line"></span><br><span class="line">import time, os, errno, sys</span><br><span class="line">from urlgrabber.grabber import \</span><br><span class="line">    _readlines, URLGrabberOptions, _loads, \</span><br><span class="line">    PyCurlFileObject, URLGrabError</span><br><span class="line">...(以下省略)</span><br></pre></td></tr></table></figure><p>修正之后就可以正常使用yum了！</p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA配置Nacos</title>
      <link href="/2023/03/02/Java%E7%AF%87/JAVA%E9%85%8D%E7%BD%AENacos/"/>
      <url>/2023/03/02/Java%E7%AF%87/JAVA%E9%85%8D%E7%BD%AENacos/</url>
      
        <content type="html"><![CDATA[<h2 id="window安装Nacos"><a href="#window安装Nacos" class="headerlink" title="window安装Nacos"></a>window安装Nacos</h2><h3 id="去Nacos官网下载本地应用"><a href="#去Nacos官网下载本地应用" class="headerlink" title="去Nacos官网下载本地应用"></a>去Nacos官网下载本地应用</h3><p><a href="https://github.com/alibaba/nacos/releases/download/2.2.0.1/nacos-server-2.2.0.1.zip">*.zip下载链接</a><br><a href="https://github.com/alibaba/nacos/releases/download/2.2.0.1/nacos-server-2.2.0.1.tar.gz">*.tar.gz下载链接</a></p><h3 id="配置nacos配置文件"><a href="#配置nacos配置文件" class="headerlink" title="配置nacos配置文件"></a>配置nacos配置文件</h3><p>安装完成后,在<code>nacos/conf/</code>目录下编辑<code>application.properties</code>文件<br>配置连接数据库的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.url.0=jdbc:mysql://***.***.**.*:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=UTC</span><br><span class="line">db.user.0=***</span><br><span class="line">db.password.0=******</span><br></pre></td></tr></table></figure><p><img src="/./source/nacos_config.png" alt="配置文件截图"></p><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><p>下载<code>mysql</code>,不在此赘述<a href="__%E5%8E%BB%E5%85%B6%E4%BB%96%E5%8D%9A%E5%AE%A2%E5%86%85%E6%96%87%E7%AB%A0%E6%90%9C%E7%B4%A2__(centos%E5%AE%89%E8%A3%85mysql)">^mysql安装</a></p><p><u>在<code>nacos\conf</code>目录下找到<code>nacos-mysql.sql</code>文件,复制sql去第二步配置的数据库中执行sql文件</u></p><h3 id="启动nacos"><a href="#启动nacos" class="headerlink" title="启动nacos"></a>启动nacos</h3><p>在<code>nacos/bin/</code>目录下找到<code>startup.cmd</code>双击执行程序</p><hr><p>本地调试情况下，需要右键编辑<code>startup.cmd</code>修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;cluster&quot;</span></span><br><span class="line"><span class="comment"># 修改为</span></span><br><span class="line"><span class="built_in">set</span> MODE=<span class="string">&quot;standalone&quot;</span></span><br><span class="line"><span class="comment"># 所以在走下面的逻辑时会走集群模式的逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> %MODE% == <span class="string">&quot;standalone&quot;</span> (</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nacos is starting with standalone&quot;</span></span><br><span class="line">   <span class="built_in">set</span><span class="string">&quot;NACOS_OPTS=-Dnacos.standalone=true&quot;</span></span><br><span class="line">    <span class="built_in">set</span> <span class="string">&quot;NACOS_JVM_OPTS=-Xms512m -Xmx512m -Xmn256m&quot;</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">rem <span class="keyword">if</span> nacos startup mode is cluster</span><br><span class="line"><span class="keyword">if</span> %MODE% == <span class="string">&quot;cluster&quot;</span> (</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;nacos is starting with cluster&quot;</span></span><br><span class="line">   <span class="keyword">if</span> %EMBEDDED_STORAGE% == <span class="string">&quot;embedded&quot;</span> (</span><br><span class="line">       <span class="built_in">set</span><span class="string">&quot;NACOS_OPTS=-DembeddedStorage=true&quot;</span></span><br><span class="line">   )</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">set</span> <span class="string">&quot;NACOS_JVM_OPTS=-server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%BASE_DIR%\logs\java_heapdump.hprof -XX:-UseLargePages&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js循环使用async，await</title>
      <link href="/2023/02/07/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/js%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8async%EF%BC%8Cawait/"/>
      <url>/2023/02/07/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/js%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8async%EF%BC%8Cawait/</url>
      
        <content type="html"><![CDATA[<p>async 与 await 的使用方式相对简单。 蛤当你尝试在循环中使用await时，事情就会变得复杂一些。</p><p>在本文中，分享一些在如果循环中使用await值得注意的问题。</p><h2 id="准备一个例子"><a href="#准备一个例子" class="headerlink" title="准备一个例子"></a>准备一个例子</h2><p>对于这篇文章，假设你想从水果篮中获取水果的数量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruitBasket = &#123;</span><br><span class="line"> <span class="attr">apple</span>: <span class="number">27</span>,</span><br><span class="line"> <span class="attr">grape</span>: <span class="number">0</span>,</span><br><span class="line"> <span class="attr">pear</span>: <span class="number">14</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>你想从fruitBasket获得每个水果的数量。 要获取水果的数量，可以使用getNumFruit函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getNumFruit</span> = fruit =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fruitBasket[fruit];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numApples = <span class="title function_">getNumFruit</span>(<span class="string">&#x27;apple&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numApples); <span class="comment">//27</span></span><br></pre></td></tr></table></figure><p>现在，假设fruitBasket是从服务器上获取，这里我们使用 setTimeout 来模拟。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sleep</span> = ms =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNumFruie</span> = fruit =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">sleep</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> fruitBasket[fruit]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getNumFruit</span>(<span class="string">&quot;apple&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">num</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(num)); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>最后，假设你想使用await和getNumFruit来获取异步函数中每个水果的数量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">control</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numApples = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(<span class="string">&#x27;apple&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numApples);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numGrapes = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(<span class="string">&#x27;grape&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numGrapes);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numPears = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(<span class="string">&#x27;pear&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numPears);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>图片描述</p><p>在 for 循环中使用 await<br>首先定义一个存放水果的数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fruitsToGet = [“apple”, “grape”, “pear”];</span><br></pre></td></tr></table></figure><p>循环遍历这个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fruitsToGet.<span class="property">length</span>; index++) &#123;</span><br><span class="line">    <span class="comment">// 得到每个水果的数量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在for循环中，过上使用getNumFruit来获取每个水果的数量，并将数量打印到控制台。</p><p>由于getNumFruit返回一个promise，我们使用 await 来等待结果的返回并打印它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; fruitsToGet.<span class="property">length</span>; index ++) &#123;</span><br><span class="line">    <span class="keyword">const</span> fruit = fruitsToGet[index];</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(fruit);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numFruit);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用await时，希望JavaScript暂停执行，直到等待 promise 返回处理结果。这意味着for循环中的await 应该按顺序执行。</p><p>结果正如你所预料的那样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“<span class="title class_">Start</span>”;</span><br><span class="line">“<span class="title class_">Apple</span>: <span class="number">27</span>”;</span><br><span class="line">“<span class="title class_">Grape</span>: <span class="number">0</span>”;</span><br><span class="line">“<span class="title class_">Pear</span>: <span class="number">14</span>”;</span><br><span class="line">“<span class="title class_">End</span>”;</span><br></pre></td></tr></table></figure><p>图片描述</p><p>这种行为适用于大多数循环(比如while和for-of循环)…</p><p>但是它不能处理需要回调的循环，如forEach、map、filter和reduce。在接下来的几节中，我们将研究await 如何影响forEach、map和filter。</p><p>在 forEach 循环中使用 await<br>首先，使用 forEach 对数组进行遍历。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forEach</span> = _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  fruitsToGet.<span class="title function_">forEach</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们将尝试使用getNumFruit获取水果数量。 （注意回调函数中的async关键字。我们需要这个async关键字，因为await在回调函数中）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">forEachLoop</span> = _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  fruitsToGet.<span class="title function_">forEach</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(fruit);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(numFruit)</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我期望控制台打印以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“<span class="title class_">Start</span>”;</span><br><span class="line">“<span class="number">27</span>”;</span><br><span class="line">“<span class="number">0</span>”;</span><br><span class="line">“<span class="number">14</span>”;</span><br><span class="line">“<span class="title class_">End</span>”;</span><br></pre></td></tr></table></figure><p>但实际结果是不同的。在forEach循环中等待返回结果之前，JavaScrip先执行了 console.log(‘End’)。</p><p>实际控制台打印如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">‘<span class="title class_">Start</span>’</span><br><span class="line">‘<span class="title class_">End</span>’</span><br><span class="line">‘<span class="number">27</span>’</span><br><span class="line">‘<span class="number">0</span>’</span><br><span class="line">‘<span class="number">14</span>’</span><br></pre></td></tr></table></figure><p>图片描述</p><p><strong>JavaScript 中的 forEach不支持 promise 感知，也支持 async 和await，所以不能在 forEach 使用 await 。</strong></p><p>在 map 中使用 await<br>如果在map中使用await, map 始终返回promise数组，这是因为异步函数总是返回promise。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> numFruits = <span class="keyword">await</span> fruitsToGet.<span class="title function_">map</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(fruit);</span><br><span class="line">    <span class="keyword">return</span> numFruit;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numFruits);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">“<span class="title class_">Start</span>”;</span><br><span class="line">“[<span class="title class_">Promise</span>, <span class="title class_">Promise</span>, <span class="title class_">Promise</span>]”;</span><br><span class="line">“<span class="title class_">End</span>”;</span><br></pre></td></tr></table></figure><p><strong>如果你在 map 中使用 await，map 总是返回promises，你必须等待promises 数组得到处理。 或者通过await Promise.all(arrayOfPromises)来完成此操作。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promises = fruitsToGet.<span class="title function_">map</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(fruit);</span><br><span class="line">    <span class="keyword">return</span> numFruit;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> numFruits = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(numFruits);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p>图片描述</p><p>如果你愿意，可以在promise 中处理返回值，解析后的将是返回的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">mapLoop</span> = _ =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> promises = fruitsToGet.<span class="title function_">map</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> <span class="title function_">getNumFruit</span>(fruit);</span><br><span class="line">    <span class="keyword">return</span> numFruit + <span class="number">100</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">“<span class="title class_">Start</span>”;</span><br><span class="line">“[<span class="number">127</span>, <span class="number">100</span>, <span class="number">114</span>]”;</span><br><span class="line">“<span class="title class_">End</span>”;</span><br></pre></td></tr></table></figure><p>在 filter 循环中使用 await<br>当你使用filter时，希望筛选具有特定结果的数组。假设过滤数量大于20的数组。</p><p>如果你正常使用filter （没有 await），如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">filterLoop</span> =  _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> moreThan20 =  fruitsToGet.<span class="title function_">filter</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> fruitBasket[fruit]</span><br><span class="line">    <span class="keyword">return</span> numFruit &gt; <span class="number">20</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(moreThan20) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Start</span></span><br><span class="line">[<span class="string">&quot;apple&quot;</span>]</span><br><span class="line"><span class="variable constant_">END</span></span><br></pre></td></tr></table></figure><p>filter 中的await不会以相同的方式工作。 事实上，它根本不起作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">filterLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> moreThan20 =  <span class="keyword">await</span> fruitsToGet.<span class="title function_">filter</span>(<span class="keyword">async</span> fruit =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = fruitBasket[fruit]</span><br><span class="line">    <span class="keyword">return</span> numFruit &gt; <span class="number">20</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(moreThan20) </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="title class_">Start</span></span><br><span class="line">[<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;grape&quot;</span>, <span class="string">&quot;pear&quot;</span>]</span><br><span class="line"><span class="variable constant_">END</span></span><br></pre></td></tr></table></figure><p>为什么会发生这种情况?</p><p><strong>当在filter 回调中使用await时，回调总是一个promise。由于promise 总是真的，数组中的所有项都通过filter</strong> 。在filter 使用 await类以下这段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filtered = array.<span class="title function_">filter</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>在filter使用 await 正确的三个步骤</p><p>使用map返回一个promise 数组<br>使用 await 等待处理结果<br>使用 filter 对返回的结果进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">filterLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> promises = <span class="keyword">await</span> fruitsToGet.<span class="title function_">map</span>(<span class="function"><span class="params">fruit</span> =&gt;</span> <span class="title function_">getNumFruit</span>(fruit));</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> numFruits = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> moreThan20 = fruitsToGet.<span class="title function_">filter</span>(<span class="function">(<span class="params">fruit, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = numFruits[index];</span><br><span class="line">    <span class="keyword">return</span> numFruit &gt; <span class="number">20</span>;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(moreThan20);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>在 reduce 循环中使用 await<br>如果想要计算 fruitBastet中的水果总数。 通常，你可以使用reduce循环遍历数组并将数字相加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reduceLoop</span> = _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = fruitsToGet.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, fruit</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = fruitBasket[fruit];</span><br><span class="line">    <span class="keyword">return</span> sum + numFruit;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>clipboard.png</p><p><strong>当你在 reduce 中使用await时，结果会变得非常混乱。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">const</span> <span class="title function_">reduceLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = <span class="keyword">await</span> fruitsToGet.<span class="title function_">reduce</span>(<span class="keyword">async</span> (sum, fruit) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> fruitBasket[fruit];</span><br><span class="line">    <span class="keyword">return</span> sum + numFruit;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[object Promise]14 是什么 鬼？？</p><p>剖析这一点很有趣。</p><p>在第一次遍历中，sum为0。numFruit是27(通过getNumFruit(apple)的得到的值)，0 + 27 &#x3D; 27。<br>在第二次遍历中，sum是一个promise。 （为什么？因为异步函数总是返回promises！）numFruit是0.promise 无法正常添加到对象，因此JavaScript将其转换为[object Promise]字符串。 [object Promise] + 0 是object Promise] 0。<br>在第三次遍历中，sum 也是一个promise。 numFruit是14. [object Promise] + 14是[object Promise] 14。<br>解开谜团！</p><p>这意味着，你可以在reduce回调中使用await，但是你必须记住先等待累加器！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reduceLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = <span class="keyword">await</span> fruitsToGet.<span class="title function_">reduce</span>(<span class="keyword">async</span> (promisedSum, fruit) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="keyword">await</span> promisedSum;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> fruitBasket[fruit];</span><br><span class="line">    <span class="keyword">return</span> sum + numFruit;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是从上图中看到的那样，await 操作都需要很长时间。 发生这种情况是因为reduceLoop需要等待每次遍历完成promisedSum。</p><p>有一种方法可以加速reduce循环，如果你在等待promisedSum之前先等待getNumFruits()，那么reduceLoop只需要一秒钟即可完成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reduceLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> sum = <span class="keyword">await</span> fruitsToGet.<span class="title function_">reduce</span>(<span class="keyword">async</span> (promisedSum, fruit) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> numFruit = <span class="keyword">await</span> fruitBasket[fruit];</span><br><span class="line">    <span class="keyword">const</span> sum = <span class="keyword">await</span> promisedSum;</span><br><span class="line">    <span class="keyword">return</span> sum + numFruit;</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是因为reduce可以在等待循环的下一个迭代之前触发所有三个getNumFruit promise。然而，这个方法有点令人困惑，因为你必须注意等待的顺序。</p><p>在reduce中使用wait最简单(也是最有效)的方法是</p><p>使用map返回一个promise 数组<br>使用 await 等待处理结果<br>使用 reduce 对返回的结果进行处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reduceLoop</span> = <span class="keyword">async</span> _ =&gt; &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = fruitsToGet.<span class="title function_">map</span>(getNumFruit);</span><br><span class="line"><span class="keyword">const</span> numFruits = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line"><span class="keyword">const</span> sum = numFruits.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, fruit</span>) =&gt;</span> sum + fruit);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个版本易于阅读和理解，需要一秒钟来计算水果总数。</p><p>从上面看出来什么</p><blockquote><p>如果你想连续执行await调用，请使用for循环(或任何没有回调的循环)。<br>永远不要和forEach一起使用await，而是使用for循环(或任何没有回调的循环)。<br>不要在 filter 和 reduce 中使用 await，如果需要，先用 map 进一步骤处理，然后在使用 filter 和 reduce 进行处理。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uniapp使用问题</title>
      <link href="/2023/02/02/%E5%89%8D%E7%AB%AF%E7%AF%87/uniapp%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2023/02/02/%E5%89%8D%E7%AB%AF%E7%AF%87/uniapp%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>uniapp使用uni.$emit传递数据,只能在父组件使用onMounted中使用 uni.$on()去监听事件</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue3使用编程式渲染组件</title>
      <link href="/2023/02/01/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue3%E4%BD%BF%E7%94%A8%E7%BC%96%E7%A8%8B%E5%BC%8F%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6/"/>
      <url>/2023/02/01/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue3%E4%BD%BF%E7%94%A8%E7%BC%96%E7%A8%8B%E5%BC%8F%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="vue3使用render渲染组件"><a href="#vue3使用render渲染组件" class="headerlink" title="vue3使用render渲染组件"></a>vue3使用render渲染组件</h2><blockquote><p>vue3中语法糖<code>script setup</code>是<code>SFC</code>组件,不适用渲染的组件,必须使用<code>plain</code>的文件，类似React中<strong>函数组件</strong>，只用于渲染页面，是无状态组件（在react16.8中添加了hooks可以使用<code>useState</code>钩子去管理<code>state</code>，使用<code>useEffect</code>钩子使用生命周期函数）</p></blockquote><h2 id="vue3常见问题"><a href="#vue3常见问题" class="headerlink" title="vue3常见问题"></a>vue3常见问题</h2><ol><li>vue3中reactive数据被重新赋值后会丢失响应式,无法直接赋值<br>  解决办法</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用state属性重新赋值</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123;&#125;)</span><br><span class="line">state.<span class="property">name</span> = <span class="string">&#x27;response重新赋值&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ref</span></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">ref</span>()</span><br><span class="line">state.<span class="property">value</span> = <span class="string">&#x27;response重新赋值&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java配置篇</title>
      <link href="/2022/12/27/Java%E7%AF%87/Java%E9%85%8D%E7%BD%AE%E7%AF%87/"/>
      <url>/2022/12/27/Java%E7%AF%87/Java%E9%85%8D%E7%BD%AE%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA注解</title>
      <link href="/2022/12/20/Java%E7%AF%87/JAVA%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/12/20/Java%E7%AF%87/JAVA%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="RestController"><a href="#RestController" class="headerlink" title="RestController"></a>RestController</h3><div class="note blue icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>当Spring发现<code>@Autowired</code>注解时,将自动在代码上下文中找到和其匹配(默认是类型匹配)的Bean,并自动注入到相应的地方去</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  Person person;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/property&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getPersonData</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;config----&quot;</span> + person);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h3><div class="note red icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>不支持<code>yml</code>文件，只支持<code>properties</code>配置文件</p></div>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TS使用进阶</title>
      <link href="/2022/12/01/%E5%89%8D%E7%AB%AF%E7%AF%87/TS/TS%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/12/01/%E5%89%8D%E7%AB%AF%E7%AF%87/TS/TS%E4%BD%BF%E7%94%A8%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<ul><li><ol><li><a href="#">类型别名</a></li></ol></li><li><ol start="2"><li><a href="#-1">字符串字面类型</a></li></ol></li><li><ol start="3"><li><a href="#-1">元组</a></li></ol></li><li><ol start="4"><li><a href="#Class">类别 Class</a></li></ol><ul><li>4.1. <a href="#-1">实例属性</a></li><li>4.2. <a href="#static">态属性 static</a></li><li>4.3. <a href="#-1">类别属性定义</a></li><li>4.4. <a href="#-1">抽象类别</a></li></ul></li><li><ol start="5"><li><a href="#Classinterface">类别与介面 Class &amp; interface</a></li></ol><ul><li>5.1. <a href="#classimplementsinterface">类别实现介面 class implements interface</a></li></ul></li><li><ol start="6"><li><a href="#-1">泛型</a></li></ol><ul><li>6.1. <a href="#-1">基础使用</a></li><li>6.2. <a href="#-1">多型别</a></li><li>6.3. <a href="#-1">泛型约束</a></li><li>6.4. <a href="#-1">泛型介面</a></li><li>6.5. <a href="#-1">泛型引数的设型别</a></li></ul></li><li><ol start="7"><li><a href="#-1">常用技巧</a></li></ol><ul><li>7.1. <a href="#-1">提取变数型别</a></li><li>7.2. <a href="#this">绑定函数 this 指标</a></li><li>7.3. <a href="#-1">索引变数</a></li><li>7.4. <a href="#-1">内建类型</a></li></ul></li></ul><h2 id="1-类型别名"><a href="#1-类型别名" class="headerlink" title="1. 类型别名"></a>1. <a name=''></a>类型别名</h2><p>用来给一个类型取新名子，常用于联合类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Name</span> = string;</span><br><span class="line">type <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> string;</span><br><span class="line">type <span class="title class_">NameOrResolver</span> = <span class="title class_">Name</span> | <span class="title class_">NameResolver</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">x: NameOrResolver</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">x</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-字符串字面类型"><a href="#2-字符串字面类型" class="headerlink" title="2. 字符串字面类型"></a>2. <a name='-1'></a>字符串字面类型</h2><p>限定取值只限于特定字串中的一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">EventNames</span> = <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;scroll&#x27;</span> | <span class="string">&#x27;mousemove&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleEvent</span>(<span class="params">el: Element, event: EventNames</span>) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleEvent</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="keyword">as</span> <span class="title class_">Element</span>, <span class="string">&#x27;scroll&#x27;</span>);</span><br><span class="line"><span class="title function_">handleEvent</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;hello&#x27;</span>) <span class="keyword">as</span> <span class="title class_">Element</span>, <span class="string">&#x27;jump&#x27;</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h2 id="3-元组"><a href="#3-元组" class="headerlink" title="3. 元组"></a>3. <a name='-1'></a>元组</h2><p>列合併了相同类型的对象，元组合併了不同类型的对象</p><p>访或修改已知索引的元素时，会得到正确的类型<br>初始化时必包含所有内部元素，除非该元素为「可选」</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">john</span>: [string, number] = [<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">kevin</span>: [string, number?];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.</span></span><br><span class="line">john[<span class="number">0</span>] = <span class="string">&#x27;johnny dept&#x27;</span>;</span><br><span class="line">john[<span class="number">1</span>] = <span class="string">&#x27;100&#x27;</span>; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line">kevin = [<span class="string">&#x27;Kevin&#x27;</span>]; <span class="comment">// 初始化有少东西也会报错，这 age 是可选所以不会错</span></span><br></pre></td></tr></table></figure><p>越界<br>当新增超出原本元祖上限的元素时，它的型别会被限制为元组中每个型别的联合型别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: [string, number] = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">25</span>];</span><br><span class="line">tom.<span class="title function_">push</span>(<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line">tom.<span class="title function_">push</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; 类型 ‘boolean’ 的引数不可指派给类型 ‘string | number’ 的参数。</p><h2 id="4-类别-Class"><a href="#4-类别-Class" class="headerlink" title="4. 类别 Class"></a>4. <a name='Class'></a>类别 Class</h2><p>由于类别主要基础都跟 ES6 中的类别概念雷同，此不赘述，仅从 ES7 提案新的功能部分说明。</p><h3 id="4-1-实例属性"><a href="#4-1-实例属性" class="headerlink" title="4.1. 实例属性"></a>4.1. <a name='-1'></a>实例属性</h3><p>ES7 提案中可以直接在类别面定义实例属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="4-2-态属性-static"><a href="#4-2-态属性-static" class="headerlink" title="4.2. 态属性 static"></a>4.2. <a name='static'></a>态属性 static</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> num = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-类别属性定义"><a href="#4-3-类别属性定义" class="headerlink" title="4.3. 类别属性定义"></a>4.3. <a name='-1'></a>类别属性定义</h3><p>另外，TypeScript 可以使用三种访修符（Access Modifiers），分别是 <code>public、private</code> 和 <code>protected</code></p><ul><li>public 修的属性或方法是公有的，可以在任何地方被访到。（设）</li><li>private 修的属性或方法是私有的，不能在宣告它的类别的外部访</li><li>protected 修的属性或方法是受保护的，和 private 类似，但在子类别中是允许被访的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  private name;</span><br><span class="line">  public <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Cute&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">name</span>); <span class="comment">// &#x27;name&#x27; 是私用属性，只可从类别 &#x27;Animal&#x27; 中存取。</span></span><br><span class="line">dog.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>; <span class="comment">// &#x27;name&#x27; 是私用属性，只可从类别 &#x27;Animal&#x27; 中存取。</span></span><br></pre></td></tr></table></figure><blockquote><p>需注意 <code>private</code> 在编译后的代码中并没有被限制，仅会在编译时提示。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Animal</span> = <span class="comment">/** <span class="doctag">@class</span> */</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Animal</span>;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Cute&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">name</span>); <span class="comment">// Cute</span></span><br><span class="line">dog.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>readonly</code> 只读属性关键字，只允许出现在属性宣告或索引签名中，若与其他访修符同时存在的话，需要写在其后面。</p><h3 id="4-4-抽象类别"><a href="#4-4-抽象类别" class="headerlink" title="4.4. 抽象类别"></a>4.4. <a name='-1'></a>抽象类别</h3><p><code>abstract</code> 用于定义抽象类别和其中的抽象方法，其不允许被实例化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类别，不允许被直接实例化</span></span><br><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  public name;</span><br><span class="line">  public <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  public abstract <span class="title function_">sayHi</span>(); <span class="comment">// 抽象方法，在子类别中被定义</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Jack&#x27;</span>); <span class="comment">// 无法建立抽象类别的执行个体。ts(2511)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  public <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is eating.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;Tom&#x27;</span>); </span><br><span class="line"><span class="comment">// 非抽象类别 &#x27;Cat&#x27; 未实作从类别 &#x27;Animal&#x27; 继承而来的抽象成员 &#x27;sayHi&#x27;。ts(2515)</span></span><br></pre></td></tr></table></figure><p>需注意，即使是抽象类别，一样会出现在编译的结果当中。</p><h2 id="5-类别与介面-Class-amp-interface"><a href="#5-类别与介面-Class-amp-interface" class="headerlink" title="5. 类别与介面 Class &amp; interface"></a>5. <a name='classimplementsinterface'></a>类别与介面 Class &amp; interface</h2><h3 id="5-1-类别实现介面-class-implements-interface"><a href="#5-1-类别实现介面-class-implements-interface" class="headerlink" title="5.1. 类别实现介面 class implements interface"></a>5.1. <a name='classimplementsinterface'></a>类别实现介面 class implements interface</h3><p>有时候不同类别之可以有一些共有的特性，这时候就可以把特性提取成介面（interfaces），并用 implements 关键字来让类别实现。</p><p>假设我们有两个客户的模组都分别需要加入聊天室功能，这时就可以考虑将聊天室功能提取出去作为一个介面，让两个类别去实现它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Chatroom</span> &#123;</span><br><span class="line">  <span class="title function_">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomA</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Customer</span> implements <span class="title class_">Chatroom</span> &#123;</span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome to A&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomB</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Customer</span> implements <span class="title class_">Chatroom</span> &#123;</span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome to B&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类别可以实现多个介面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Chatroom</span> &#123;</span><br><span class="line">  <span class="title function_">connect</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Shop</span> &#123;</span><br><span class="line">  <span class="title function_">buy</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Custom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Customer</span> implements <span class="title class_">Chatroom</span>, <span class="title class_">Shop</span> &#123;</span><br><span class="line">  <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">buy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;buy successful&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有更多介面与类别之的继承方式可见这里</p><h2 id="6-泛型"><a href="#6-泛型" class="headerlink" title="6. 泛型"></a>6. <a name='-1'></a>泛型</h2><p>泛型（Generics）是指在定义函式、介面或类别的时候，不先指定具体的型别，而在使用的时候再指定型别的一种特性。</p><h3 id="6-1-基础使用"><a href="#6-1-基础使用" class="headerlink" title="6.1. 基础使用"></a>6.1. <a name='-1'></a>基础使用</h3><p>举个例子，我们需要作一个产生相同内容的列函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">length: number, value: any</span>): <span class="title class_">Array</span>&lt;any&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段在编译上完全不会有，但会有个明显的缺陷，我们的 value 实应该跟输出的元素为相同型别，但却没有非常精确的进行匹配，而是用 any 取代。</p><p>此时我们来试试使用泛型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray&lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，我们在函式名后添加了 <T>，其中 T 用来指代任意输入的型别，在后面的输入 value: T 和输出 Array<T> 中即可使用了。</p><p>接着在唿叫时，我们可以明确定义传入的型别，或是什么都不加完全依靠型别推论来推算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>); <span class="comment">// [&#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="6-2-多型别"><a href="#6-2-多型别" class="headerlink" title="6.2. 多型别"></a>6.2. <a name='-1'></a>多型别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> swap&lt;T, U&gt;(<span class="attr">tuple</span>: [T, U]): [U, T] &#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">swap</span>([<span class="number">7</span>, <span class="string">&#x27;seven&#x27;</span>]); <span class="comment">// [&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure><h3 id="6-3-泛型约束"><a href="#6-3-泛型约束" class="headerlink" title="6.3. 泛型约束"></a>6.3. <a name='-1'></a>泛型约束</h3><p>使用泛型变数的时候，由于事先不知道它是哪种型别，所以不能意的操作它的属性或方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> someFunc&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类型 &#x27;T&#x27; 没有属性 &#x27;length&#x27;。ts(2339)</span></span><br></pre></td></tr></table></figure><p>由于泛型 T 不一定包含属性 length，编译时会出错。</p><p>此时我们可以对泛型进行约束，使用 extends 限制该泛型为包含 length 属性的变数介面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> someFunc&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时若唿叫时传入参数不包含 length 则会报错</span></span><br><span class="line"><span class="title function_">loggingIdentity</span>(<span class="number">7</span>);</span><br><span class="line"><span class="comment">// 类型 &#x27;number&#x27; 的引数不可指派给类型 &#x27;Lengthwise&#x27; 的参数。ts(2345)</span></span><br></pre></td></tr></table></figure><h3 id="6-4-泛型介面"><a href="#6-4-泛型介面" class="headerlink" title="6.4. 泛型介面"></a>6.4. <a name='-1'></a>泛型介面</h3><p>使用含有泛型的介面来定义函式的介面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">CreateArrayFunc</span> &#123;</span><br><span class="line">  &lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure><p>甚至，我们可以把泛型引数提前到介面名上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">CreateArrayFunc</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，此时需要给定介面 1 个型别引数</span></span><br><span class="line"><span class="comment">// 泛型类型 &#x27;CreateArrayFunc&lt;T&gt;&#x27; 需要 1 个型别引数。ts(2314)</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>&lt;any&gt;;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="6-5-泛型引数的设型别"><a href="#6-5-泛型引数的设型别" class="headerlink" title="6.5. 泛型引数的设型别"></a>6.5. <a name='-1'></a>泛型引数的设型别</h3><p>在 TypeScript 2.3 以后，我们可以为泛型中的型别引数指定设型别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给定设引数型别</span></span><br><span class="line">interface <span class="title class_">CreateArrayFunc</span>&lt;T = any&gt; &#123;</span><br><span class="line">  (<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当没有明确给定引数型别时，将以设型别推算</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createArray</span>: <span class="title class_">CreateArrayFunc</span>;</span><br><span class="line">createArray = <span class="keyword">function</span>&lt;T&gt;(<span class="attr">length</span>: number, <span class="attr">value</span>: T): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-常用技巧"><a href="#7-常用技巧" class="headerlink" title="7. 常用技巧"></a>7. <a name='-1'></a>常用技巧</h2><h3 id="7-1-提取变数型别"><a href="#7-1-提取变数型别" class="headerlink" title="7.1. 提取变数型别"></a>7.1. <a name='-1'></a>提取变数型别</h3><p>使用 typeof 提取变数型别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line">type A = <span class="keyword">typeof</span> a; <span class="comment">// number</span></span><br><span class="line">type B = <span class="keyword">typeof</span> b; <span class="comment">// &#123; x: number, y: number &#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-绑定函数-this-指标"><a href="#7-2-绑定函数-this-指标" class="headerlink" title="7.2. 绑定函数 this 指标"></a>7.2. <a name='this'></a>绑定函数 this 指标</h3><p>绑定函数 this 在第一个参数上，详见参考</p><p>此仅在编译段检查，实编译后并不会绑定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">say</span>(<span class="params">name: string</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello: &#x27;</span>, name);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"><span class="variable language_">this</span>: <span class="keyword">typeof</span> obj, str: string</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">say</span>(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-索引变数"><a href="#7-3-索引变数" class="headerlink" title="7.3. 索引变数"></a>7.3. <a name='-1'></a>索引变数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">  [<span class="attr">key</span>: string]: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in 表示遍歷，子属性可包含 &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;，型别为: string</span></span><br><span class="line">type B = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>]: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-内建类型"><a href="#7-4-内建类型" class="headerlink" title="7.4. 内建类型"></a>7.4. <a name='-1'></a>内建类型</h3><p>Typescript 有内建许多好用的类型供开发者直接使用</p><ol><li>Record<br>产生一个 key: K, value: T 型别的对象类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// keyof any 包含: string | number | symbol</span></span><br><span class="line">type <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof any, T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="title class_">Record</span>&lt;string, boolean&gt; = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">bar</span>: <span class="title class_">Record</span>&lt;<span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span>, number&gt; = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DEMO</span></span><br><span class="line">enum <span class="title class_">MethodsEnum</span> &#123;</span><br><span class="line">  <span class="variable constant_">GET</span>=<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">POST</span>=<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">PUT</span>=<span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">DELETE</span>=<span class="string">&#x27;delete&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">HttpFn</span> &#123;</span><br><span class="line">  &lt;T = any&gt;(url:string,config?:AxiosRequestConfig):Promise&lt;T&gt;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">type Http = Record&lt;MethodsEnum,HttpFn&gt;;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ol start="2"><li>Partial<br>使 T 的所有属性为可选</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: string;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Foo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span> <span class="comment">// `a` 非必要</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>Required<br>与 Partial 相反，将所有 T 的属性变为必要</p></li><li><p>Readonly<br>使 T 所有属性变为只读</p></li><li><p>Pick<br>从 T 中选择一些属性使用，该属性来自于 K</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> K]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: string;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">  <span class="attr">c</span>: boolean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo</span>: <span class="title class_">Pick</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="6"><li>Exclude<br>排除掉 T 中包含在 U 的类型</li></ol><p>&#x2F;&#x2F; 如果 T 是 U 的子类型，返回 never, 否则返回 T</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">type <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能为 a, c</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="title class_">Exclude</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt; = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">foo = <span class="string">&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure><ol start="7"><li>Extract<br>与 Exclude 相反，提取 T 中能赋值给 U 的类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 T 是 U 的子类型，返回 T，否则返回 never</span></span><br><span class="line">type <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? never : T</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能为 b</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="title class_">Extract</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt; = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="title class_">Parameters</span></span><br><span class="line">根据函数的参数返回对应的 <span class="title class_">Tuple</span> 类型</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer P) =&gt; any ? P : never</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Foo</span> = <span class="function">(<span class="params">a: string, b: number</span>) =&gt;</span> <span class="keyword">void</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Parameters</span>&lt;<span class="title class_">Foo</span>&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>] <span class="comment">// [string, number]</span></span><br><span class="line"><span class="title class_">ReturnType</span></span><br><span class="line">type <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: any) =&gt; any&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> (...<span class="attr">args</span>:any) =&gt; infer R ? R : any</span><br><span class="line"></span><br><span class="line">type <span class="title class_">Foo</span> = <span class="function">() =&gt;</span> boolean</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">ReturnType</span>&lt;<span class="title class_">Foo</span>&gt; = <span class="literal">true</span> <span class="comment">// 返回 boolean 型别</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> TS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs爬虫编码乱码</title>
      <link href="/2022/11/03/Node/nodejs%E7%88%AC%E8%99%AB%E7%BC%96%E7%A0%81%E4%B9%B1%E7%A0%81/"/>
      <url>/2022/11/03/Node/nodejs%E7%88%AC%E8%99%AB%E7%BC%96%E7%A0%81%E4%B9%B1%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>本菜鸡用 axios 写了一个爬虫，原网页是gb2312编码的，最后输出的中文是乱码。</p><p>百度了一圈：</p><p>如果网站可以返回utf-8编码的网页，那么万事大吉。设置headers如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">headers</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/html;charset=utf-8&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果网站不能返回utf-8编码的网页，可以用iconv-lite进行转码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 iconv-lite 进行转码</span><br><span class="line">首先需要安装：</span><br><span class="line">npm i iconv-lite</span><br></pre></td></tr></table></figure><p>这是一个大神用js写的一个转码库（github链接）</p><p>安装后尝试对得到的数据解码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(pageUrl).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> result = iconv.<span class="title function_">decode</span>(res.<span class="property">data</span>, <span class="string">&#x27;gb2312&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后你会得到一个警告🙃，中文依旧乱码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iconv-lite warning: decode()-ing strings is deprecated. Refer to &lt;https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding&gt;</span><br></pre></td></tr></table></figure><p>原因：根据网上查到的资料，axios 会将请求到的结果会转换成utf-8格式（但是我这里实际上是gb2312），而这种转换是有损的（也就是无法转换回gb2312）。已经损坏的数据无法再正确转码，所以我们需要得到没有经过转换的原始数据。<br>正确用法<br>配置 axios 直接拿 buffer 数据，iconv-lite 可以直接解析buffer数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(pageUrl, &#123;</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"> <span class="keyword">let</span> result = iconv.<span class="title function_">decode</span>(res.<span class="property">data</span>, <span class="string">&#x27;gb2312&#x27;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后得到的中文是没有乱码的，下面是我的爬虫代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">&#x27;iconv-lite&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> httpUrl = <span class="string">&quot;https://www.dy2018.com/html/bikan/&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;td height=&quot;26&quot;&gt;.*?&lt;b&gt;.*?&lt;a href=&quot;(.*?)&quot;.*?&gt;(.*?)&lt;\/a&gt;.*?&lt;\/b&gt;.*?&lt;\/td&gt;/ig</span>s;</span><br><span class="line"><span class="keyword">let</span> testRes, result = [];</span><br><span class="line"><span class="keyword">let</span> baseUrl = url.<span class="title function_">parse</span>(httpUrl).<span class="property">protocol</span> + <span class="string">&quot;//&quot;</span> + url.<span class="title function_">parse</span>(httpUrl).<span class="property">host</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baseUrl)</span><br><span class="line">axios.<span class="title function_">get</span>(httpUrl, &#123;</span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&#x27;arraybuffer&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">    <span class="keyword">let</span> r = iconv.<span class="title function_">decode</span>(res.<span class="property">data</span>, <span class="string">&#x27;gb2312&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(testRes = reg.<span class="title function_">exec</span>(r))&#123;</span><br><span class="line">        result.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: testRes[<span class="number">2</span>],</span><br><span class="line">            <span class="attr">url</span>: url.<span class="title function_">resolve</span>(baseUrl, testRes[<span class="number">1</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    <span class="comment">// 将爬取数据另存为json文件</span></span><br><span class="line">    fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;ret.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(result,<span class="literal">null</span>,<span class="number">2</span>), <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pm2命令/方案</title>
      <link href="/2022/10/10/Node/pm2%E5%91%BD%E4%BB%A4-%E6%96%B9%E6%A1%88/"/>
      <url>/2022/10/10/Node/pm2%E5%91%BD%E4%BB%A4-%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pm2 start [file 脚本文件] [options]</span><br><span class="line">pm2 start app.js               <span class="comment"># 启动app.js应用程序</span></span><br><span class="line">pm2 start app.js -i 4          <span class="comment"># cluster mode 模式启动4个app.js的应用实例      # 4个应用程序会自动进行负载均衡</span></span><br><span class="line">pm2 start app.js --name=<span class="string">&quot;api&quot;</span>  <span class="comment"># 启动应用程序并命名为 &quot;api&quot;</span></span><br><span class="line">pm2 start app.js --watch       <span class="comment"># 实时监控app.js的方式启动，当app.js文件有变动时，pm2会自动reload</span></span><br><span class="line">pm2 start script.sh            <span class="comment"># 启动 bash 脚本</span></span><br></pre></td></tr></table></figure><p>可选参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--script   启动脚本路径</span><br><span class="line">--instances应用启动实例个数，仅在cluster模式有效，默认为fork；</span><br><span class="line">--exec_mode应用启动模式，支持fork和cluster模式；</span><br><span class="line">--name     指定 app 名字</span><br><span class="line">--watch    监听重启，启用情况下，文件夹或子文件夹下变化应用自动重启</span><br><span class="line">--ignore_watch  忽略监听的文件夹，支持正则表达式,配合 watch 使用</span><br><span class="line">--max-memory-restart  最大内存限制数，超出自动重启；=1024M</span><br><span class="line">--<span class="built_in">env</span>      环境变量，object类型，如&#123;<span class="string">&quot;NODE_ENV&quot;</span>:<span class="string">&quot;production&quot;</span>, <span class="string">&quot;ID&quot;</span>: <span class="string">&quot;42&quot;</span>&#125;；</span><br><span class="line">--<span class="built_in">log</span>      指定 <span class="built_in">log</span> 的位置, 若要指定新位置，需将原本的 process 刪掉，再重新启动即可</span><br><span class="line">--output   指定 output <span class="built_in">log</span> 位址</span><br><span class="line">--error    指定 error <span class="built_in">log</span> 位址</span><br><span class="line">--log-date-format     指定日志日期格式，如YYYY-MM-DD HH:mm:ss；</span><br><span class="line">--arg1 --arg2 --arg3  额外的参数</span><br><span class="line">--restart-delay   自动重启时，要 delay 多久</span><br><span class="line">--autorestart     默认为<span class="literal">true</span>, 发生异常的情况下自动重启</span><br><span class="line">--cron_restart    crontab时间格式重启应用，目前只支持cluster模式；</span><br><span class="line">--restart_delay   异常重启情况下，延时重启时间；</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pm2 start npm --watch --name nickname -- run sit</span><br><span class="line">// 启动 npm run sit</span><br><span class="line">eg: pm2 start npm --watch --name h5toolsit -- run sit</span><br><span class="line">其中 --watch监听代码变化，--name 重命令任务名称，-- run后面跟脚本名字</span><br></pre></td></tr></table></figure><ol><li>修改项目名称</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart [projectName] --name [newName]</span><br></pre></td></tr></table></figure><ol start="2"><li>清除日志</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 flush</span><br></pre></td></tr></table></figure><ol start="3"><li>查看日志<br><code>pm2 logs [name | id]</code></li></ol><h2 id="解决pm2日志过大引起的服务器问题"><a href="#解决pm2日志过大引起的服务器问题" class="headerlink" title="解决pm2日志过大引起的服务器问题"></a>解决pm2日志过大引起的服务器问题</h2><h3 id="安装插件pm2-logrotate"><a href="#安装插件pm2-logrotate" class="headerlink" title="安装插件pm2-logrotate"></a>安装插件pm2-logrotate</h3><p> <code>pm2 install pm2-logrotate</code></p><h3 id="pm2设置配置项"><a href="#pm2设置配置项" class="headerlink" title="pm2设置配置项"></a>pm2设置配置项</h3><p>例如：当日志文件数量超过50个时候，就自动删除旧文件<br><code>pm2 set  pm2-logrotate:retain 50</code></p><table><thead><tr><th>配置项</th><th>简介</th></tr></thead><tbody><tr><td>Compress</td><td>是否通过gzip压缩日志</td></tr><tr><td>max_size</td><td>单个日志文件的大小，比如上图中设置为1K（这个其实太小了，实际文件大小并不会严格分为1K）</td></tr><tr><td>retain</td><td>保留的日志文件个数，比如设置为10,那么在日志文件达到10个后会将最早的日志文件删除掉</td></tr><tr><td>dateFormat</td><td>日志文件名中的日期格式，默认是YYYY-MM-DD_HH-mm-ss，注意是设置的日志名+这个格式，如设置的日志名为abc.log，那就会生成abc_YYYY-MM-DD_HH-mm-ss.log名字的日志文件</td></tr><tr><td>rotateModule</td><td>把pm2本身的日志也进行分割workerInterval检查日志大小的间隔(最小值为1）单位为秒（控制模块检查log日志大小的循环时间，默认30s检查一次）</td></tr><tr><td>rotateInterval</td><td>设置强制分割，默认值是0 0 ** *，意思是每天晚上0点分割，这个足够了个人觉得</td></tr></tbody></table><p><code>pm2 conf pm2-logrotate</code>来查看详细的配置。</p><h3 id="设置pm2开机自启动"><a href="#设置pm2开机自启动" class="headerlink" title="设置pm2开机自启动"></a>设置pm2开机自启动</h3><p><code>pm2 startup</code>，这个命令会在系统 <code>/etc/systemd/system/</code> 路径下生成一个 pm2-root.service 文件用来开机启动 pm2 服务。<br><code>pm2 save</code>, 保存当前 pm2 运行的各个应用保存到 <code>/root/.pm2/dump.pm2</code> 下，开机重启时读取该文件中的内容启动相关应用。</p><h3 id="pm2导致的内存暴涨问题"><a href="#pm2导致的内存暴涨问题" class="headerlink" title="pm2导致的内存暴涨问题"></a>pm2导致的内存暴涨问题</h3><p>查看系统内存使用情况<br><code>ps aux --sort -rss | head -n 10</code><br>杀死PM2<br><code>pm2 kill</code></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装/更新nodejs</title>
      <link href="/2022/10/10/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85-%E6%9B%B4%E6%96%B0nodejs/"/>
      <url>/2022/10/10/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85-%E6%9B%B4%E6%96%B0nodejs/</url>
      
        <content type="html"><![CDATA[<p>下面操作服务器的身份默认是管理员root，如果权限不足，请加 sudo</p><h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><h2 id="使用EPEL安装"><a href="#使用EPEL安装" class="headerlink" title="使用EPEL安装"></a>使用EPEL安装</h2><p>EPEL（Extra Packages for Enterprise Linux）企业版Linux的额外软件包，是Fedora小组维护的一个软件仓库项目，为RHEL&#x2F;CentOS提供他们默认不提供的软件包。<br>先确认系统是否已经安装了epel-release包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum info epel-release</span><br></pre></td></tr></table></figure><p>如果有输出有关epel-release的已安装信息，则说明已经安装，如果提示没有安装或可安装，则安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>安装完后，就可以使用yum命令安装nodejs了，安装的一般会是6.x的版本，并且会将npm(3.x)作为依赖包一起安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install nodejs</span><br></pre></td></tr></table></figure><p>安装完成后，验证是否正确的安装，node -v，如果输出如下版本信息，说明成功安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v6.13.3</span><br></pre></td></tr></table></figure><p>问题来了，现在nodejs发的版本比较快，有些新的框架需要node的新版本，那如何升级。到现在，node的最新版本是10.4.1，那么，下面介绍如何升级nodejs</p><h2 id="升级nodesj"><a href="#升级nodesj" class="headerlink" title="升级nodesj"></a>升级nodesj</h2><h3 id="安装n"><a href="#安装n" class="headerlink" title="安装n"></a>安装n</h3><p>n是nodejs管理工具，是TJ写的，Github: <a href="https://github.com/tj/n">https://github.com/tj/n</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><h2 id="安装nodejs版本"><a href="#安装nodejs版本" class="headerlink" title="安装nodejs版本"></a>安装nodejs版本</h2><p>安装最新版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n latest</span><br></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 8.11.3  </span><br></pre></td></tr></table></figure><h2 id="切换nodejs版本"><a href="#切换nodejs版本" class="headerlink" title="切换nodejs版本"></a>切换nodejs版本</h2><p>$ n<br>选择已安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ο  node/8.11.3</span><br><span class="line">   node/10.4.1</span><br></pre></td></tr></table></figure><p>查看当前版本node -v，下面表示已切换成功</p><p>v8.13.3<br>但问题来了，切换后，查看版本还是原来的v6.13.3，看下面 使用n切换nodejs版本失效的解决办法</p><h2 id="切换失效的解决办法"><a href="#切换失效的解决办法" class="headerlink" title="切换失效的解决办法"></a>切换失效的解决办法</h2><h2 id="查看-node-当前安装路径"><a href="#查看-node-当前安装路径" class="headerlink" title="查看 node 当前安装路径"></a>查看 node 当前安装路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> node</span><br><span class="line">/usr/local/bin/node <span class="comment">#举个例子</span></span><br></pre></td></tr></table></figure><p> 而 n 默认安装路径是 &#x2F;usr&#x2F;local，若你的 node 不是在此路径下，n 切换版本就不能把bin、lib、include、share 复制该路径中，所以我们必须通过N_PREFIX变量来修改 n 的默认node安装路径</p><p>编辑环境配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>将下面两行代码插入到文件末尾</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> N_PREFIX=/usr/local <span class="comment">#node实际安装位置</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$N_PREFIX</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>:wq保存退出</p><h2 id="执行source使修改生效"><a href="#执行source使修改生效" class="headerlink" title="执行source使修改生效"></a>执行source使修改生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这时候再查看node -v发现版本切换成功了</p><h3 id="卸载-nodejs-非必要步骤，注意不要删了安装后的node-modules"><a href="#卸载-nodejs-非必要步骤，注意不要删了安装后的node-modules" class="headerlink" title="卸载 nodejs(非必要步骤，注意不要删了安装后的node_modules)"></a>卸载 nodejs(非必要步骤，注意不要删了安装后的node_modules)</h3><p>注意：这里卸载并非必要步骤。只是提供卸载的方案，请按需操作，不要安装后又删除又进行安装掉进死循环了。</p><h3 id="使用-yum-先删除一次"><a href="#使用-yum-先删除一次" class="headerlink" title="使用 yum 先删除一次"></a>使用 yum 先删除一次</h3><p>yum remove nodejs npm -y</p><h3 id="手动删除残留"><a href="#手动删除残留" class="headerlink" title="手动删除残留"></a>手动删除残留</h3><p>进入 &#x2F;usr&#x2F;local&#x2F;lib 删除所有 node 和 node_modules文件夹<br>进入 &#x2F;usr&#x2F;local&#x2F;include 删除所有 node 和 node_modules 文件夹<br>检查 ~ 文件夹里面的”local” “lib” “include” 文件夹，然后删除里面的所有 “node” 和 “node_modules” 文件夹<br>可以使用以下命令查找 $ find ~&#x2F; -name node $ find ~&#x2F; -name node_modules</p><h3 id="进入-x2F-usr-x2F-local-x2F-bin-删除-node-的可执行文件"><a href="#进入-x2F-usr-x2F-local-x2F-bin-删除-node-的可执行文件" class="headerlink" title="进入 &#x2F;usr&#x2F;local&#x2F;bin 删除 node 的可执行文件"></a>进入 &#x2F;usr&#x2F;local&#x2F;bin 删除 node 的可执行文件</h3><p>删除: &#x2F;usr&#x2F;local&#x2F;bin&#x2F;npm<br>删除: &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1&#x2F;node.1<br>删除: &#x2F;usr&#x2F;local&#x2F;lib&#x2F;dtrace&#x2F;node.d<br>删除: rm -rf &#x2F;home&#x2F;[homedir]&#x2F;.npm<br>删除: rm -rf &#x2F;home&#x2F;root&#x2F;.npm</p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker使用</title>
      <link href="/2022/09/15/Docker%E7%AF%87/docker%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/09/15/Docker%E7%AF%87/docker%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="基础命令使用"><a href="#基础命令使用" class="headerlink" title="基础命令使用"></a>基础命令使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">service docker start</span><br><span class="line"><span class="comment"># 关闭docker</span></span><br><span class="line">service docker stop</span><br><span class="line"><span class="comment"># 搜索可使用的docker</span></span><br><span class="line">docker search</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载容器</span></span><br><span class="line">docker pull &lt;CONTAINER&gt;</span><br><span class="line"></span><br><span class="line">容器列表</span><br><span class="line"><span class="comment"># docker container ls</span></span><br><span class="line">  -all: 全部</span><br><span class="line">  -aq: 全部处于安静模式 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -it &lt;IMAGES&gt; /bin/bash</span><br><span class="line">&gt; 1. -i 交互操作</span><br><span class="line">  2. -t 终端</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器名</span></span><br><span class="line">docker rename &lt;my_container&gt; &lt;my_new_container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出终端</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动已经停止的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker start &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker container stop &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker attach &lt;CONTAINER ID&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker container <span class="built_in">rm</span> &lt;CONTAINER&gt;</span><br><span class="line"></span><br><span class="line">删除镜像</span><br><span class="line">docker rmi &lt;IMAGES&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器log</span></span><br><span class="line"><span class="built_in">log</span>目录： </span><br><span class="line"><span class="built_in">cd</span> /var/lib/docker/containers/</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><h3 id="用-docker-image-ls-命令来配合"><a href="#用-docker-image-ls-命令来配合" class="headerlink" title="用 docker image ls 命令来配合"></a>用 docker image ls 命令来配合</h3><p>如果要删除本地的镜像，可以使用 docker image rm 命令，其格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><p>像其它可以承接多个实体的命令一样，可以使用 docker image ls -q 来配合使用 docker image rm，这样可以成批的删除希望删除的镜像。我们在“镜像列表”章节介绍过很多过滤镜像列表的方式都可以拿过来使用。<br>比如，我们需要删除所有仓库名为 redis 的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ docker image <span class="built_in">rm</span> $(docker image <span class="built_in">ls</span> -q redis)</span><br></pre></td></tr></table></figure><p>或者删除所有在 mongo:3.2 之前的镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ docker image <span class="built_in">rm</span> $(docker image <span class="built_in">ls</span> -q -f before=mongo:3.2)</span><br></pre></td></tr></table></figure><h2 id="镜像保存"><a href="#镜像保存" class="headerlink" title="镜像保存"></a>镜像保存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save -o [路径/保存文件名] [镜像名]</span><br><span class="line">如果目录不存在需要手动创建</span><br></pre></td></tr></table></figure><blockquote><p>保存时出现报错<code>Error response from daemon: file integrity checksum failed for &quot;tmp/build/nginx-rtmp-module/nginx-rtmp-module-1.2.1/test/nginx.conf&quot;</code><br>可能是镜像版本<code>latest</code>导致的，重新拉取下最新版本的镜像<code>docker pull [image]</code></p></blockquote><h2 id="镜像本地加载"><a href="#镜像本地加载" class="headerlink" title="镜像本地加载"></a>镜像本地加载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; [镜像文件]</span><br><span class="line">ctr image import [镜像压缩包.tar]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实用的window工具</title>
      <link href="/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%AE%9E%E7%94%A8%E7%9A%84window%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%AE%9E%E7%94%A8%E7%9A%84window%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="snipaste"><a href="#snipaste" class="headerlink" title="snipaste"></a>snipaste</h3><p>截屏粘贴软件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F1: 截屏</span><br><span class="line">F3: 粘贴</span><br></pre></td></tr></table></figure><h3 id="powerToys"><a href="#powerToys" class="headerlink" title="powerToys"></a>powerToys</h3><p>window工具集合（取色器,文件加载预览,图片大小调整器,键盘管理器,批量文件命名）</p><blockquote><p>官方文档：用于自定义 Windows 的实用工具<a href="https://docs.microsoft.com/zh-cn/windows/powertoys/">https://docs.microsoft.com/zh-cn/windows/powertoys/</a></p></blockquote><p> 快捷键： <code>win + shift + c</code> 提取颜色吸管</p><h3 id="deskpin"><a href="#deskpin" class="headerlink" title="deskpin"></a>deskpin</h3><p>将指定窗口置顶的工具<br><a href="http://www.ws865.com/wp-content/uploads/2022/01/04ed231da3ffb37.zip" title="DeskPins-1.32-setup">DeskPins-1.32-setup</a><br>快捷键：<code>ctrl + f12</code> 切换窗口是否置顶</p><h3 id="V2rayN"><a href="#V2rayN" class="headerlink" title="V2rayN"></a>V2rayN</h3><p>好用代理软件，需要自己去找VM服务器<br> 下载地址: <a href="http://www.ws865.com/wp-content/uploads/2022/01/3750609bc062333.zip" title="v2rayN-Core">v2rayN-Core</a></p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h3><p>内网穿透，将本地端口暴露至公网<br>下载链接：<a href="http://www.ws865.com/wp-content/uploads/2022/01/2860e04de9bc7b5.zip" title="ngrok内网穿透">ngrok内网穿透</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置window策略组</title>
      <link href="/2022/07/30/Linux%E7%AF%87/%E9%85%8D%E7%BD%AEwindow%E7%AD%96%E7%95%A5%E7%BB%84/"/>
      <url>/2022/07/30/Linux%E7%AF%87/%E9%85%8D%E7%BD%AEwindow%E7%AD%96%E7%95%A5%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>刚刚安装好的node环境，全局安装包时<br>  例： <code>express-generator</code>，安装后在全局环境中是无法直接使用的，需要配置powershell管理策略<br>    <a href="https://docs.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2" title="powershell管理策略">powershell管理策略</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ExecutionPolicy // restricted</span><br></pre></td></tr></table></figure><p> <strong>更改执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned // 选择A</span><br></pre></td></tr></table></figure><p><strong>设置特定作用域的执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p> 更改执行策略的命令可以成功，但仍不能更改有效执行策略。<br> 例如，为本地计算机设置执行策略的命令可以成功，但被当前用户的执行策略重写。  </p><p><strong>删除执行策略</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy Undefined -Scope CurrentUser</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数之柯里化</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E4%B9%8B%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>在计算机中，柯里化是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * a + b * b;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="title function_">foo</span>(<span class="number">3</span>))(<span class="number">4</span>) 或 <span class="title function_">foo</span>(<span class="number">3</span>)(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="柯里化的通用式"><a href="#柯里化的通用式" class="headerlink" title="柯里化的通用式"></a>柯里化的通用式</h3><ol><li>使用ES5的实现</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 的实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func, args</span>) &#123;</span><br><span class="line">    <span class="comment">// 形参个数</span></span><br><span class="line">    <span class="keyword">var</span> arity = func.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 上一次传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> args = args || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 将参数转化为数组</span></span><br><span class="line">        <span class="keyword">var</span> _args = [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将上次的参数与当前参数进行组合并修正传参顺序</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">unshift</span>.<span class="title function_">apply</span>(_args, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果参数不够，返回闭包函数继续收集参数</span></span><br><span class="line">        <span class="keyword">if</span>(_args.<span class="property">length</span> &lt; arity) &#123;</span><br><span class="line">            <span class="keyword">return</span> currying.<span class="title function_">call</span>(<span class="literal">null</span>, func, _args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数够了则直接执行被转化的函数</span></span><br><span class="line">        <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="literal">null</span>, _args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用ES6简化写法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func, ...args</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// func.length 是获取一个函数对象的形参的个数，实参的个数用arguments.length</span></span><br><span class="line"> <span class="comment">// 如果形参指定的默认值，则只获取指定默认值前面形参的个数</span></span><br><span class="line">  <span class="keyword">var</span> argLen = func.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> args = args || []</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">..._args</span>) &#123;</span><br><span class="line">    _args.<span class="title function_">unshift</span>(...args)</span><br><span class="line">    <span class="keyword">if</span> (_args.<span class="property">length</span> &lt; argLen) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 传入的参数数量小于回调函数的形参数量，返回接受剩余参数的函数</span></span><br><span class="line">      <span class="keyword">return</span> currying.<span class="title function_">call</span>(<span class="literal">null</span>, func, ..._args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">func</span>(..._args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行一下测试用例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如我现在有一个callback的方法，需要指定三个参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果只需要两个参数,可以给第三个参数一个默认值，因为第三个参数有默认值，func.length值为2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">a, b, c = <span class="number">0</span></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> a + b + c <span class="comment">// 相当于 return a + b + 0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> r = <span class="title function_">currying</span>(callback)</span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回接受剩余参数的新的函数</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>) <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">r</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">// r(...)(...)(...) is not a function 参数超过callback的参数报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue之vuex模块化管理</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8Bvuex%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8Bvuex%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="vue3-0的使用"><a href="#vue3-0的使用" class="headerlink" title="vue3.0的使用"></a>vue3.0的使用</h2><h2 id="安装vuex-新建store文件夹"><a href="#安装vuex-新建store文件夹" class="headerlink" title="安装vuex-新建store文件夹"></a>安装vuex-新建store文件夹</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex@next --save</span><br></pre></td></tr></table></figure><p>并在根目录<code>src</code>下创建store文件夹，并创建文件模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">└─src</span><br><span class="line">    ├─assets</span><br><span class="line">    ├─components</span><br><span class="line">    ├─store</span><br><span class="line">    │  └─modules</span><br><span class="line">    │  └─└─moduleA.js</span><br><span class="line">    │  └─└─moduleB.js</span><br><span class="line">    │  └─index.js</span><br><span class="line">    │  └─getters.js</span><br><span class="line">    └─util</span><br></pre></td></tr></table></figure><h3 id="在store文件夹中配置根store"><a href="#在store文件夹中配置根store" class="headerlink" title="在store文件夹中配置根store"></a>在store文件夹中配置根store</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> <span class="string">&#x27;./modules/moduleA&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moduleB <span class="keyword">from</span> <span class="string">&#x27;./modules/moduleB&#x27;</span></span><br><span class="line"><span class="keyword">import</span> getters <span class="keyword">from</span> <span class="string">&#x27;./getters&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB</span><br><span class="line">  &#125;,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">// getters.js</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="attr">token</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>.<span class="property">token</span>,</span><br><span class="line">  <span class="attr">hasPermission</span>: <span class="function"><span class="params">state</span> =&gt;</span> <span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">user</span>.<span class="property">permissions</span> &amp;&amp; state.<span class="property">user</span>.<span class="property">permissions</span>.<span class="title function_">indexOf</span>(key) &gt; -<span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> getters</span><br><span class="line"></span><br><span class="line"><span class="comment">// moduleA.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">hasLogin</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutation</span>: &#123;</span><br><span class="line">    <span class="title function_">changeLoginStatus</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">hasLogin</span> = !state.<span class="property">hasLogin</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA</span><br></pre></td></tr></table></figure><h4 id="使用store"><a href="#使用store" class="headerlink" title="使用store"></a>使用store</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Store</span> <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Store</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="在文件中使用store"><a href="#在文件中使用store" class="headerlink" title="在文件中使用store"></a>在文件中使用store</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeLoginStatus&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">_mutations</span>) <span class="comment">//打印所有的mutations&lt;/code&gt;&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><blockquote><p>默认情况下，模块内部的 action 和 mutation 仍然是注册在全局名空间的——这样使得多个模块能够对同一个 action 或 mutation 作出响应。Getter 同样也默认注册在全局命名空间，但是目前这并非出于功能上的目的（仅仅是维持现状来避免非兼容性变更）。</p></blockquote><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>必须注意，不要在不同的无命名空间的模块中定义两个相同的 getter 从而导致错误。<br>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 <code>namespaced: true</code> 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 <code>getter、action</code> 及mutation 都会自动根据模块注册的路径调整命名</p></div><p>例如：</p></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: &#123;...&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时在文件使用此模块需要带上模块名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;moduleA/hasLogin&#x27;</span>,preload)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之try...catch...使用</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8Btry-catch-%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8Btry-catch-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简单的try-catch使用"><a href="#简单的try-catch使用" class="headerlink" title="简单的try-catch使用"></a>简单的try-catch使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;normal&#x27;</span>,error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure><p>控制台不会报错，catch到的信息会被显示出来，不影响后面的代码运行</p><h2 id="异步中的try-catch的使用"><a href="#异步中的try-catch的使用" class="headerlink" title="异步中的try-catch的使用"></a>异步中的try-catch的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">asyncFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asyncError: &#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">asyncFun</span>() <span class="comment">// Uncaught ReferenceError: c is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>控制台会报错，setTimeout,setInterval等宏观任务会在主任务队列之后运行，当代码运行到settimeout的时候，会将宏观任务丢到新的任务栈。因此try捕获不到错误</p></p></blockquote><h2 id="try-catch配合Promise的使用"><a href="#try-catch配合Promise的使用" class="headerlink" title="try-catch配合Promise的使用"></a>try-catch配合Promise的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">promiseFun</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="string">&#x27;错误信息&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">100</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">await</span> <span class="title function_">promiseFun</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rows&#x27;</span>, rows)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promiseError&#x27;</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// promiseError 错误信息&lt;/code&gt;&lt;/pre&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>try-catch会捕获到<code>reject</code>的错误信息，可已将异步操作放在<code>promise</code>中进行，实现try捕获异步的操作</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue之解析Excel表格</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E8%A7%A3%E6%9E%90Excel%E8%A1%A8%E6%A0%BC/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E8%A7%A3%E6%9E%90Excel%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<ol><li><p>安装xlsx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i xlsx</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">accept</span>=<span class="string">&quot;.xlsx,.xls&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">change</span>=<span class="string">&quot;readWorkbook($event)&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> <span class="variable constant_">XLSX</span>  <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span>;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">files</span>: [],</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">readWorkbook</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">files</span> = e.<span class="property">target</span>.<span class="property">files</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = <span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="keyword">await</span> file.<span class="title function_">arrayBuffer</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;buffer: &#x27;</span>, buffer);</span><br><span class="line">    <span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(buffer, &#123;<span class="attr">type</span>:<span class="string">&#x27;array&#x27;</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;workbook: &#x27;</span>, workbook);</span><br><span class="line">    <span class="keyword">const</span> wsname = workbook.<span class="property">SheetNames</span>[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">// const ws = XLSX.utils.sheet_to_json(workbook.Sheets[wsname], &#123;header: 1&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;header: 1&#125;会转换成数组,但是会保留空白行 defval: &#x27;&#x27; 设置默认值占位</span></span><br><span class="line">    <span class="comment">// 可使用[&#x27;word&#x27;,&#x27;word&#x27;]自定义字段名称</span></span><br><span class="line">    <span class="keyword">const</span> ws = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(workbook.<span class="property">Sheets</span>[wsname], &#123;<span class="attr">header</span>: [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;department&#x27;</span>]&#125;) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ws: &#x27;</span>, ws);</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript之手写Promise</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8B%E6%89%8B%E5%86%99Promise/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/javascript%E4%B9%8B%E6%89%8B%E5%86%99Promise/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面试的时候遇到的问题，手写一个实现<code>Promise</code>的功能</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">&#x27;PENDING&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;FULFILLED&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PromiseTest</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PENDING</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span> = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span> = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = reason</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>())</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">forEach</span>(<span class="title function_">fn</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">err</span> =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">  <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onResolvedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">  <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">finally</span>(<span class="params"> onFinally </span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFinallyCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;<span class="title function_">onFinally</span>()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PromiseTest</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">123</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r = <span class="title function_">a</span>()</span><br><span class="line">r.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result: &#x27;</span>, result);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result2&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err: &#x27;</span>, err);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成promise&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//object</span></span><br><span class="line"><span class="comment">// 1s后</span></span><br><span class="line"><span class="comment">//result:  123</span></span><br><span class="line"><span class="comment">//result2</span></span><br><span class="line"><span class="comment">//完成promise</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue之强制刷新组件</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E4%B9%8B%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote>有时候,依赖Vue响应式方式更新数据是不够的,相反,我们需要手动重新渲染组件来更新数据。或者,我们可能只想抛开当前DOM,重新开始。问题来了,怎么让Vue以正确的方式呈现组件呢?</blockquote>1.有以下解决方法:<pre><code>简单粗暴的方式:重新加载整个页面不妥的方式:使用 v-if较好的方式:使用 Vue的内置 forceUpdate方法</code></pre>2.对比以上方法:<pre><code>简单粗暴的方式(重新加载整个页面):这相当于每次你想关闭应用程序时都要重新启动你的电脑。不妥的方式(使用v-if):v-if指令,该指令尽在组件上为 true时才渲染。如果为false,则该组件在DOM中不存在。较好的方法(forceUpdate):这是解决这个问题的两种最佳方法之一。</code></pre>3.然而上面的三种方法都不是最佳的方法,最好的方法是:在组件上进行 key更改。<pre><code>在很多情况下,我们需要重新渲染组件。要正确地做到这一点,我们将提供一个 key 属性,以便Vue知道特定的组件与特定的数据片段相关联。如果 key 保持不变,则不会更改组件,但是如果 key 发生更改,Vue就hi知道应该删除旧组件并创建新组件。</code></pre>4.为什么我们需要在 Vue 中使用 key?<pre><code>假设我们要渲染具有以下一项或多项内容的组件列表:有本地的状态有某种初始化过程,通常在 create或mounted钩子中如果你对该列表进行排序或任何其他方式对其进行更新,则需要重新渲染列表的某些部分。但是,不会希望重新渲染列表的所有内容,而只是重新渲染已更改的内容。为了帮助Vue跟踪已更改和未更改的内容,我们提供一个 key 属性。在这里使用数组的索引,因为索引没有绑定列表中的特定的对象。</code></pre>5.更新 key 以强制重新渲染组件<pre><code>这是强制 Vue重新渲染组件的最佳方式我们可以采用这种将 key分配给子组件的策略,但每次想重新渲染组件时,只需更新该 key 即可。</code></pre>如下案例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">exprot <span class="keyword">default</span>&#123;</span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="keyword">return</span>&#123;</span><br><span class="line">    <span class="attr">numberkey</span>:<span class="number">0</span>,</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">   <span class="title function_">chenRender</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">numberkey</span> +=<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>每次 chenRender被调用时,我们的 numberkey都会发生改变。当这种情况发生时,Vue将知道它必须销毁组件并创建]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue周期函数运行顺序</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/vue%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>最近有看到一个问题说：vue中computed、watch、updated谁先执行？因为之前没有注意过执行顺序，今天特地研究了一下。希望研究结果能给各位小伙伴做个参考！话不多说，先上代码：<br>1、template中的html结构如下，这是一个子组件，父组件用props传过来一个secondNum值，子组件自己有一个firstNum值，有一个按钮，用来改变firstNum值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>父组件传值secondNum：&#123;&#123; secondNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>自己的值firstNum：&#123;&#123; firstNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>computed之thirdNum:&#123;&#123; thirdNum &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>改变firstNum<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;secondNum&#x27;</span>], <span class="comment">//父组件传过来的值，默认为0</span></span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstNum</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    thirdNum () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;computed&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstNum</span> + <span class="variable language_">this</span>.<span class="property">secondNum</span> + <span class="string">&#x27;元&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    firstNum (val) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    btnClick () &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">firstNum</span> = <span class="string">&#x27;firstNum&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">999</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;methods&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首次加载效果如下：</p><p>3、在生命周期内修改data中的数据，比如，在mounted里更改firstNum的值时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstNum</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>, <span class="variable language_">this</span>.<span class="property">firstNum</span>, <span class="variable language_">this</span>.<span class="property">secondNum</span>)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>4、点击button按钮，改变firstNum时：</p><p>由此得出以下结论：<br>（1）在created时，已经可以使用用data和prop中的数据了<br>（2）页面首次加载时，computed会执行一次，并且是在beforeMount之后，mounted之前<br>（3）在页面数据发生变化时</p><p>如果不是由点击事件造成的数据变化，执行顺序为：<code>watch——beforeUpdate——computed——updated</code><br>如果是由点击事件造成的数据变化，执行顺序为：<code>methods——watch——beforeUpdate——computed——updated</code></p><p>5、computed、watch、methods的区别？</p><p>computed和watch，只有依赖和监听的值发生了变化，才会调用相关属性和函数，而methods中，不管数据有没有变化，只要触发事件，就会调用函数<br>computed和watch，computed具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数;watch无缓存性，页面重新渲染时值不变化也会执行</p><p>6、 怎么合理的监听v-model的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">newText</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">text</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">newText</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">text</span> = n &gt; <span class="number">0</span> ? <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以有效地处理text的值。但又不会出现无限递归</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript字符串转数字的5种方法及其陷阱</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E9%99%B7%E9%98%B1/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B0%E5%AD%97%E7%9A%845%E7%A7%8D%E6%96%B9%E6%B3%95%E5%8F%8A%E5%85%B6%E9%99%B7%E9%98%B1/</url>
      
        <content type="html"><![CDATA[<p>摘要 ：JavaScript 是一个神奇的语言，字符串转数字有 5 种方法，各有各的坑法!</p><p>原文: Converting Strings to Number in Javascript: Pitfalls<br>译者: Fundebug<br>本文采用意译，版权归原作者所有</p><p>String 转换为 Number 有很多种方式，我可以想到的有 5 种！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(num); <span class="comment">// 默认方式 (没有基数)</span></span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>); <span class="comment">// 传入基数 (十位数)</span></span><br><span class="line"><span class="built_in">parseFloat</span>(num); <span class="comment">// 浮点数</span></span><br><span class="line"><span class="title class_">Number</span>(num); <span class="comment">// Number 构造器</span></span><br><span class="line">~~num; <span class="comment">//按位非</span></span><br><span class="line">num / <span class="number">1</span>; <span class="comment">// 除一个数</span></span><br><span class="line">num * <span class="number">1</span>; <span class="comment">// 乘一个数</span></span><br><span class="line">num -</span><br><span class="line"><span class="number">0</span> + <span class="comment">// 减去0</span></span><br><span class="line">    num; <span class="comment">// 一元运算符 &quot;+&quot;</span></span><br></pre></td></tr></table></figure><p>选择哪一种呢？什么时候选择它？为什么选择这种它？我们逐一进行分析，并解析每种方式的常见陷阱。</p><ol><li><strong>parseInt</strong><br>根据 JsPerf.com 的基准测试，大多数浏览器对 parseInt 的响应最佳。虽然它是最快的方式，但使用 preseInt 会碰到一些常见陷阱：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;08&quot;</span>); <span class="comment">// returns 0 部分老浏览器.</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;44.jpg&quot;</span>); <span class="comment">// returns 44</span></span><br><span class="line"><span class="attr">parseInt</span>: 没有传入基数时，默认是传入的基数为 <span class="number">10</span> <span class="built_in">parseInt</span>(num, <span class="number">10</span>)，如果你不知道 num 属性的类型，不要使用 <span class="built_in">parseInt</span> 进行字符串转数字。</span><br></pre></td></tr></table></figure></li><li><strong>parseFloat</strong><br>如果你不解析 16 进制数，这是一个非常好的选择。例如：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(-<span class="number">0xff</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;-0xFF&quot;</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseFloat</span>(-<span class="number">0xff</span>); <span class="comment">// returns -255</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;-0xFF&quot;</span>); <span class="comment">// returns 0</span></span><br></pre></td></tr></table></figure>注意：字符串中的负十六进制数字是一个特殊情况，如果你用 parseFloat 解析，结果是不正确的。为了避免程序出现 NaN 的情况，应该检查转化后的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&quot;44.jpg&quot;</span>); <span class="comment">// return 44</span></span><br><span class="line"><span class="attr">parseFloat</span>: 转换十六进制数时要小心，如果你不知道要转换对象的类型，不要使用 <span class="built_in">parseFloat</span>。</span><br></pre></td></tr></table></figure></li><li><strong>按位非</strong><br>可以把字符串转换成整数，但他不是浮点数。如果是一个字符串转换，它将返回 0；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~~<span class="number">1.23</span>; <span class="comment">// returns 1</span></span><br><span class="line">~~<span class="string">&quot;1.23&quot;</span>; <span class="comment">// returns 1</span></span><br><span class="line">~~<span class="string">&quot;23&quot;</span>; <span class="comment">// returns 23</span></span><br><span class="line">~~<span class="string">&quot;Hello world&quot;</span>; <span class="comment">// returns 0</span></span><br></pre></td></tr></table></figure>这是什么原理？通过翻转&gt;)每个位，也称为数字的 A1 补码。你可以使用它，但注意只能用来存储整数。所以通常情况不要用它，除非你能确定这个数是在 32 位整数之间的值（因为调用的 ToInt32 的规范）。</li></ol><p>按位非：用它确保输入中没有字符，仅用于整数。</p><ol start="4"><li><strong>Number</strong><br>Number 与以上提及的转换方式一样存在这样的问题，解析时试图找出你给他的数字：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&quot;023&quot;</span>); <span class="comment">// returns 23</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="number">023</span>); <span class="comment">// returns 19</span></span><br></pre></td></tr></table></figure>注意：023 实际上是一个八进制数，无论你怎么做，都是返回 19；对于没有单引号或双引号的十六进制数一样。</li></ol><p>Number 也是 JsPerf 中最慢的之一。</p><p>Number：几乎不用它。</p><ol start="5"><li><strong>一元运算符</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;1.23&quot;</span> * <span class="number">1</span>; <span class="comment">// returns 1.23</span></span><br><span class="line"><span class="string">&quot;0xFF&quot;</span> - <span class="number">0</span>; <span class="comment">// returns 255</span></span><br><span class="line"><span class="string">&quot;0xFF.jpg&quot;</span> / <span class="number">1</span> + <span class="comment">// returns NaN</span></span><br><span class="line">    <span class="string">&quot;023&quot;</span>; <span class="comment">// returns 23</span></span><br></pre></td></tr></table></figure>一元运算符与其它的解析方式不同，如果是一个 NaN 值，那么返回的也是 NaN 。这是我最喜欢的数值转换方式，因为我认为任何带有字符的对象都不应该被视为 0 或者根据他有多少位来“猜”。我基本使用 + 操作符，因为这个方式不容易混淆。虽然 -0 的用法也很好，但它并没有很好的表达转换为数字的本意。</li></ol><p>字符串转换为数字的方式总结<br>负十六进制数字符串转换为数字时。应首先将任何其转换为 String（例如通过 + “” ），然后使用一元运算符或带基数的 parseInt 解析为数字。但是结果不是 NaN 的数值时，使用 parseFloat 更为合适。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux配置gitee的ssh</title>
      <link href="/2022/07/30/Linux%E7%AF%87/Linux%E9%85%8D%E7%BD%AEgitee%E7%9A%84ssh/"/>
      <url>/2022/07/30/Linux%E7%AF%87/Linux%E9%85%8D%E7%BD%AEgitee%E7%9A%84ssh/</url>
      
        <content type="html"><![CDATA[<p>Gitee 提供了基于SSH协议的Git服务，在使用SSH协议访问仓库之前，需要先配置好账户&#x2F;仓库的SSH公钥。</p><p>你可以按如下命令来生成 sshkey:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;xxxxx@xxxxx.com&quot;</span>  </span><br><span class="line"><span class="comment"># Generating public/private ed25519 key pair...</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的 <a href="mailto:&#120;&#x78;&#x78;&#120;&#x78;&#x40;&#120;&#x78;&#x78;&#120;&#x78;&#x2e;&#x63;&#111;&#x6d;">&#120;&#x78;&#x78;&#120;&#x78;&#x40;&#120;&#x78;&#x78;&#120;&#x78;&#x2e;&#x63;&#111;&#x6d;</a> 只是生成的 sshkey 的名称，并不约束或要求具体命名为某个邮箱。<br>现网的大部分教程均讲解的使用邮箱生成，其一开始的初衷仅仅是为了便于辨识所以使用了邮箱。</p></blockquote><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~&#x2F;.ssh&#x2F;id_ed25519.pub 文件内容，获取到你的 public key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_ed25519.pub</span><br><span class="line"><span class="comment"># ssh-ed25519 AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</span></span><br></pre></td></tr></table></figure><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/676dd7f4d9cb1b9.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/676dd7f4d9cb1b9-1024x614.png" alt="ssh生成"></a></p><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/10ea593baf29e6c.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/10ea593baf29e6c-1024x392.png" alt="公钥"></a></p><p>复制生成后的 ssh key，通过仓库主页 <strong>「管理」-&gt;「部署公钥管理」-&gt;「添加部署公钥」</strong> ，添加生成的 public key 添加到仓库中。</p><p>添加部署公钥</p><p>添加后，在终端（Terminal）中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>首次使用需要确认并添加主机到本机SSH可信列表。若返回<code>Hi XXX! You&#39;ve successfully authenticated, but Gitee.com does not provide shell access.</code>内容，则证明添加成功。<br>如果连接超时，检查是不是修改了ssh的端口号。如果修改了ssh的端口号，ssh会默认使用修改后的端口访问<br><a href="http://www.ws865.com/wp-content/uploads/2022/03/44ebe5c05cb1aed.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/44ebe5c05cb1aed.png" alt="连接超时"></a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@gitee.com</span><br><span class="line"><span class="comment"># connecting timed out</span></span><br></pre></td></tr></table></figure><p>在<code>~/.ssh/</code>目录中添加config文件,在里面配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hostname gitee.com </span><br><span class="line">Port [你的端口]`</span><br></pre></td></tr></table></figure><p>或者在<code>/etc/ssh/ssh_config</code>中将 <code>Port 22</code>打开，这是访问外部时的端口号<br><code>/etc/ssh/sshd_config</code>中的<code>Port 224</code>这是访问机器的端口号<br>然后重启ssh服务<code>service restart ssh</code></p><p>添加成功后，就可以使用SSH协议对仓库进行操作了。</p><p><strong>切记，如果在此之前就添加了http的地址，请先删除远程地址，改用ssh地址</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决canvas无法toDataURL</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E8%A7%A3%E5%86%B3canvas%E6%97%A0%E6%B3%95toDataURL/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/%E8%A7%A3%E5%86%B3canvas%E6%97%A0%E6%B3%95toDataURL/</url>
      
        <content type="html"><![CDATA[<p>由于跨域， 画布被污染，不能调用 <code>toBlob()</code>, <code>toDataURL()</code> 或<code>getImageData()</code> 方法，调用它们会抛出安全错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOMException: Failed to execute &#x27;toDataURL&#x27; on &#x27;HTMLCanvasElement&#x27;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure><p>首先给img元素添加<code>crossOrigin</code>属性，图片本身的<code>crossOrigin</code>值为<code>default</code></p><p> crossOrigin&#x2F;CORS    | 同域    | 跨域无 CORS    | 跨域有 CORS<br> default    | 支持    | 支持渲染，不支持 toDataURL    | 支持渲染，不支持 toDataURL<br> anonymous    | N&#x2F;A    | 同上    | 支持渲染，支持 toDataURL<br> use-credentials | N&#x2F;A    | 同上    | 支持渲染，不支持 toDataURL</p><p>此时可以解决<code>canvas</code>无法使用<code>toDataURL</code>的问题，但是设置了<code>crossorigin</code>属性，图片就无法加载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to image at &#x27;http://xxx.jpg&#x27; from origin &#x27;http://localhost:3001&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is   present on the    requested resource.</span><br></pre></td></tr></table></figure><p>解决办法，给图片URL链接加一个参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createImg</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">let</span> imgDom = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    imgDom.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    imgDom.<span class="title function_">setAttribute</span>(<span class="string">&quot;crossOrigin&quot;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">    imgDom.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(imgDom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>html2canvas</code>有一些问题，开启<code>allowTaind</code>会导致跨域的问题，需要配置nginx,不如使用<code>dom-to-image</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">img.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> f = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;domf&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    domtoimage.<span class="title function_">toPng</span>(f,options)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;result: &#x27;</span>, result) <span class="comment">// 返回base64</span></span><br><span class="line">        <span class="title function_">resolve</span>(result)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err: &#x27;</span>, err)</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>dom-to-image</code>时需要注意给图片属性加上<code>&quot;crossOrigin&quot;:&#39;Anonymous&#39;</code>,可解决无法跨域渲染的问题，同时需要给图片链接拼接上<code>new Date().getTime()</code>解决图片加载跨域的问题</p><blockquote><p>对于<code>dom-to-image</code>不支持js创建的<code>DOM</code>，一定要渲染后的dom，否则返回的是<code>null</code><br><del>同时也不支持图片叠加，只显示最外层图片</del></p></blockquote><p><code>domtoimage</code><strong>相当于截图，一定要先等dom渲染完成之后再去使用，其中图片一定要先加载完成，因此给img添加display或者visibility都将转换失败</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  newDiv.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 320px;height: 320px;position:relative&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> newImg = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  newImg.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 100%;object-fit: fill;position: absolute;left: 0;top: 0;&#x27;</span></span><br><span class="line">  newImg.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="property">url1</span> + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>())</span><br><span class="line">  newImg.<span class="title function_">setAttribute</span>(<span class="string">&#x27;crossorigin&#x27;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> newImg2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">  newImg2.<span class="property">style</span>.<span class="property">cssText</span> = <span class="string">&#x27;width: 100%;object-fit: fill;position: absolute;left: 0;top: 0;&#x27;</span></span><br><span class="line">  newImg2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="property">url2</span>  + <span class="string">&#x27;?&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>())</span><br><span class="line">  newImg2.<span class="title function_">setAttribute</span>(<span class="string">&#x27;crossorigin&#x27;</span>,<span class="string">&#x27;Anonymous&#x27;</span>)</span><br><span class="line">  newDiv.<span class="title function_">append</span>(newImg)</span><br><span class="line">  newDiv.<span class="title function_">append</span>(newImg2)</span><br><span class="line"><span class="comment">// 等待两张图片加载完成</span></span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loaded</span>(newImg)</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loaded</span>(newImg2)</span><br><span class="line"><span class="comment">// 渲染Dom</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>.<span class="title function_">append</span>(newDiv)</span><br><span class="line"><span class="comment">// 最后去转换成图片</span></span><br><span class="line">  domtoimage.<span class="title function_">toPng</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newImg = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    newImg.<span class="property">src</span> = result</span><br><span class="line">    newImg.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">domf</span>.<span class="title function_">append</span>(newImg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载图片</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loaded</span>(<span class="params">dom</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">      dom.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="literal">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信分享图文链接</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%BE%AE%E4%BF%A1%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%9B%BE%E6%96%87%E9%93%BE%E6%8E%A5/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E5%BE%AE%E4%BF%A1%E7%AF%87/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E5%9B%BE%E6%96%87%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<ol><li>新建H5页面，给H5页面授权<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html">网页授权文档</a></li></ol><p><a href="http://www.ws865.com/wp-content/uploads/2022/03/afc228ce914bfb8.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/afc228ce914bfb8.png"></a><br>2. 使用微信JS-SDK配置给H5页面注入权限<br><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign">#### 微信 JS 接口签名校验工具</a>用来测试签名是否正确</p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html">JS-SDK使用文档</a><br>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">debug</span>: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  <span class="attr">appId</span>: <span class="string">&#x27;wx5*****4cac9e&#x27;</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  <span class="attr">timestamp</span>: <span class="number">1648093192</span>, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  <span class="attr">nonceStr</span>: <span class="string">&#x27;1648093192&#x27;</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  <span class="attr">signature</span>: <span class="string">&#x27;04bb225123************167d41bd291&#x27;</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  <span class="attr">jsApiList</span>: [</span><br><span class="line">    <span class="string">&#x27;onMenuShareAppMessage&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;onMenuShareTimeline&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;updateAppMessageShareData&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;updateTimelineShareData&#x27;</span> ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可用户授权获取openID</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentUrl = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"> <span class="keyword">const</span> isCallback = <span class="regexp">/^code=/</span>.<span class="title function_">test</span>(currentUrl.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line"> <span class="keyword">if</span> (!isCallback) &#123;</span><br><span class="line"> <span class="keyword">const</span> redirect_uri = <span class="string">&#x27;http://demo.ws865.com/&#x27;</span></span><br><span class="line"> location.<span class="property">href</span>=<span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx537a6791a14cac9e&amp;redirect_uri=<span class="subst">$&#123;redirect_uri&#125;</span>&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect`</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> code = currentUrl.<span class="title function_">match</span>(<span class="regexp">/code=.*&amp;state/g</span>)[<span class="number">0</span>].<span class="title function_">replace</span>(<span class="string">&#x27;code=&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&amp;state&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;========&#x27;</span>,code)</span><br></pre></td></tr></table></figure><p>可使用微信开发者工具开发H5页面, 配置成功后可添加自定义分享代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">      wx.<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;   <span class="comment">//需在用户可能点击分享按钮前就先调用</span></span><br><span class="line">    wx.<span class="title function_">updateAppMessageShareData</span>(&#123; </span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;这是一个PDF&#x27;</span>, <span class="comment">// 分享标题</span></span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;3.2M&#x27;</span>, <span class="comment">// 分享描述</span></span><br><span class="line">      <span class="attr">link</span>: <span class="string">&#x27;http://demo.******.com/&#x27;</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-8dc116bd-312c-4e61-82b1-4774a3d57966/d89a47b2-3dfb-44dd-928c-052761d9c127.jpg&#x27;</span>, <span class="comment">// 分享图标</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 设置成功</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.<span class="title function_">updateTimelineShareData</span>(&#123; </span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;这是一个PDF&#x27;</span>, <span class="comment">// 分享标题</span></span><br><span class="line">      <span class="attr">desc</span>: <span class="string">&#x27;3.2M&#x27;</span>, <span class="comment">// 分享描述</span></span><br><span class="line">      <span class="attr">link</span>: <span class="string">&#x27;http://demo.*****.com/&#x27;</span>, <span class="comment">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class="line">      <span class="attr">imgUrl</span>: <span class="string">&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-8dc116bd-312c-4e61-82b1-4774a3d57966/d89a47b2-3dfb-44dd-928c-052761d9c127.jpg&#x27;</span>, <span class="comment">// 分享图标</span></span><br><span class="line">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 设置成功</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">  wx.<span class="title function_">error</span>(<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line"><span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>, res)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li><p>将H5页面放置服务器，并在公众号配置服务器的白名单，并配置公众号JS安全域名<br><a href="http://www.ws865.com/wp-content/uploads/2022/03/ad57484016654da.png"><img src="http://www.ws865.com/wp-content/uploads/2022/03/ad57484016654da-1024x315.png"></a></p></li><li><p>实现分享<br>在微信端输入H5链接，然后收藏，再在收藏里面分享链接，即可</p></li></ol><h4 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h4><ol><li><code># wx.config &#123;&quot;errMsg&quot;: &quot;config:invalid signature&quot;&#125; ?</code><br>使用js签名校验工具检测签名是否有问题，如果签名一致，则去检查公众号配置的ip白名单是否添加<br>页面授权域名，和jsAPI域名是否和wx.config配置的一致<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#%E9%99%84%E5%BD%951-JS-SDK%E4%BD%BF%E7%94%A8%E6%9D%83%E9%99%90%E7%AD%BE%E5%90%8D%E7%AE%97%E6%B3%95">参考文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> 微信篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>纯前端下载Excel文件</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/%E7%BA%AF%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BDExcel%E6%96%87%E4%BB%B6/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/%E7%BA%AF%E5%89%8D%E7%AB%AF%E4%B8%8B%E8%BD%BDExcel%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>项目需求，下载一个Excel文件，我把文件放在了代码里，加个按钮点击就可下载，因为就一个很小的文件，没必要让后端做，目前最简单的方法就是用<code>a</code> 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;文件地址xxx.xlsx&quot; download=&quot;文件名.xlsx&quot;&gt;</span><br></pre></td></tr></table></figure><p>加 download 属性是因为有个情况，比如<code>txt</code>,<code>png</code>,<code>jpg</code>等这些浏览器支持直接打开的文件是不会执行下载任务的，而是会直接打开文件，这个时候就需要给a标签添加一个属性<code>“download”</code>;</p><p>最最关键的地方来了：文件放的位置和文件的地址这两是最大的坑。</p><p>一、文件放的位置：</p><p>我们在写vue的时候，代码都在 src 文件夹里面，但是要下载的文件不能放在这里面，要放在同级的静态文件夹下，如 public 文件夹</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/db82f5f4c3a74039a9bd72b89528b5ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><p>别人的文章里写的是 <code>static</code> 文件夹，但是我的没生效，不知道什么原因。</p><p>二、文件地址的引用：</p><p>需要下载的路径是相对于<code>index.html</code>文件路径 否则会提示下载文件未找到。</p><p>上面这句话里：路径是相对于 <code>index.html</code> 的文件路径，一开始没搞懂，写的路径都是我的代码的相对路径，如：<code>../../../public/xxx.xlsx</code>。 后来才发现这不是相对于 index.html 的路径，</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/826e2cdfc8954b3d994c91af1bda56ba~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><p>这是我的代码，这才发现文件和 <code>index.html</code> 同级，所以引用路径直接就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">href=<span class="string">&quot;./用户信息模板.xlsx&quot;</span></span><br></pre></td></tr></table></figure><p>这两个坑过去了，可以正常下载文件了。</p><p>至于文件路径和 <code>download</code> 的文件名存在中文会出错我这里没问题，不知道你们的会不会，这也是需要考虑的问题。</p><blockquote><p>作者：Front_end_er<br>链接：<a href="https://juejin.cn/post/6857730119583629325">https://juejin.cn/post/6857730119583629325</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vite环境之配置环境变量</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vite%E7%8E%AF%E5%A2%83%E4%B9%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vite%E7%8E%AF%E5%A2%83%E4%B9%8B%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>在根目录新建<code>.env.[mode]</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.env                # 所有情况下都会加载</span><br><span class="line">.env.local          # 所有情况下都会加载，但会被 git 忽略</span><br><span class="line">.env.[mode]         # 只在指定模式下加载</span><br><span class="line">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span><br></pre></td></tr></table></figure><p>加载的环境变量也会通过 import.meta.env 暴露给客户端源码。<br><code>import.meta.env</code>的值为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">BASE_URL</span>: <span class="string">&quot;/&quot;</span></span><br><span class="line">  <span class="attr">DEV</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">MODE</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">  <span class="attr">PROD</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">SSR</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">VITE_BASE_URL</span>: <span class="string">&quot;http://localhost:3010&quot;</span> <span class="comment">// 配置了模式文件之后，vite会将所有有效变量添加到env中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这个文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DB_PASSWORD=foobar</span><br><span class="line">VITE_SOME_KEY=123</span><br></pre></td></tr></table></figure><p>只有 VITE_SOME_KEY 会被暴露为<code>import.meta.env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令则运行在 production (生产) 模式。</p><p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># .env.production</span><br><span class="line">VITE_APP_TITLE=My App  // 等号左右不要空白</span><br></pre></td></tr></table></figure><p>在你的应用中，你可以使用 <code>import.meta.env.VITE_APP_TITLE</code> 渲染标题。</p><p>然而，重要的是要理解 <strong>模式</strong> 是一个更广泛的概念，而不仅仅是开发和生产。一个典型的例子是，你可能希望有一个 “staging” (预发布|预上线) 模式，它应该具有类似于生产的行为，但环境变量与生产环境略有不同。</p><p>你可以通过传递 <code>--mode</code> 选项标志来覆盖命令使用的默认模式。例如，如果你想为我们假设的 staging 模式构建应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vite build --mode staging</span><br></pre></td></tr></table></figure><p>为了使应用实现预期行为，我们还需要一个 <code>.env.staging</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># .env.staging</span><br><span class="line">NODE_ENV=production</span><br><span class="line">VITE_APP_TITLE=My App (staging)</span><br></pre></td></tr></table></figure><p>现在，你的 staging 应用应该具有类似于生产的行为，但显示的标题与生产环境不同。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS之正则匹配RegExp</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JS%E4%B9%8B%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8DRegExp/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/JS%E4%B9%8B%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8DRegExp/</url>
      
        <content type="html"><![CDATA[<h3 id="使用的方法"><a href="#使用的方法" class="headerlink" title="使用的方法"></a>使用的方法</h3><p>使用正则表达式的方法</p><p><code>exec</code> 一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">str = <span class="string">&#x27;get hello world&#x27;</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/get/g</span></span><br><span class="line"><span class="keyword">let</span> r = reg.<span class="title function_">exec</span>(str)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r); <span class="comment">// [ &#x27;get&#x27;, index: 0, input: &#x27;get hello world&#x27;, groups: undefined ]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>test</code> 一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。<br><code>match</code> 一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。<br><code>matchAll</code> 一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。<br><code>search</code> 一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。<br><code>replace</code> 一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。<br><code>split</code> 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单向数据流和双向数据流</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/interview/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/interview/</url>
      
        <content type="html"><![CDATA[<ol><li><p>js对象的对象原型</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">spacify</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">spacify</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">spacify</span>()  <span class="comment">//&#x27;h e l l o&#x27;  在字符串对象上添加一个spacify的方法</span></span><br></pre></td></tr></table></figure><p> Javascript中函数声明和函数表达式是存在区别的，函数声明在JS解析时进行函数提升，因此在同一个作用域内，不管函数声明在哪里定义，该函数都可以进行调用。而函数表达式的值是在JS运行时确定，并且在表达式赋值完成后，该函数才能调用</p></li><li><p>JS中var定义的全局变量与window对象上定义的属性的区别</p><ol><li>var定义的全局变量,对象,函数都是<code>window</code>对象的成员</li></ol> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;yy&#x27;</span></span><br><span class="line"><span class="keyword">var</span> action = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;rice&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>,<span class="variable language_">window</span>.<span class="title function_">action</span>())  <span class="comment">//yy,rice</span></span><br></pre></td></tr></table></figure><ol><li>全局变量不能通过delete删除,而window上的属性可以删除</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">delete</span> a;</span><br><span class="line"><span class="keyword">delete</span> b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure><ol><li>访问未定义的变量会报错,通过window查询的变量只会显示<code>undefined</code></li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// undefined   变量的提升</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// VM961:1 Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span> </span><br></pre></td></tr></table></figure><ol><li>在函数中定义的var变量不会被外部访问,而定义在window上的属性会被外部访问</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">aa</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// a is not defined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p>apply(),call(),bind()三者的使用与区别</p><ol><li>apply()的使用</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line">ak.<span class="title function_">apply</span>(obj,[<span class="number">1993</span>,<span class="number">5</span>]) <span class="comment">// 今年1993月5 undefined的年龄为12   将this的指向传递给obj</span></span><br></pre></td></tr></table></figure><ol><li>call()的使用</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line">ak.<span class="title function_">call</span>(obj,<span class="number">1993</span>,<span class="number">5</span>) <span class="comment">// 今年1993月5 undefined的年龄为12   将this的指向传递给obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用法和apply()一样,apply()的参数传递是一个数组,而call()传递的参数是一个数组列表</span></span><br><span class="line"><span class="comment">//当指向的对象为null,或者undefined的时候,指向的是window</span></span><br><span class="line"><span class="comment">//两者改变指向的对象后会立即执行</span></span><br></pre></td></tr></table></figure><ol><li>bind()的使用</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">age</span>:<span class="number">12</span>,</span><br><span class="line">    <span class="attr">myFun</span>: <span class="keyword">function</span>(<span class="params">year,month</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;今年&#x27;</span>+year+<span class="string">&#x27;月&#x27;</span>+month,<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&#x27;的年龄为&#x27;</span>+<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ak = obj.<span class="property">myFun</span></span><br><span class="line"><span class="title function_">ak</span>(<span class="number">1992</span>,<span class="number">6</span>) <span class="comment">// 今年1992月6 a的年龄为undefined   重新赋值后,此时的this指向window</span></span><br><span class="line"><span class="keyword">var</span> bk = ak.<span class="title function_">bind</span>(obj,<span class="number">1997</span>,<span class="number">8</span>)  <span class="comment">//bind使用方法和call()大致一样,但是不会立即执行,且可以多次传入参数</span></span><br><span class="line"><span class="title function_">bk</span>(<span class="number">2005</span>) <span class="comment">// 今年1997月8 undefined的年龄为12  bind指定对象后,不会立即执行,且可以分开传参</span></span><br></pre></td></tr></table></figure><p> <strong>apply，call，bind三者的区别</strong>:</p><ul><li>三者都可以改变函数的this对象指向。</li><li>三者第一个参数都是this要指向的对象，如果如果没有这个参数或参数为undefined或null，则默认指向全局window。</li><li>三者都可以传参，但是apply是数组，而call是参数列表，且apply和call是一次性传入参数，而bind可以分为多次传入。</li><li>bind 是返回绑定this之后的函数，便于稍后调用；apply 、call 则是立即执行 。</li></ul></li><li><p>JavaScript执行顺序<br>事件栈 &#x3D;&gt; 所有微观任务(Promise,process,nextTick,Object.observe) &#x3D;&gt; 一个宏观任务(setTimeout,setTimeInterval,setImmediate,I&#x2F;O,交互操作,UI渲染) &#x3D;&gt; 事件栈<br>事件循环<br>详情见<a href="http://blog.ws865.com/1374.html">JavaScript中宏观和微观及队列的概念</a><br><strong>执行宏观任务过程中,发生了什么</strong>:  将微观任务放在微观任务队列中</p></li><li><p>闭包的作用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">out</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    count++</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;count: &#x27;</span>, count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="title function_">out</span>()</span><br><span class="line"><span class="title function_">x</span>()</span><br><span class="line"><span class="title function_">x</span>()</span><br><span class="line"><span class="keyword">let</span> y = <span class="title function_">out</span>()</span><br><span class="line"><span class="title function_">y</span>()</span><br><span class="line"><span class="title function_">y</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4 </span></span><br><span class="line"><span class="comment">// 如果count在第一个函数内部，会重新初始化count   //1,2,1,2</span></span><br></pre></td></tr></table></figure><p><a href="http://blog.ws865.com/1032.html">闭包的概念及作用</a></p></li><li><p>Promise的使用<br> <a href="http://blog.ws865.com/1102.html">promise的使用</a></p></li><li><p>arguments对象<br><code>arguments</code> 是一个对应于传递给函数的参数的类数组对象.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">     <span class="comment">// Arguments(3) [1, 2, 3, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span><br><span class="line">     <span class="comment">// expected output: 1</span></span><br><span class="line">     <span class="keyword">switch</span></span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">     <span class="comment">// expected output: 2</span></span><br><span class="line"></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">     <span class="comment">// expected output: 3</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">func1</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> <span class="comment">//如果在闭包中使用arguments得不到任何参数</span></span><br></pre></td></tr></table></figure><p> arguments除了<code>length</code>没有其他的<code>Array</code>属性,arguments只能在函数中使用<br> 但是可以将arguments转化成数组:</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">slice</span>().<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="keyword">var</span> args = [].<span class="title function_">slice</span>().<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES2015/ES6</span></span><br><span class="line"><span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line"><span class="keyword">const</span> args = ...[<span class="variable language_">arguments</span>]</span><br></pre></td></tr></table></figure></li><li><p>从输入URL到页面加载完成都发生了什么</p><ol><li>DNS服务器解析IP</li><li>建立tcp连接</li><li>在tcp协议基础上进行http协议连接</li><li>三次握手后成功后 SYN&#x2F;SYN-ACK&#x2F;ACK</li><li>服务器对客户端做出响应,并发送对应的html文本</li><li>浏览器显示html文本</li><li>释放TCP连接(四次握手)</li></ol></li><li><p>sessionStorage,localStorage,cookie的区别</p><ol><li>容量大小区别:sessionStorage容量5m,localStorage容量20M,cookie容量4kb</li><li>传输:cookie可以用于网络传输,其他两个是本地存储</li><li>时间:sessionStorage和cookie在设置有效期之前都有效,一旦窗口关闭,数据就失效了,localStorage永久有效,除非手动设置</li><li>作用域:sessionStorage和localStorage在同源不同窗口可以共享,cookie在不同窗口就无法共享</li></ol></li><li><p>set数据结构和map数据结构<br><a href="http://blog.ws865.com/1187.html">set和map数据结构的使用</a><br>map数据和object区别在于map的键值可以用任何数据,而object的键无法用非字符串或整数<br>map会保留所有元素的顺序<br>map数据可以直接遍历,提高执行效率</p></li><li><p>key的作用有哪些<br>v-for遍历时,用id,uuid之类作为key唯一标识节点加速DOM渲染:<br>如果使用了<code>key</code>,vue会使用keys的顺序记录<code>element</code>,曾经拥有了key的element如果不出现,会被remove或destroy<br>响应式系统没有监听到数据时,会使用<code>new Date()</code>生成的时间戳作为key,手动强制渲染</p><p>如果不使用key,会造成如果删除其中某一项内容,会影响后面值的索引,导致顺序混乱</p></li><li><p>keep-live有什么作用<br>keep-alive可以在组件切换时，保存其包裹的组件的状态，使其不被销毁，防止多次渲染。<br>其拥有两个独立的生命周期钩子函数 actived 和 deactived，使用keep-alive包裹的组件在切换时不会被销毁，而是缓存到内存中并执行 deactived 钩子函数，命中缓存渲染后会执行 actived 钩子函数。</p></li><li><p>组件传值</p><ol><li>父子组件传值 props ,this.$emit()</li><li>跨组件传值provide(), inject(), 不是响应式的传值</li><li>vuex传值 state,getter,mutation,action,</li></ol></li><li><p>get和post的区别</p><ol><li>get 是通过把参数包含在URL中,只发送一个数据包,响应快,性能会好点,url的长度受限制</li><li>post 通过request body传递参数,post发送请求会有两个数据包,一个header和data数据包,安全性更高,</li></ol></li><li><p>let和const跟var的区别<br>const声明后就不能修改该常量的值,即栈的值和地址<br>let和const在函数外部声明,不会被添加到window对象里面,而var声明会在window对象生成一个属性<br>let的作用域只在声明的代码块内部,不会变量提升,如if()的代码块,var声明的变量为该语句的函数体内,会出现个变量提升</p></li><li><p>ES6 新增</p><ol><li>let,const</li><li>解构赋值</li><li>for of, …扩展运算符<br> for of 可直接遍历值</li><li>函数和参数</li><li>Set和Map</li><li>Promise</li></ol></li><li><p>箭头函数和普通函数区别</p><ol><li>语法更加清晰简洁</li><li>不会创建自己的this</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用普通函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// setTimeout中使用箭头函数</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun2.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Obj&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>箭头函数继承而来的this指向永远不变,.call()&#x2F;.apply()&#x2F;.bind()无法改变箭头函数中this的指向</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="string">&#x27;Global&#x27;</span>;</span><br><span class="line"><span class="comment">// 箭头函数定义在全局作用域</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun1</span>();     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line"><span class="comment">// this的指向不会改变，永远指向Window对象</span></span><br><span class="line">fun1.<span class="title function_">call</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);     <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">apply</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;);    <span class="comment">// &#x27;Global&#x27;</span></span><br><span class="line">fun1.<span class="title function_">bind</span>(&#123;<span class="attr">id</span>: <span class="string">&#x27;Obj&#x27;</span>&#125;)();   <span class="comment">// &#x27;Global&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>箭头函数没有自己的arguments,可以使用rest参数代替</li></ol></li><li><p>浏览器如何渲染<br>关键渲染路径是指浏览器从最初接收请求来的HTML、CSS、javascript等资源，然后解析、构建树、渲染布局、绘制，最后呈现给客户能看到的界面这整个过程。<br>所以浏览器的渲染过程主要包括以下几步：</p><ul><li><p>解析HTML生成DOM树。</p></li><li><p>解析CSS生成CSSOM规则树。</p></li><li><p>将DOM树与CSSOM规则树合并在一起生成渲染树。</p></li><li><p>遍历渲染树开始布局，计算每个节点的位置大小信息。</p></li><li><p>将渲染树每个节点绘制到屏幕。</p></li></ul></li><li><p>webpack常用插件</p><ol><li>loader功能</li><li>图片压缩插件：<code>imagemin-webpack-plugin</code><br> 产生背景：图片过大，加载速度慢，浪费存储空间。<br> 作用：批量压缩图片。</li><li>清空文件夹插件：<code>clean-webpack-plugin</code><br> 产生背景：每次进行打包需要手动清空目标文件夹。<br> 作用：每次打包时先清空output文件夹。</li><li>提供全局变量插件<br> 产生背景：每次进行import引入全局模块，很麻烦。</li></ol><p> 作用：可以导入到全局，之后不用再在每个页面import。<br>5. css 去除无用的样式<code>purifycss-webpack</code><br> 产生背景：编写的css可能出现冗余情况。</p><p> 作用：去除冗余的css代码。</p></li><li><p>js性能优化</p><ol><li>删除未使用的js代码,包括未使用的功能性代码,多余的依赖库,滥用的npm包</li><li>数组和对象操作避免使用构造函数,比如new Array(), new Object()</li><li>避免使用非必要的全局变量</li><li>合理使用缓存机制,访问本地数据比远程数据块</li><li>减少循环中的活动</li><li>尽量避免使用闭包</li></ol></li><li><p>css3新特性,怎么做不同浏览器兼容<br>通过使用 前缀  -webkit- -firefox-的形式</p></li><li><p>水平垂直居中<br>本身控制: position + left right + margin: 0 auto  水平垂直居中均可<br>父级控制: display:flex justify-content:center<br>未知元素宽高度: transform + position + translate(x,y)是相对于自身进行偏移, 使用百分比也是根据自身的百分比,所以居中使用position + translate</p></li><li><p>this是什么,作用是什么</p></li><li><p>浏览器缓存</p><ol><li>http缓存是基于HTTP协议的浏览器文件级缓存机制。</li><li>websql这种方式只有较新的chrome浏览器支持，并以一个独立规范形式出现</li><li>indexDB 是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的 API</li><li>Cookie一般网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）</li><li>Localstorage html5的一种新的本地缓存方案，目前用的比较多，一般用来存储ajax返回的数据，加快下次页面打开时的渲染速度</li><li>Sessionstorage和localstorage类似，但是浏览器关闭则会全部删除，api和localstorage相同，实际项目中使用较少。</li><li>application cache 是将大部分图片资源、js、css等静态资源放在manifest文件配置中</li><li>cacheStorage是在ServiceWorker的规范中定义的，可以保存每个serverWorker申明的cache对象</li><li>flash缓存 这种方式基本不用，这一方法主要基于flash有读写浏览器端本地目录的功能</li></ol></li><li><p>跨域的解决办法<br>跨域的作用是什么:跨域是由于浏览器同源策略影响的,同源策略能保证文档不会遭受外部脚本的攻击</p><ol><li>通过jsonp跨域</li><li>document.domain + iframe跨域</li><li>location.hash + iframe</li><li>window.name + iframe跨域</li><li>postMessage跨域</li><li>跨域资源共享（CORS&lt;drawImage,来自css图形,webGL贴图,web字体，XMLHttprequest&gt;）浏览器本身不能跨域，但是通过cors可以实现</li><li>nginx代理跨域</li><li>nodejs中间件代理跨域</li><li>WebSocket协议跨域</li></ol></li><li><p>js安全性问题</p></li><li><p>promise的原理及原生代码</p></li><li><p>前端性能优化</p><ol><li>减少http请求,每次http请求需要经历DNS查询,tcp握手,服务器响应,浏览器接收等操作</li><li>使用http2,多个请求共享一个tcp连接多路复用,所有文件同时发送,节约时间</li><li>使用服务端渲染,</li><li>静态资源使用CDN</li><li>将css放在顶部,js文件放在底部,解决渲染阻塞的问题</li><li>使用字体图标 iconfont 代替图片图标,iconfont文件小</li><li>善用缓存，不重复加载相同的资源</li><li>压缩文件</li><li>图片优化(1.响应式 图片2,)</li></ol></li><li><p>原型链原理,作用及使用方法<br>原型链是针对构造函数的，比如我先创建了一个函数，然后通过一个变量new了这个函数，那么这个被new出来的函数就会继承创建出来的那个函数的属性，然后如果我访问new出来的这个函数的某个属性，但是我并没有在这个new出来的函数中定义这个变量，那么它就会往上（向创建出它的函数中）查找，这个查找的过程就叫做原型链。最终都指向null</p><p>Fun &#x3D;&gt; 原型对象 &#x3D;&gt; Object的原型对象 &#x3D;&gt; null</p></li><li><p>js中数组会修改原数组方法有哪些<br>会改变原数组: pop(),push(),shift(),unshift(),reverse(),sort(),splice(),fill(),copyWithin()<br>不会改变原数组: concat(),join(),slice(),filter(),reduce()</p></li><li><p>css兼容性问题,css3新增特性<br>CSS3新增特性:<br>圆角边框: <code>border-colors</code>,<code>border-image</code>,<code>border-radius</code><br>文本阴影与盒阴影: <code>text-shadow</code>,<code>box-shadow</code><br>文本截断:<code>text-overflow</code><br>背景尺寸:background-image<br>过渡: <code>transition: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;</code><br>动画: <code>animation: animation-name，animation-duration, animation-timing-function，animation-delay，animation-iteration-count，animation-direction，animation-fill-mode(none|forwards|backwards|both) 和 animation-play-state</code><br>转换: <code>transfrom: rotate(deg,deg) | scale() | skew(deg,deg)</code><br>选择器: <a href="https://www.w3school.com.cn/cssref/css_selectors.asp">CSS3选择器</a></p></li><li><p>computed和watch的区别<br>computed类似一个过滤器,对绑定到view的数据进行处理</p></li><li><p>防抖和节流的区别</p></li><li><p>字符串和数字转换</p></li><li><p>双向绑定原理</p></li></ol><h2 id="2022面试题"><a href="#2022面试题" class="headerlink" title="2022面试题"></a>2022面试题</h2><ol><li><p>hash 和 history的区别<br> 这里的hash是指尾巴后的 # 号以及后面的字符。hash也称作锚点，本身是用来做页面定位的，她可以使对应 id 的元素显示在可视区域内。<br> hash 本来是拿来做页面定位的，如果拿来做路由的话，原来的锚点功能就不能用了。其次，hash 的传参是基于 url 的，如果要传递复杂的数据，会有体积的限制，而 history 模式不仅可以在url里放参数，还可以将数据存放在一个特定的对象中。<br> 最明显之差别：<br> （1）在url显示： hash有#很Low ； history 无#好看<br> （2）回车刷新： hash 可以加载到hash值对应页面 ； history一般就是404掉了<br> （3）支持版本： hash支持低版本浏览器和IE浏览器 ； historyHTML5新推出的API</p><p> <em>hash路由</em> location.hash<br> 浏览器地址#后面的变化，是可以被监听到的，浏览器为我们提供了原生监听事件hashchange，它可以监听到如下的变化：<br> 点击a标签，改变了浏览器地址<br> 浏览器的前进后退行为<br> 通过window.location方法，改变浏览器地址</p><p> <em>history路由</em> location.pathname<br> 当活动历史记录条目更改时，将触发popstate事件。如果被激活的历史记录条目是通过对history.pushState（）的调用创建的，或者受到对history.replaceState（）的调用的影响，popstate事件的state属性包含历史条目的状态对象的副本。</p><blockquote><p>需要注意的是调用history.pushState()或history.replaceState()不会触发popstate事件。只有在做出浏览器动作时，才会触发该事件，如用户点击浏览器的回退按钮（或者在Javascript代码中调用history.back()或者history.forward()方法）</p></blockquote><p> 我们可以通过遍历页面上的所有 a 标签，阻止 a 标签的默认事件的同时，加上点击事件的回调函数，在回调函数内获取 a 标签的 href 属性值，再通过 pushState 去改变浏览器的 location.pathname 属性值。然后手动执行 popstate 事件的回调函数，去匹配相应的路由</p></li><li><p>CSS重绘和回流</p><ul><li>浏览器使用流式布局模型 <code>(Flow Based Layout)</code>。</li><li>浏览器会把HTML解析成DOM，把CSS解析成<code>CSSOM</code>，<code>DOM</code>和<code>CSSOM</code>合并就产生了<code>Render Tree</code>。</li><li>有了<code>RenderTree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。</li><li>当<code>Render Tree</code>中部分或全部元素的尺寸、结构、或某些属性发生改变时，浏览器重新渲染部分或全部文档的过程称为回流。</li></ul></li></ol><h3 id="会导致回流的操作"><a href="#会导致回流的操作" class="headerlink" title="会导致回流的操作"></a>会导致回流的操作</h3><pre><code>1. 页面首次渲染2. 浏览器窗口大小发生改变3. 元素尺寸或位置发生改变4. 元素内容变化（文字数量或图片大小等等）5. 元素字体大小变化6. 添加或者删除可见的DOM元素7. 激活CSS伪类（例如：:hover）8. 查询某些属性或调用某些方法</code></pre><h3 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h3><pre><code>当页面中元素样式的改变并不影响它在文档流中的位置时（例如：`color`、`background-color`、`visibility`等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。CSS避免1. 避免使用`table`布局。2. 尽可能在`DOM`树的最末端改变`class`。3. 避免设置多层内联样式。4. 将动画效果应用到`position`属性为`absolute`或`fixed`的元素上。5. 避免使用`CSS`表达式（例如：`calc()`）。*JavaScript避免*避免频繁操作样式，最好一次性重写style属性，或者将样式列表定义为class并一次性更改class属性。避免频繁操作DOM，创建一个documentFragment，在它上面应用所有DOM操作，最后再把它添加到文档中。也可以先为元素设置display: none，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> 面试篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单向数据流和双向数据流</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E5%92%8C%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>数据流，表明的是数据流向或数据传递。</p><h2 id="一、单向数据流"><a href="#一、单向数据流" class="headerlink" title="一、单向数据流"></a>一、单向数据流</h2><h3 id="1-什么是单向数据流？"><a href="#1-什么是单向数据流？" class="headerlink" title="1. 什么是单向数据流？"></a>1. 什么是单向数据流？</h3><p>单向数据流（Unidirectional data flow）方式使用一个上传数据流和一个下传数据流进行双向数据通信，两个数据流之间相互独立。单向数据流指只能从一个方向来修改状态。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/edc419b4e49842a49cef1b1681a34854~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><h3 id="2-Vue-中的单向数据流"><a href="#2-Vue-中的单向数据流" class="headerlink" title="2. Vue 中的单向数据流"></a>2. Vue 中的单向数据流</h3><p>对于 Vue 来说，组件之间的数据传递具有单向数据流这样的特性。</p><ol><li>父组件总是通过 props 向子组件传递数据；</li><li>所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定；</li><li>父级 prop 的更新会向下流动到子组件中，但是反过来则不行；</li><li>这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解；</li><li>每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值；</li><li>这意味着不应该在一个子组件内部改变 prop。如果这样做，Vue 会在浏览器的控制台中发出警告。</li></ol><h3 id="3-单向数据流-优点"><a href="#3-单向数据流-优点" class="headerlink" title="3. 单向数据流 - 优点"></a>3. 单向数据流 - 优点</h3><ol><li>所有状态的改变可记录、可跟踪，源头易追溯；</li><li>所有的数据，具有唯一出口和入口，使得数据操作更直观更容易理解，可维护性强；</li><li>当数据变化时，页面会自动变化</li><li>当你需要修改状态，完全重新开始走一个修改的流程。这限制了状态修改的方式，让状态变得可预测，容易调试。</li></ol><h3 id="4-单向数据流-缺点"><a href="#4-单向数据流-缺点" class="headerlink" title="4. 单向数据流 - 缺点"></a>4. 单向数据流 - 缺点</h3><ol><li>页面渲染完成后，有新数据不能自动更新，需要手动整合新数据和模板重新渲染</li><li>代码量上升，数据流转过程变长，代码重复性变大</li><li>由于对应用状态独立管理的严格要求(单一的全局 store，如：Vuex)，在处理局部状态较多的场景时(如用户输入交互较多的“富表单型”应用)，会显得啰嗦及繁琐。</li></ol><h2 id="二、双向数据流"><a href="#二、双向数据流" class="headerlink" title="二、双向数据流"></a>二、双向数据流</h2><h3 id="1-什么是双向数据流？"><a href="#1-什么是双向数据流？" class="headerlink" title="1. 什么是双向数据流？"></a>1. 什么是双向数据流？</h3><p>在双向数据流中，Model（可以理解为状态的集合） 中可以修改自己或其他Model的状态， 用户的操作（如在输入框中输入内容）也可以修改状态。（双向数据流也可以叫双向数据绑定）</p><hr><p>当我们在前端开发中采用 <code>MV*</code> 的模式时，<code>M - model</code>，指的是模型，也就是数据，<code>V - view</code>，指的是视图，也就是页面展现的部分。</p><hr><p>将从服务器获取的数据进行“渲染”，展现到视图上。每当数据有变更时，我们会再次进行渲染，从而更新视图，使得视图与数据保持一致</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6022bab6df5a45b695c431e0cdd0ffea~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><hr><p>页面也会通过用户的交互，产生状态、数据的变化，这个时候，我们则编写代码，将视图对数据的更新同步到数据</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cdbd1d1278149fd94ad5de91d4ecae2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="image.png"></p><hr><h3 id="2-双向数据流-优点"><a href="#2-双向数据流-优点" class="headerlink" title="2. 双向数据流 - 优点"></a>2. 双向数据流 - 优点</h3><ol><li>数据模型变化与更新，会自动同步到页面上，用户在页面的数据操作，也会自动同步到数据模型</li><li>无需进行和单向数据绑定的那些相关操作；</li><li>在表单交互较多的场景下，会简化大量业务无关的代码。</li></ol><h3 id="3-双向数据流-缺点"><a href="#3-双向数据流-缺点" class="headerlink" title="3. 双向数据流 - 缺点"></a>3. 双向数据流 - 缺点</h3><ol><li>无法追踪局部状态的变化；</li><li>“暗箱操作”，增加了出错时 debug 的难度；</li><li>由于组件数据变化来源入口变得可能不止一个，数据流转方向易紊乱。</li><li>改变一个状态有可能会触发一连串的状态的变化，最后很难预测最终的状态是什么样的。使得代码变得很难调试</li></ol><p>作者：lubinbin<br>链接：<a href="https://juejin.cn/post/6999826653803184135">https://juejin.cn/post/6999826653803184135</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> 面试篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大厂前端面试</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/%E5%A4%A7%E5%8E%82%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/%E5%A4%A7%E5%8E%82%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<!-- START doctoc generated TOC please keep comment here to allow auto update --><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><ul><li><a href="#%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88%E6%B1%87%E6%80%BB">前端面试题及答案汇总</a><ul><li><a href="#%E7%AC%AC-1-%E9%A2%98%E5%86%99-react--vue-%E9%A1%B9%E7%9B%AE%E6%97%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9C%A8%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%86%99-key%E5%85%B6%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88">第 1 题：写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？</a></li><li><a href="#%E7%AC%AC-2-%E9%A2%981-2-3mapparseint-what--why-">第 2 题：<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code> what &amp; why ?</a></li><li><a href="#%E7%AC%AC-3-%E9%A2%98%E4%BB%80%E4%B9%88%E6%98%AF%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0">第 3 题：什么是防抖和节流？有什么区别？如何实现？</a></li><li><a href="#%E7%AC%AC-4-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-setmapweakset-%E5%92%8C-weakmap-%E7%9A%84%E5%8C%BA%E5%88%AB">第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</a></li><li><a href="#%E7%AC%AC-5-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0">第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？</a></li><li><a href="#%E7%AC%AC-6-%E9%A2%98%E8%AF%B7%E5%88%86%E5%88%AB%E7%94%A8%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%80%9D%E6%83%B3%E5%92%8C%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%80%9D%E6%83%B3%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%8B%B7%E8%B4%9D%E5%87%BD%E6%95%B0">第 6 题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？</a></li><li><a href="#%E7%AC%AC-7-%E9%A2%98es5es6-%E7%9A%84%E7%BB%A7%E6%89%BF%E9%99%A4%E4%BA%86%E5%86%99%E6%B3%95%E4%BB%A5%E5%A4%96%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">第 7 题：ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</a></li><li><a href="#%E7%AC%AC-8-%E9%A2%98settimeoutpromiseasyncawait-%E7%9A%84%E5%8C%BA%E5%88%AB">第 8 题：setTimeout、Promise、Async&#x2F;Await 的区别</a></li><li><a href="#%E7%AC%AC-9-%E9%A2%98asyncawait-%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%90%8C%E6%AD%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5">第 9 题：Async&#x2F;Await 如何通过同步的方式实现异步</a></li><li><a href="#%E7%AC%AC-10-%E9%A2%98%E5%BC%82%E6%AD%A5%E7%AC%94%E8%AF%95%E9%A2%98">第 10 题：异步笔试题</a></li><li><a href="#%E7%AC%AC-11-%E9%A2%98%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%99%E9%A2%98">第 11 题：算法手写题</a></li><li><a href="#%E7%AC%AC-12-%E9%A2%98js-%E5%BC%82%E6%AD%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9">第 12 题：JS 异步解决方案的发展历程以及优缺点。</a></li><li><a href="#%E7%AC%AC-13-%E9%A2%98promise-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E6%98%AF%E5%90%8C%E6%AD%A5%E6%89%A7%E8%A1%8C%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E9%82%A3%E4%B9%88-then-%E6%96%B9%E6%B3%95%E5%91%A2">第 13 题：Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</a></li><li><a href="#%E7%AC%AC-14-%E9%A2%98%E6%83%85%E4%BA%BA%E8%8A%82%E7%A6%8F%E5%88%A9%E9%A2%98%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-new">第 14 题：情人节福利题，如何实现一个 new</a></li><li><a href="#%E7%AC%AC-15-%E9%A2%98%E7%AE%80%E5%8D%95%E8%AE%B2%E8%A7%A3%E4%B8%80%E4%B8%8Bhttp2%E7%9A%84%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8">第 15 题：简单讲解一下http2的多路复用</a></li><li><a href="#%E7%AC%AC-16-%E9%A2%98%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E7%9A%84%E7%90%86%E8%A7%A3">第 16 题：谈谈你对TCP三次握手和四次挥手的理解</a></li><li><a href="#%E7%AC%AC-17-%E9%A2%98ab-%E6%9C%BA%E5%99%A8%E6%AD%A3%E5%B8%B8%E8%BF%9E%E6%8E%A5%E5%90%8Eb-%E6%9C%BA%E5%99%A8%E7%AA%81%E7%84%B6%E9%87%8D%E5%90%AF%E9%97%AE-a-%E6%AD%A4%E6%97%B6%E5%A4%84%E4%BA%8E-tcp-%E4%BB%80%E4%B9%88%E7%8A%B6%E6%80%81">第 17 题：A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态</a></li><li><a href="#%E7%AC%AC-18-%E9%A2%98react-%E4%B8%AD-setstate-%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E6%98%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E6%98%AF%E5%BC%82%E6%AD%A5%E7%9A%84">第 18 题：React 中 setState 什么时候是同步的，什么时候是异步的？</a></li><li><a href="#%E7%AC%AC-19-%E9%A2%98react-setstate-%E7%AC%94%E8%AF%95%E9%A2%98%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88">第 19 题：React setState 笔试题，下面的代码输出什么？</a></li><li><a href="#%E7%AC%AC-20-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-npm-%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BE%93%E5%85%A5-npm-install-%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A8%A1%E5%9D%97">第 20 题：介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</a></li><li><a href="#%E7%AC%AC-21-%E9%A2%98%E6%9C%89%E4%BB%A5%E4%B8%8B-3-%E4%B8%AA%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95%E8%AF%B7%E5%88%86%E5%88%AB%E4%BB%8B%E7%BB%8D%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BC%98%E5%8A%A3">第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣</a></li><li><a href="#%E7%AC%AC-22-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81repaint--reflow%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96">第 22 题：介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</a></li><li><a href="#%E7%AC%AC-23-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%92%8C%E8%AE%A2%E9%98%85-%E5%8F%91%E5%B8%83%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB%E5%90%84%E8%87%AA%E9%80%82%E7%94%A8%E4%BA%8E%E4%BB%80%E4%B9%88%E5%9C%BA%E6%99%AF">第 23 题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景</a></li><li><a href="#%E7%AC%AC-24-%E9%A2%98%E8%81%8A%E8%81%8A-redux-%E5%92%8C-vuex-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3">第 24 题：聊聊 Redux 和 Vuex 的设计思想</a></li><li><a href="#%E7%AC%AC-25-%E9%A2%98%E8%AF%B4%E8%AF%B4%E6%B5%8F%E8%A7%88%E5%99%A8%E5%92%8C-node-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%8C%BA%E5%88%AB">第 25 题：说说浏览器和 Node 事件循环的区别</a></li><li><a href="#%E7%AC%AC-26-%E9%A2%98%E4%BB%8B%E7%BB%8D%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B">第 26 题：介绍模块化发展历程</a></li><li><a href="#%E7%AC%AC-27-%E9%A2%98%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E7%94%A8-const-%E5%92%8C-let-%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8D%E5%9C%A8-window-%E4%B8%8A%E9%82%A3%E5%88%B0%E5%BA%95%E5%9C%A8%E5%93%AA%E9%87%8C%E5%A6%82%E4%BD%95%E5%8E%BB%E8%8E%B7%E5%8F%96">第 27 题：全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？。</a></li><li><a href="#%E7%AC%AC-28-%E9%A2%98cookie-%E5%92%8C-token-%E9%83%BD%E5%AD%98%E6%94%BE%E5%9C%A8-header-%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%9A%E5%8A%AB%E6%8C%81-token">第 28 题：cookie 和 token 都存放在 header 中，为什么不会劫持 token？</a></li><li><a href="#%E7%AC%AC-29-%E9%A2%98%E8%81%8A%E8%81%8A-vue-%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9Amodel-%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98-viewview-%E5%8F%88%E6%98%AF%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98-model-%E7%9A%84">第 29 题：聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的</a></li><li><a href="#%E7%AC%AC-30-%E9%A2%98%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84">第 30 题：两个数组合并成一个数组</a></li><li><a href="#%E7%AC%AC-31-%E9%A2%98%E6%94%B9%E9%80%A0%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%BF%E4%B9%8B%E8%BE%93%E5%87%BA0---9%E5%86%99%E5%87%BA%E4%BD%A0%E8%83%BD%E6%83%B3%E5%88%B0%E7%9A%84%E6%89%80%E6%9C%89%E8%A7%A3%E6%B3%95">第 31 题：改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。</a></li><li><a href="#%E7%AC%AC-32-%E9%A2%98virtual-dom-%E7%9C%9F%E7%9A%84%E6%AF%94%E6%93%8D%E4%BD%9C%E5%8E%9F%E7%94%9F-dom-%E5%BF%AB%E5%90%97%E8%B0%88%E8%B0%88%E4%BD%A0%E7%9A%84%E6%83%B3%E6%B3%95">第 32 题：Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。</a></li><li><a href="#%E7%AC%AC-33-%E9%A2%98%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%93%E5%8D%B0%E4%BB%80%E4%B9%88%E5%86%85%E5%AE%B9%E4%B8%BA%E4%BB%80%E4%B9%88">第 33 题：下面的代码打印什么内容，为什么？</a></li><li><a href="#%E7%AC%AC-34-%E9%A2%98%E7%AE%80%E5%8D%95%E6%94%B9%E9%80%A0%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%BF%E4%B9%8B%E5%88%86%E5%88%AB%E6%89%93%E5%8D%B0-10-%E5%92%8C-20">第 34 题：简单改造下面的代码，使之分别打印 10 和 20。</a></li><li><a href="#%E7%AC%AC-35-%E9%A2%98%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E8%A7%84%E5%88%99">第 35 题：浏览器缓存读取规则</a></li><li><a href="#%E7%AC%AC-36-%E9%A2%98%E4%BD%BF%E7%94%A8%E8%BF%AD%E4%BB%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0-flatten-%E5%87%BD%E6%95%B0">第 36 题：使用迭代的方式实现 flatten 函数。</a></li><li><a href="#%E7%AC%AC-37-%E9%A2%98%E4%B8%BA%E4%BB%80%E4%B9%88-vuex-%E7%9A%84-mutation-%E5%92%8C-redux-%E7%9A%84-reducer-%E4%B8%AD%E4%B8%8D%E8%83%BD%E5%81%9A%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C">第 37 题：为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？</a></li><li><a href="#%E7%AC%AC-38-%E9%A2%98%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E4%B8%AD-a-%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E6%89%93%E5%8D%B0-1">第 38 题：下面代码中 a 在什么情况下会打印 1？</a></li><li><a href="#%E7%AC%AC-39-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-bfc-%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8">第 39 题：介绍下 BFC 及其应用。</a></li><li><a href="#%E7%AC%AC-40-%E9%A2%98%E5%9C%A8-vue-%E4%B8%AD%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B8%BA%E4%BD%95%E4%B8%8D%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E7%9A%84-prop">第 40 题：在 Vue 中，子组件为何不可以修改父组件传递的 Prop</a></li><li><a href="#%E7%AC%AC-41-%E9%A2%98%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88">第 41 题：下面代码输出什么</a></li><li><a href="#%E7%AC%AC-42-%E9%A2%98%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-sleep-%E5%87%BD%E6%95%B0">第 42 题：实现一个 sleep 函数</a></li><li><a href="#%E7%AC%AC-43-%E9%A2%98%E4%BD%BF%E7%94%A8-sort-%E5%AF%B9%E6%95%B0%E7%BB%84-3-15-8-29-102-22-%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">第 43 题：使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果</a></li><li><a href="#%E7%AC%AC-44-%E9%A2%98%E4%BB%8B%E7%BB%8D-https-%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B">第 44 题：介绍 HTTPS 握手过程</a></li><li><a href="#%E7%AC%AC-45-%E9%A2%98https-%E6%8F%A1%E6%89%8B%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E8%AF%81%E4%B9%A6%E7%9A%84%E5%90%88%E6%B3%95%E6%80%A7">第 45 题：HTTPS 握手过程中，客户端如何验证证书的合法性</a></li><li><a href="#%E7%AC%AC-46-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E5%B9%B6%E8%A7%A3%E9%87%8A%E4%B8%BA%E4%BB%80%E4%B9%88">第 46 题：输出以下代码执行的结果并解释为什么</a></li><li><a href="#%E7%AC%AC-47-%E9%A2%98%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%E5%92%8C-vuex-%E6%98%AF%E5%90%A6%E5%86%B2%E7%AA%81">第 47 题：双向绑定和 vuex 是否冲突</a></li><li><a href="#%E7%AC%AC-48-%E9%A2%98call-%E5%92%8C-apply-%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E5%93%AA%E4%B8%AA%E6%80%A7%E8%83%BD%E6%9B%B4%E5%A5%BD%E4%B8%80%E4%BA%9B">第 48 题：call 和 apply 的区别是什么，哪个性能更好一些</a></li><li><a href="#%E7%AC%AC-49-%E9%A2%98%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%9A%E5%B8%B8%E5%9C%A8%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE%E5%9F%8B%E7%82%B9%E8%AF%B7%E6%B1%82%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF-1x1-%E5%83%8F%E7%B4%A0%E7%9A%84%E9%80%8F%E6%98%8E-gif-%E5%9B%BE%E7%89%87">第 49 题：为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</a></li><li><a href="#%E7%AC%AC-50-%E9%A2%98%E5%AE%9E%E7%8E%B0-5add3minus2-%E5%8A%9F%E8%83%BD">第 50 题：实现 (5).add(3).minus(2) 功能。</a></li><li><a href="#%E7%AC%AC-51-%E9%A2%98vue-%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%AD-objectdefineproperty-%E6%9C%89%E4%BB%80%E4%B9%88%E7%BC%BA%E9%99%B7">第 51 题：Vue 的响应式原理中 Object.defineProperty 有什么缺陷？</a></li><li><a href="#%E7%AC%AC-52-%E9%A2%98%E6%80%8E%E4%B9%88%E8%AE%A9%E4%B8%80%E4%B8%AA-div-%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD">第 52 题：怎么让一个 div 水平垂直居中</a></li><li><a href="#%E7%AC%AC-53-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B9%B6%E8%A7%A3%E9%87%8A%E4%B8%BA%E4%BB%80%E4%B9%88">第 53 题：输出以下代码的执行结果并解释为什么</a></li><li><a href="#%E7%AC%AC-54-%E9%A2%98%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%98%AF%E5%A4%9A%E5%B0%91-%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%A6%82%E4%BD%95%E6%94%B9%E8%BF%9B">第 54 题：冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？</a></li><li><a href="#%E7%AC%AC-55-%E9%A2%98%E6%9F%90%E5%85%AC%E5%8F%B8-1-%E5%88%B0-12-%E6%9C%88%E4%BB%BD%E7%9A%84%E9%94%80%E5%94%AE%E9%A2%9D%E5%AD%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E9%87%8C%E9%9D%A2">第 55 题：某公司 1 到 12 月份的销售额存在一个对象里面</a></li><li><a href="#%E7%AC%AC-56-%E9%A2%98%E8%A6%81%E6%B1%82%E8%AE%BE%E8%AE%A1-lazyman-%E7%B1%BB%E5%AE%9E%E7%8E%B0%E4%BB%A5%E4%B8%8B%E5%8A%9F%E8%83%BD">第 56 题：要求设计 LazyMan 类，实现以下功能。</a></li><li><a href="#%E7%AC%AC-57-%E9%A2%98%E5%88%86%E6%9E%90%E6%AF%94%E8%BE%83-opacity-0visibility-hiddendisplay-none-%E4%BC%98%E5%8A%A3%E5%92%8C%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF">第 57 题：分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。</a></li><li><a href="#%E7%AC%AC-58-%E9%A2%98%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0function%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0function%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8-new-%E7%94%9F%E6%88%90%E5%AE%9E%E4%BE%8B%E9%82%A3%E4%B9%88%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E5%90%97%E4%B8%BA%E4%BB%80%E4%B9%88">第 58 题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？</a></li><li><a href="#%E7%AC%AC-59-%E9%A2%98%E7%BB%99%E5%AE%9A%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%86%99%E4%B8%80%E4%B8%AA%E6%96%B9%E6%B3%95%E6%9D%A5%E8%AE%A1%E7%AE%97%E5%AE%83%E4%BB%AC%E7%9A%84%E4%BA%A4%E9%9B%86">第 59 题：给定两个数组，写一个方法来计算它们的交集。</a></li><li><a href="#%E7%AC%AC-60-%E9%A2%98%E5%B7%B2%E7%9F%A5%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E6%89%8D%E8%83%BD%E8%AE%A9%E5%9B%BE%E7%89%87%E5%AE%BD%E5%BA%A6%E4%B8%BA-300px-%E6%B3%A8%E6%84%8F%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E4%B8%8D%E5%8F%AF%E4%BF%AE%E6%94%B9">第 60 题：已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。</a></li><li><a href="#%E7%AC%AC-61-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0-token-%E5%8A%A0%E5%AF%86">第 61 题：介绍下如何实现 token 加密</a></li><li><a href="#%E7%AC%AC-62-%E9%A2%98redux-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8A%8A-reducer-%E8%AE%BE%E8%AE%A1%E6%88%90%E7%BA%AF%E5%87%BD%E6%95%B0">第 62 题：redux 为什么要把 reducer 设计成纯函数</a></li><li><a href="#%E7%AC%AC-63-%E9%A2%98%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E6%97%A0%E7%BC%9D%E8%BD%AE%E6%92%AD">第 63 题：如何设计实现无缝轮播</a></li><li><a href="#%E7%AC%AC-64-%E9%A2%98%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-promisefinally">第 64 题：模拟实现一个 Promise.finally</a></li><li><a href="#%E7%AC%AC-65-%E9%A2%98-abcd-%E5%92%8C-abcd%E5%93%AA%E4%B8%AA%E6%80%A7%E8%83%BD%E6%9B%B4%E9%AB%98">第 65 题： <code>a.b.c.d</code> 和 <code>a[&#39;b&#39;][&#39;c&#39;][&#39;d&#39;]</code>，哪个性能更高？</a></li><li><a href="#%E7%AC%AC-66-%E9%A2%98es6-%E4%BB%A3%E7%A0%81%E8%BD%AC%E6%88%90-es5-%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%E6%98%AF%E4%BB%80%E4%B9%88">第 66 题：ES6 代码转成 ES5 代码的实现思路是什么</a></li><li><a href="#%E7%AC%AC-67-%E9%A2%98%E6%95%B0%E7%BB%84%E7%BC%96%E7%A8%8B%E9%A2%98">第 67 题：数组编程题</a></li><li><a href="#%E7%AC%AC-68-%E9%A2%98-%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF-retina-%E5%B1%8F-1px-%E5%83%8F%E7%B4%A0%E9%97%AE%E9%A2%98">第 68 题： 如何解决移动端 Retina 屏 1px 像素问题</a></li><li><a href="#%E7%AC%AC-69-%E9%A2%98-%E5%A6%82%E4%BD%95%E6%8A%8A%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E5%8F%96%E5%8F%8D%E5%A4%A7%E5%86%99%E5%8F%98%E5%B0%8F%E5%86%99%E5%B0%8F%E5%86%99%E5%8F%98%E5%A4%A7%E5%86%99%E4%BE%8B%E5%A6%82-abc-%E5%8F%98%E6%88%90-abc-">第 69 题： 如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’ 。</a></li><li><a href="#%E7%AC%AC-70-%E9%A2%98-%E4%BB%8B%E7%BB%8D%E4%B8%8B-webpack-%E7%83%AD%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%9C%A8%E4%B8%8D%E5%88%B7%E6%96%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E6%8F%90%E4%B8%8B%E6%9B%B4%E6%96%B0%E9%A1%B5%E9%9D%A2%E7%9A%84">第 70 题： 介绍下 webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的</a></li><li><a href="#%E7%AC%AC-71-%E9%A2%98-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E4%BB%8E%E9%95%BF%E5%BA%A6%E4%B8%BA-n-%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2-s-%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%AD%97%E7%AC%A6%E4%B8%B2-tt-%E7%9A%84%E9%95%BF%E5%BA%A6%E6%98%AF-m%E8%8B%A5%E5%AD%98%E5%9C%A8%E8%BF%94%E5%9B%9E%E6%89%80%E5%9C%A8%E4%BD%8D%E7%BD%AE">第 71 题： 实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。</a></li><li><a href="#%E7%AC%AC-72-%E9%A2%98-%E4%B8%BA%E4%BB%80%E4%B9%88%E6%99%AE%E9%80%9A-for-%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%80%A7%E8%83%BD%E8%BF%9C%E8%BF%9C%E9%AB%98%E4%BA%8E-foreach-%E7%9A%84%E6%80%A7%E8%83%BD%E8%AF%B7%E8%A7%A3%E9%87%8A%E5%85%B6%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9B%A0">第 72 题： 为什么普通 <code>for</code> 循环的性能远远高于 <code>forEach</code> 的性能，请解释其中的原因。</a></li><li><a href="#%E7%AC%AC-73-%E9%A2%98-%E4%BB%8B%E7%BB%8D%E4%B8%8B-bfcifcgfc-%E5%92%8C-ffc">第 73 题： 介绍下 BFC、IFC、GFC 和 FFC</a></li><li><a href="#%E7%AC%AC-74-%E9%A2%98-%E4%BD%BF%E7%94%A8-javascript-proxy-%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A">第 74 题： 使用 JavaScript Proxy 实现简单的数据绑定</a></li><li><a href="#%E7%AC%AC-75-%E9%A2%98%E6%95%B0%E7%BB%84%E9%87%8C%E9%9D%A2%E6%9C%8910%E4%B8%87%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%8F%96%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E5%92%8C%E7%AC%AC10%E4%B8%87%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%97%B6%E9%97%B4%E7%9B%B8%E5%B7%AE%E5%A4%9A%E5%B0%91">第 75 题：数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少</a></li><li><a href="#%E7%AC%AC-76-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C">第 76 题：输出以下代码运行结果</a></li><li><a href="#%E7%AC%AC-77-%E9%A2%98%E7%AE%97%E6%B3%95%E9%A2%98%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84">第 77 题：算法题「旋转数组」</a></li><li><a href="#%E7%AC%AC-78-%E9%A2%98vue-%E7%9A%84%E7%88%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%AD%90%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E6%98%AF%E4%BB%80%E4%B9%88">第 78 题：Vue 的父组件和子组件生命周期钩子执行顺序是什么</a></li><li><a href="#%E7%AC%AC-79-%E9%A2%98input-%E6%90%9C%E7%B4%A2%E5%A6%82%E4%BD%95%E9%98%B2%E6%8A%96%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%B8%AD%E6%96%87%E8%BE%93%E5%85%A5">第 79 题：input 搜索如何防抖，如何处理中文输入</a></li><li><a href="#%E7%AC%AC-80-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-promiseall-%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0%E5%8F%8A%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">第 80 题：介绍下 Promise.all 使用、原理实现及错误处理</a></li><li><a href="#%E7%AC%AC-81-%E9%A2%98%E6%89%93%E5%8D%B0%E5%87%BA-1---10000-%E4%B9%8B%E9%97%B4%E7%9A%84%E6%89%80%E6%9C%89%E5%AF%B9%E7%A7%B0%E6%95%B0">第 81 题：打印出 1 - 10000 之间的所有对称数</a></li><li><a href="#%E7%AC%AC-82-%E9%A2%98%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E9%A2%98%E4%B9%8B%E7%A7%BB%E5%8A%A8%E9%9B%B6">第 82 题：周一算法题之「移动零」</a></li><li><a href="#%E7%AC%AC-83-%E9%A2%98varlet-%E5%92%8C-const-%E5%8C%BA%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88">第 83 题：var、let 和 const 区别的实现原理是什么</a></li><li><a href="#%E7%AC%AC-84-%E9%A2%98%E8%AF%B7%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-add-%E5%87%BD%E6%95%B0%E6%BB%A1%E8%B6%B3%E4%BB%A5%E4%B8%8B%E5%8A%9F%E8%83%BD">第 84 题：请实现一个 add 函数，满足以下功能。</a></li><li><a href="#%E7%AC%AC-85-%E9%A2%98react-router-%E9%87%8C%E7%9A%84-link-%E6%A0%87%E7%AD%BE%E5%92%8C-a-%E6%A0%87%E7%AD%BE%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">第 85 题：react-router 里的 <code>&lt;Link&gt;</code> 标签和 <code>&lt;a&gt;</code> 标签有什么区别</a></li><li><a href="#%E7%AC%AC-86-%E9%A2%98%E5%91%A8%E4%B8%80%E7%AE%97%E6%B3%95%E9%A2%98%E4%B9%8B%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C">第 86 题：周一算法题之「两数之和」</a></li><li><a href="#%E7%AC%AC-87-%E9%A2%98%E5%9C%A8%E8%BE%93%E5%85%A5%E6%A1%86%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%BE%93%E5%85%A5%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%BD%91%E5%9D%80">第 87 题：在输入框中如何判断输入的是一个正确的网址。</a></li><li><a href="#%E7%AC%AC-88-%E9%A2%98%E5%AE%9E%E7%8E%B0-convert-%E6%96%B9%E6%B3%95%E6%8A%8A%E5%8E%9F%E5%A7%8B-list-%E8%BD%AC%E6%8D%A2%E6%88%90%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E8%A6%81%E6%B1%82%E5%B0%BD%E5%8F%AF%E8%83%BD%E9%99%8D%E4%BD%8E%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6">第 88 题：实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度</a></li><li><a href="#%E7%AC%AC-89-%E9%A2%98%E8%AE%BE%E8%AE%A1%E5%B9%B6%E5%AE%9E%E7%8E%B0-promiserace">第 89 题：设计并实现 Promise.race()</a></li><li><a href="#%E7%AC%AC-90-%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%A8%A1%E7%B3%8A%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE%E6%98%BE%E7%A4%BA">第 90 题：实现模糊搜索结果的关键词高亮显示</a></li><li><a href="#%E7%AC%AC-91-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-https-%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">第 91 题：介绍下 HTTPS 中间人攻击</a></li><li><a href="#%E7%AC%AC-92-%E9%A2%98%E5%B7%B2%E7%9F%A5%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0-fn-%E6%89%BE%E5%87%BA%E9%93%BE%E6%9D%A1%E4%B8%AD%E6%89%80%E6%9C%89%E7%9A%84%E7%88%B6%E7%BA%A7-id">第 92 题：已知数据格式，实现一个函数 fn 找出链条中所有的父级 id</a></li><li><a href="#%E7%AC%AC-93-%E9%A2%98%E7%BB%99%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%A4%A7%E5%B0%8F%E4%B8%BA-m-%E5%92%8C-n-%E7%9A%84%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84-nums1-%E5%92%8C-nums2%E8%AF%B7%E6%89%BE%E5%87%BA%E8%BF%99%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%E8%A6%81%E6%B1%82%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA-ologmn">第 93 题：给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log(m+n))。</a></li><li><a href="#%E7%AC%AC-94-%E9%A2%98vue-%E5%9C%A8-v-for-%E6%97%B6%E7%BB%99%E6%AF%8F%E9%A1%B9%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E9%9C%80%E8%A6%81%E7%94%A8%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%90%97%E4%B8%BA%E4%BB%80%E4%B9%88">第 94 题：vue 在 v-for 时给每项元素绑定事件需要用事件代理吗？为什么？</a></li><li><a href="#%E7%AC%AC-95-%E9%A2%98%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%B9%B6%E8%80%83%E8%99%91%E5%AF%B9%E8%B1%A1%E7%9B%B8%E4%BA%92%E5%BC%95%E7%94%A8%E4%BB%A5%E5%8F%8A-symbol-%E6%8B%B7%E8%B4%9D%E7%9A%84%E6%83%85%E5%86%B5">第 95 题：模拟实现一个深拷贝，并考虑对象相互引用以及 Symbol 拷贝的情况</a></li><li><a href="#%E7%AC%AC-96-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF%E5%92%8C%E6%96%B9%E6%B3%95">第 96 题：介绍下前端加密的常见场景和方法</a></li><li><a href="#%E7%AC%AC-97-%E9%A2%98react-%E5%92%8C-vue-%E7%9A%84-diff-%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%8E-on%5E3-%E4%BC%98%E5%8C%96%E5%88%B0-on-%E9%82%A3%E4%B9%88-on%5E3-%E5%92%8C-on-%E6%98%AF%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9D%A5%E7%9A%84">第 97 题：React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？</a></li><li><a href="#%E7%AC%AC-98-%E9%A2%98%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C">第 98 题：写出如下代码的打印结果</a></li><li><a href="#%E7%AC%AC-99-%E9%A2%98%E7%BC%96%E7%A8%8B%E7%AE%97%E6%B3%95%E9%A2%98">第 99 题：编程算法题</a></li><li><a href="#%E7%AC%AC-100-%E9%A2%98%E8%AF%B7%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C">第 100 题：请写出如下代码的打印结果</a></li><li><a href="#%E7%AC%AC-101-%E9%A2%98%E4%BF%AE%E6%94%B9%E4%BB%A5%E4%B8%8B-print-%E5%87%BD%E6%95%B0%E4%BD%BF%E4%B9%8B%E8%BE%93%E5%87%BA-0-%E5%88%B0-99%E6%88%96%E8%80%85-99-%E5%88%B0-0">第 101 题：修改以下 print 函数，使之输出 0 到 99，或者 99 到 0</a></li><li><a href="#%E7%AC%AC-102-%E9%A2%98%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E8%BF%90%E7%AE%97%E7%AC%A6%E6%B1%82%E6%95%B4%E6%95%B0%E7%9A%847%E5%80%8D">第 102 题：不用加减乘除运算符，求整数的7倍</a></li><li><a href="#%E7%AC%AC-103-%E9%A2%98%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-localstorage">第 103 题：模拟实现一个 localStorage</a></li><li><a href="#%E7%AC%AC-104-%E9%A2%98%E6%A8%A1%E6%8B%9F-localstorage-%E6%97%B6%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%E5%8A%9F%E8%83%BD">第 104 题：模拟 localStorage 时如何实现过期时间功能</a></li><li><a href="#%E7%AC%AC-105-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98">第 105 题：编程题</a></li><li><a href="#%E7%AC%AC-106-%E9%A2%98%E5%88%86%E5%88%AB%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC">第 106 题：分别写出如下代码的返回值</a></li><li><a href="#%E7%AC%AC-107-%E9%A2%98%E8%80%83%E8%99%91%E5%88%B0%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E4%BB%8E%E4%B8%80%E4%B8%AA%E5%B7%A8%E5%A4%A7%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%AD%E9%9A%8F%E6%9C%BA%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E5%85%83%E7%B4%A0">第 107 题：考虑到性能问题，如何快速从一个巨大的数组中随机获取部分元素。</a></li><li><a href="#%E7%AC%AC-108-%E9%A2%98%E8%AF%B7%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C">第 108 题：请写出如下代码的打印结果</a></li><li><a href="#%E7%AC%AC-109-%E9%A2%98%E6%89%A9%E5%B1%95%E9%A2%98%E8%AF%B7%E5%86%99%E5%87%BA%E5%A6%82%E4%B8%8B%E4%BB%A3%E7%A0%81%E7%9A%84%E6%89%93%E5%8D%B0%E7%BB%93%E6%9E%9C">第 109 题：扩展题，请写出如下代码的打印结果</a></li><li><a href="#%E7%AC%AC-110-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E8%AF%B7%E5%86%99%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E5%AE%8C%E6%88%90%E4%BB%A5%E4%B8%8B%E5%8A%9F%E8%83%BD">第 110 题：编程题，请写一个函数，完成以下功能</a></li><li><a href="#%E7%AC%AC-111-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E5%86%99%E4%B8%AA%E7%A8%8B%E5%BA%8F%E6%8A%8A-entry-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%A6%82%E4%B8%8B%E5%AF%B9%E8%B1%A1">第 111 题：编程题，写个程序把 entry 转换成如下对象</a></li><li><a href="#%E7%AC%AC-112-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E5%86%99%E4%B8%AA%E7%A8%8B%E5%BA%8F%E6%8A%8A-entry-%E8%BD%AC%E6%8D%A2%E6%88%90%E5%A6%82%E4%B8%8B%E5%AF%B9%E8%B1%A1%E8%B7%9F%E6%98%A8%E6%97%A5%E9%A2%98%E7%9B%AE%E7%9B%B8%E5%8F%8D">第 112 题：编程题，写个程序把 entry 转换成如下对象（跟昨日题目相反）</a></li><li><a href="#%E7%AC%AC-113-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E6%A0%B9%E6%8D%AE%E4%BB%A5%E4%B8%8B%E8%A6%81%E6%B1%82%E5%86%99%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E5%87%BD%E6%95%B0%E8%98%91%E8%8F%87%E8%A1%97">第 113 题：编程题，根据以下要求，写一个数组去重函数（蘑菇街）</a></li><li><a href="#%E7%AC%AC-114-%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E6%89%BE%E5%87%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E8%BF%9E%E7%BB%AD%E5%87%BA%E7%8E%B0%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%97%E7%AC%A6%E5%92%8C%E4%B8%AA%E6%95%B0%E8%98%91%E8%8F%87%E8%A1%97">第 114 题：编程题，找出字符串中连续出现最多的字符和个数（蘑菇街）</a></li><li><a href="#%E7%AC%AC-115-%E9%A2%98%E5%86%99%E4%B8%80%E4%B8%AA%E5%8D%95%E5%90%91%E9%93%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84-js-%E5%AE%9E%E7%8E%B0%E5%B9%B6%E6%A0%87%E6%B3%A8%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%B0%B4%E6%BB%B4%E7%AD%B9">第 115 题：写一个单向链数据结构的 js 实现并标注复杂度（水滴筹）</a></li><li><a href="#%E7%AC%AC-116-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C">第 116 题：输出以下代码运行结果</a></li><li><a href="#%E7%AC%AC-117-%E9%A2%98%E4%BB%8B%E7%BB%8D%E4%B8%8B-http101120-%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8C%BA%E5%88%AB">第 117 题：介绍下 http1.0、1.1、2.0 协议的区别？</a></li><li><a href="#%E7%AC%AC-118-%E9%A2%98vue-%E6%B8%B2%E6%9F%93%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%97%B6%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E4%BC%98%E5%8C%96">第 118 题：vue 渲染大量数据时应该怎么优化？</a></li><li><a href="#%E7%AC%AC-119-%E9%A2%98vue-%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E9%A6%96%E9%A1%B5%E7%9A%84%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6vue-%E9%A6%96%E9%A1%B5%E7%99%BD%E5%B1%8F%E6%98%AF%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%E5%BC%95%E8%B5%B7%E7%9A%84%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%91%A2">第 119 题：vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？</a></li><li><a href="#%E7%AC%AC-120-%E9%A2%98%E4%B8%BA%E4%BB%80%E4%B9%88-for-%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E9%A1%BA%E5%BA%8F%E4%BC%9A%E5%BD%B1%E5%93%8D%E6%80%A7%E8%83%BD">第 120 题：为什么 for 循环嵌套顺序会影响性能？</a></li><li><a href="#%E7%AC%AC-121-%E9%A2%98%E7%BB%9F%E8%AE%A1-1--n-%E6%95%B4%E6%95%B0%E4%B8%AD%E5%87%BA%E7%8E%B0-1-%E7%9A%84%E6%AC%A1%E6%95%B0">第 121 题：统计 1 ~ n 整数中出现 1 的次数。</a></li><li><a href="#%E7%AC%AC-122-%E9%A2%98webpack-%E6%89%93%E5%8C%85-vue-%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E5%8A%9E">第 122 题：webpack 打包 vue 速度太慢怎么办？</a></li><li><a href="#%E7%AC%AC-123-%E9%A2%98vue-%E6%98%AF%E5%A6%82%E4%BD%95%E5%AF%B9%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%8F%98%E5%BC%82%E7%9A%84%E4%BE%8B%E5%A6%82-pushpopsplice-%E7%AD%89%E6%96%B9%E6%B3%95">第 123 题：vue 是如何对数组方法进行变异的？例如 push、pop、splice 等方法</a></li><li><a href="#%E7%AC%AC-124-%E9%A2%98%E6%B0%B8%E4%B9%85%E6%80%A7%E9%87%8D%E5%AE%9A%E5%90%91301%E5%92%8C%E4%B8%B4%E6%97%B6%E6%80%A7%E9%87%8D%E5%AE%9A%E5%90%91302%E5%AF%B9-seo-%E6%9C%89%E4%BB%80%E4%B9%88%E5%BD%B1%E5%93%8D">第 124 题：永久性重定向（301）和临时性重定向（302）对 SEO 有什么影响</a></li><li><a href="#%E7%AC%AC-125-%E9%A2%98%E7%AE%97%E6%B3%95%E9%A2%98">第 125 题：算法题</a></li><li><a href="#%E7%AC%AC-126-%E9%A2%98%E6%89%91%E5%85%8B%E7%89%8C%E9%97%AE%E9%A2%98">第 126 题：扑克牌问题</a></li><li><a href="#%E7%AC%AC-127-%E9%A2%98%E5%A6%82%E4%BD%95%E7%94%A8-css-%E6%88%96-js-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E7%9C%81%E7%95%A5%E6%95%88%E6%9E%9C%E8%80%83%E8%99%91%E5%85%BC%E5%AE%B9%E6%80%A7">第 127 题：如何用 css 或 js 实现多行文本溢出省略效果，考虑兼容性</a></li><li><a href="#%E7%AC%AC-128-%E9%A2%98http-%E7%8A%B6%E6%80%81%E7%A0%81-301-%E5%92%8C-302-%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88">第 128 题：Http 状态码 301 和 302 的应用场景分别是什么</a></li><li><a href="#%E7%AC%AC-129-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C">第 129 题：输出以下代码执行结果</a></li><li><a href="#%E7%AC%AC-130-%E9%A2%98%E8%BE%93%E5%87%BA%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%A4%A7%E8%87%B4%E6%97%B6%E9%97%B4%E5%B0%B1%E5%A5%BD%E4%B8%8D%E5%90%8C%E4%BA%8E%E4%B8%8A%E9%A2%98">第 130 题：输出以下代码执行结果，大致时间就好（不同于上题）</a></li><li><a href="#%E7%AC%AC-131-%E9%A2%98%E6%8E%A5%E5%8F%A3%E5%A6%82%E4%BD%95%E9%98%B2%E5%88%B7">第 131 题：接口如何防刷</a></li><li><a href="#%E7%AC%AC-132-%E9%A2%98%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-dialog-%E7%B1%BBdialog%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA-dialog-%E5%AF%B9%E8%AF%9D%E6%A1%86%E5%AF%B9%E8%AF%9D%E6%A1%86%E6%94%AF%E6%8C%81%E5%8F%AF%E6%8B%96%E6%8B%BD%E8%85%BE%E8%AE%AF">第 132 题：实现一个 Dialog 类，Dialog可以创建 dialog 对话框，对话框支持可拖拽（腾讯）</a></li><li><a href="#%E7%AC%AC-133-%E9%A2%98%E7%94%A8-settimeout-%E5%AE%9E%E7%8E%B0-setinterval%E9%98%90%E8%BF%B0%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%95%88%E6%9E%9C%E4%B8%8E-setinterval-%E7%9A%84%E5%B7%AE%E5%BC%82">第 133 题：用 setTimeout 实现 setInterval，阐述实现的效果与 setInterval 的差异</a></li><li><a href="#%E7%AC%AC-134-%E9%A2%98%E6%B1%82%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E4%B8%AD%E9%97%B4%E7%9A%84%E6%9C%89%E6%95%88%E6%97%A5%E6%9C%9F">第 134 题：求两个日期中间的有效日期</a></li><li><a href="#%E7%AC%AC-135-%E9%A2%98%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%9B%E5%A4%A7">第 135 题：算法题（盛大）</a></li><li><a href="#%E7%AC%AC-136-%E9%A2%98%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%AA%A8%E6%9E%B6%E5%B1%8F%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%9A%84%E6%80%9D%E8%B7%AF">第 136 题：如何实现骨架屏，说说你的思路</a></li></ul></li></ul><!-- END doctoc generated TOC please keep comment here to allow auto update --><h2 id="前端面试题及答案汇总"><a href="#前端面试题及答案汇总" class="headerlink" title="前端面试题及答案汇总"></a>前端面试题及答案汇总</h2><h3 id="第-1-题：写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#第-1-题：写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="第 1 题：写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>第 1 题：写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h3><p>公司：滴滴、饿了么</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/1">第 1 题</a></p><br/><h3 id="第-2-题：-39-1-39-39-2-39-39-3-39-map-parseInt-what-amp-why"><a href="#第-2-题：-39-1-39-39-2-39-39-3-39-map-parseInt-what-amp-why" class="headerlink" title="第 2 题：[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt) what &amp; why ?"></a>第 2 题：<code>[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;].map(parseInt)</code> what &amp; why ?</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/4">第 2 题</a></p><br/><h3 id="第-3-题：什么是防抖和节流？有什么区别？如何实现？"><a href="#第-3-题：什么是防抖和节流？有什么区别？如何实现？" class="headerlink" title="第 3 题：什么是防抖和节流？有什么区别？如何实现？"></a>第 3 题：什么是防抖和节流？有什么区别？如何实现？</h3><p>公司：挖财</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5">第 3 题</a></p><br/><h3 id="第-4-题：介绍下-Set、Map、WeakSet-和-WeakMap-的区别？"><a href="#第-4-题：介绍下-Set、Map、WeakSet-和-WeakMap-的区别？" class="headerlink" title="第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？"></a>第 4 题：介绍下 Set、Map、WeakSet 和 WeakMap 的区别？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/6">第 4 题</a></p><br/><h3 id="第-5-题：介绍下深度优先遍历和广度优先遍历，如何实现？"><a href="#第-5-题：介绍下深度优先遍历和广度优先遍历，如何实现？" class="headerlink" title="第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？"></a>第 5 题：介绍下深度优先遍历和广度优先遍历，如何实现？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/9">第 5 题</a></p><br/><h3 id="第-6-题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？"><a href="#第-6-题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？" class="headerlink" title="第 6 题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？"></a>第 6 题：请分别用深度优先思想和广度优先思想实现一个拷贝函数？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/10">第 6 题</a></p><br/><h3 id="第-7-题：ES5-x2F-ES6-的继承除了写法以外还有什么区别？"><a href="#第-7-题：ES5-x2F-ES6-的继承除了写法以外还有什么区别？" class="headerlink" title="第 7 题：ES5&#x2F;ES6 的继承除了写法以外还有什么区别？"></a>第 7 题：ES5&#x2F;ES6 的继承除了写法以外还有什么区别？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/20">第 7 题</a></p><br/><h3 id="第-8-题：setTimeout、Promise、Async-x2F-Await-的区别"><a href="#第-8-题：setTimeout、Promise、Async-x2F-Await-的区别" class="headerlink" title="第 8 题：setTimeout、Promise、Async&#x2F;Await 的区别"></a>第 8 题：setTimeout、Promise、Async&#x2F;Await 的区别</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/33">第 8 题</a></p><br/><h3 id="第-9-题：Async-x2F-Await-如何通过同步的方式实现异步"><a href="#第-9-题：Async-x2F-Await-如何通过同步的方式实现异步" class="headerlink" title="第 9 题：Async&#x2F;Await 如何通过同步的方式实现异步"></a>第 9 题：Async&#x2F;Await 如何通过同步的方式实现异步</h3><p>公司：头条、微医</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/156">第 9 题</a></p><br/><h3 id="第-10-题：异步笔试题"><a href="#第-10-题：异步笔试题" class="headerlink" title="第 10 题：异步笔试题"></a>第 10 题：异步笔试题</h3><blockquote><p>请写出下面代码的运行结果</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7">第 10 题</a></p><p>公司：头条</p><br/><h3 id="第-11-题：算法手写题"><a href="#第-11-题：算法手写题" class="headerlink" title="第 11 题：算法手写题"></a>第 11 题：算法手写题</h3><blockquote><p>已知如下数组：</p><p>var arr &#x3D; [ [1, 2, 2], [3, 4, 5, 5], [6, 7, 8, 9, [11, 12, [12, 13, [14] ] ] ], 10];</p><p>编写一个程序将数组扁平化去并除其中重复部分数据，最终得到一个升序且不重复的数组</p></blockquote><p>公司：携程</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/8">第 11 题</a></p><br/><h3 id="第-12-题：JS-异步解决方案的发展历程以及优缺点。"><a href="#第-12-题：JS-异步解决方案的发展历程以及优缺点。" class="headerlink" title="第 12 题：JS 异步解决方案的发展历程以及优缺点。"></a>第 12 题：JS 异步解决方案的发展历程以及优缺点。</h3><p>公司：滴滴、挖财、微医、海康</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/11">第 12 题</a></p><br/><h3 id="第-13-题：Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？"><a href="#第-13-题：Promise-构造函数是同步执行还是异步执行，那么-then-方法呢？" class="headerlink" title="第 13 题：Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？"></a>第 13 题：Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？</h3><p>公司：微医</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/19">第 13 题</a></p><br/><h3 id="第-14-题：情人节福利题，如何实现一个-new"><a href="#第-14-题：情人节福利题，如何实现一个-new" class="headerlink" title="第 14 题：情人节福利题，如何实现一个 new"></a>第 14 题：情人节福利题，如何实现一个 new</h3><p>公司：兑吧</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/12">第 14 题</a></p><br/><h3 id="第-15-题：简单讲解一下http2的多路复用"><a href="#第-15-题：简单讲解一下http2的多路复用" class="headerlink" title="第 15 题：简单讲解一下http2的多路复用"></a>第 15 题：简单讲解一下http2的多路复用</h3><p>公司：网易</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/14">第 15 题</a></p><br/><h3 id="第-16-题：谈谈你对TCP三次握手和四次挥手的理解"><a href="#第-16-题：谈谈你对TCP三次握手和四次挥手的理解" class="headerlink" title="第 16 题：谈谈你对TCP三次握手和四次挥手的理解"></a>第 16 题：谈谈你对TCP三次握手和四次挥手的理解</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/15">第 16 题</a></p><br/><h3 id="第-17-题：A、B-机器正常连接后，B-机器突然重启，问-A-此时处于-TCP-什么状态"><a href="#第-17-题：A、B-机器正常连接后，B-机器突然重启，问-A-此时处于-TCP-什么状态" class="headerlink" title="第 17 题：A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态"></a>第 17 题：A、B 机器正常连接后，B 机器突然重启，问 A 此时处于 TCP 什么状态</h3><blockquote><p>如果A 与 B 建立了正常连接后，从未相互发过数据，这个时候 B 突然机器重启，问 A 此时处于 TCP 什么状态？如何消除服务器程序中的这个状态？（超纲题，了解即可）</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/21">第 17 题</a></p><br/><h3 id="第-18-题：React-中-setState-什么时候是同步的，什么时候是异步的？"><a href="#第-18-题：React-中-setState-什么时候是同步的，什么时候是异步的？" class="headerlink" title="第 18 题：React 中 setState 什么时候是同步的，什么时候是异步的？"></a>第 18 题：React 中 setState 什么时候是同步的，什么时候是异步的？</h3><p>公司：微医</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/17">第 18 题</a></p><br/><h3 id="第-19-题：React-setState-笔试题，下面的代码输出什么？"><a href="#第-19-题：React-setState-笔试题，下面的代码输出什么？" class="headerlink" title="第 19 题：React setState 笔试题，下面的代码输出什么？"></a>第 19 题：React setState 笔试题，下面的代码输出什么？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">val</span>: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);    <span class="comment">// 第 1 次 log</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);    <span class="comment">// 第 2 次 log</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);  <span class="comment">// 第 3 次 log</span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span> + <span class="number">1</span>&#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">val</span>);  <span class="comment">// 第 4 次 log</span></span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/18">第 19 题</a></p><br/><h3 id="第-20-题：介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？"><a href="#第-20-题：介绍下-npm-模块安装机制，为什么输入-npm-install-就可以自动安装对应的模块？" class="headerlink" title="第 20 题：介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？"></a>第 20 题：介绍下 npm 模块安装机制，为什么输入 npm install 就可以自动安装对应的模块？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/22">第 20 题</a></p><br/><h3 id="第-21-题：有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣"><a href="#第-21-题：有以下-3-个判断数组的方法，请分别介绍它们之间的区别和优劣" class="headerlink" title="第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣"></a>第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣</h3><blockquote><p>Object.prototype.toString.call() 、 instanceof 以及 Array.isArray() </p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/23">第 21 题</a></p><br/><h3 id="第-22-题：介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化"><a href="#第-22-题：介绍下重绘和回流（Repaint-amp-Reflow），以及如何进行优化" class="headerlink" title="第 22 题：介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化"></a>第 22 题：介绍下重绘和回流（Repaint &amp; Reflow），以及如何进行优化</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24">第 22 题</a></p><br/><h3 id="第-23-题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景"><a href="#第-23-题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景" class="headerlink" title="第 23 题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景"></a>第 23 题：介绍下观察者模式和订阅-发布模式的区别，各自适用于什么场景</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/25">第 23 题</a></p><br/><h3 id="第-24-题：聊聊-Redux-和-Vuex-的设计思想"><a href="#第-24-题：聊聊-Redux-和-Vuex-的设计思想" class="headerlink" title="第 24 题：聊聊 Redux 和 Vuex 的设计思想"></a>第 24 题：聊聊 Redux 和 Vuex 的设计思想</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/45">第 24 题</a></p><br/><h3 id="第-25-题：说说浏览器和-Node-事件循环的区别"><a href="#第-25-题：说说浏览器和-Node-事件循环的区别" class="headerlink" title="第 25 题：说说浏览器和 Node 事件循环的区别"></a>第 25 题：说说浏览器和 Node 事件循环的区别</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/26">第 25 题</a></p><br/> <h3 id="第-26-题：介绍模块化发展历程"><a href="#第-26-题：介绍模块化发展历程" class="headerlink" title="第 26 题：介绍模块化发展历程"></a>第 26 题：介绍模块化发展历程</h3><p>可从IIFE、AMD、CMD、CommonJS、UMD、webpack(require.ensure)、ES Module、<code>&lt;script type=&quot;module&quot;&gt;</code> 这几个角度考虑。</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/28">第 26 题</a></p><br/><h3 id="第-27-题：全局作用域中，用-const-和-let-声明的变量不在-window-上，那到底在哪里？如何去获取？。"><a href="#第-27-题：全局作用域中，用-const-和-let-声明的变量不在-window-上，那到底在哪里？如何去获取？。" class="headerlink" title="第 27 题：全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？。"></a>第 27 题：全局作用域中，用 const 和 let 声明的变量不在 window 上，那到底在哪里？如何去获取？。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/30">第 27 题</a></p><br/><h3 id="第-28-题：cookie-和-token-都存放在-header-中，为什么不会劫持-token？"><a href="#第-28-题：cookie-和-token-都存放在-header-中，为什么不会劫持-token？" class="headerlink" title="第 28 题：cookie 和 token 都存放在 header 中，为什么不会劫持 token？"></a>第 28 题：cookie 和 token 都存放在 header 中，为什么不会劫持 token？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/31">第 28 题</a></p><br/><h3 id="第-29-题：聊聊-Vue-的双向数据绑定，Model-如何改变-View，View-又是如何改变-Model-的"><a href="#第-29-题：聊聊-Vue-的双向数据绑定，Model-如何改变-View，View-又是如何改变-Model-的" class="headerlink" title="第 29 题：聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的"></a>第 29 题：聊聊 Vue 的双向数据绑定，Model 如何改变 View，View 又是如何改变 Model 的</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/34">第 29 题</a></p><br/><h3 id="第-30-题：两个数组合并成一个数组"><a href="#第-30-题：两个数组合并成一个数组" class="headerlink" title="第 30 题：两个数组合并成一个数组"></a>第 30 题：两个数组合并成一个数组</h3><p>请把两个数组 [‘A1’, ‘A2’, ‘B1’, ‘B2’, ‘C1’, ‘C2’, ‘D1’, ‘D2’] 和 [‘A’, ‘B’, ‘C’, ‘D’]，合并为 [‘A1’, ‘A2’, ‘A’, ‘B1’, ‘B2’, ‘B’, ‘C1’, ‘C2’, ‘C’, ‘D1’, ‘D2’, ‘D’]。</p><p>解析： <a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/39">第 30 题</a></p><br/><h3 id="第-31-题：改造下面的代码，使之输出0-9，写出你能想到的所有解法。"><a href="#第-31-题：改造下面的代码，使之输出0-9，写出你能想到的所有解法。" class="headerlink" title="第 31 题：改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。"></a>第 31 题：改造下面的代码，使之输出0 - 9，写出你能想到的所有解法。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/43">第 31 题</a></p><br/><h3 id="第-32-题：Virtual-DOM-真的比操作原生-DOM-快吗？谈谈你的想法。"><a href="#第-32-题：Virtual-DOM-真的比操作原生-DOM-快吗？谈谈你的想法。" class="headerlink" title="第 32 题：Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。"></a>第 32 题：Virtual DOM 真的比操作原生 DOM 快吗？谈谈你的想法。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/47">第 32 题</a></p><br/><h3 id="第-33-题：下面的代码打印什么内容，为什么？"><a href="#第-33-题：下面的代码打印什么内容，为什么？" class="headerlink" title="第 33 题：下面的代码打印什么内容，为什么？"></a>第 33 题：下面的代码打印什么内容，为什么？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/48">第 33 题</a></p><br/><h3 id="第-34-题：简单改造下面的代码，使之分别打印-10-和-20。"><a href="#第-34-题：简单改造下面的代码，使之分别打印-10-和-20。" class="headerlink" title="第 34 题：简单改造下面的代码，使之分别打印 10 和 20。"></a>第 34 题：简单改造下面的代码，使之分别打印 10 和 20。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>)&#123;</span><br><span class="line">    b = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/51">第 34 题</a></p><br/><h3 id="第-35-题：浏览器缓存读取规则"><a href="#第-35-题：浏览器缓存读取规则" class="headerlink" title="第 35 题：浏览器缓存读取规则"></a>第 35 题：浏览器缓存读取规则</h3><p>可以分成 Service Worker、Memory Cache、Disk Cache 和 Push Cache，那请求的时候 from memory cache 和 from disk cache 的依据是什么，哪些数据什么时候存放在 Memory Cache 和 Disk Cache中？</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/53">第 35 题</a></p><br/><h3 id="第-36-题：使用迭代的方式实现-flatten-函数。"><a href="#第-36-题：使用迭代的方式实现-flatten-函数。" class="headerlink" title="第 36 题：使用迭代的方式实现 flatten 函数。"></a>第 36 题：使用迭代的方式实现 flatten 函数。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/54">第 36 题</a></p><br/><h3 id="第-37-题：为什么-Vuex-的-mutation-和-Redux-的-reducer-中不能做异步操作？"><a href="#第-37-题：为什么-Vuex-的-mutation-和-Redux-的-reducer-中不能做异步操作？" class="headerlink" title="第 37 题：为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？"></a>第 37 题：为什么 Vuex 的 mutation 和 Redux 的 reducer 中不能做异步操作？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/65">第 37 题</a></p><br/><h3 id="第-38-题：下面代码中-a-在什么情况下会打印-1？"><a href="#第-38-题：下面代码中-a-在什么情况下会打印-1？" class="headerlink" title="第 38 题：下面代码中 a 在什么情况下会打印 1？"></a>第 38 题：下面代码中 a 在什么情况下会打印 1？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = ?;</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/57">第 38 题</a></p><p>公司：京东</p><br/><h3 id="第-39-题：介绍下-BFC-及其应用。"><a href="#第-39-题：介绍下-BFC-及其应用。" class="headerlink" title="第 39 题：介绍下 BFC 及其应用。"></a>第 39 题：介绍下 BFC 及其应用。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/59">第 39 题</a></p><br/><h3 id="第-40-题：在-Vue-中，子组件为何不可以修改父组件传递的-Prop"><a href="#第-40-题：在-Vue-中，子组件为何不可以修改父组件传递的-Prop" class="headerlink" title="第 40 题：在 Vue 中，子组件为何不可以修改父组件传递的 Prop"></a>第 40 题：在 Vue 中，子组件为何不可以修改父组件传递的 Prop</h3><p>如果修改了，Vue 是如何监控到属性的修改并给出警告的。</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/60">第 40 题</a></p><br/><h3 id="第-41-题：下面代码输出什么"><a href="#第-41-题：下面代码输出什么" class="headerlink" title="第 41 题：下面代码输出什么"></a>第 41 题：下面代码输出什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/61">第 41题</a></p><br/><h3 id="第-42-题：实现一个-sleep-函数"><a href="#第-42-题：实现一个-sleep-函数" class="headerlink" title="第 42 题：实现一个 sleep 函数"></a>第 42 题：实现一个 sleep 函数</h3><p>比如 sleep(1000) 意味着等待1000毫秒，可从 Promise、Generator、Async&#x2F;Await 等角度实现</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/63">第 42 题</a></p><br/><h3 id="第-43-题：使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果"><a href="#第-43-题：使用-sort-对数组-3-15-8-29-102-22-进行排序，输出结果" class="headerlink" title="第 43 题：使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果"></a>第 43 题：使用 sort() 对数组 [3, 15, 8, 29, 102, 22] 进行排序，输出结果</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/66">第 43 题</a></p><br/><h3 id="第-44-题：介绍-HTTPS-握手过程"><a href="#第-44-题：介绍-HTTPS-握手过程" class="headerlink" title="第 44 题：介绍 HTTPS 握手过程"></a>第 44 题：介绍 HTTPS 握手过程</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/70">第 44 题</a></p><br/><h3 id="第-45-题：HTTPS-握手过程中，客户端如何验证证书的合法性"><a href="#第-45-题：HTTPS-握手过程中，客户端如何验证证书的合法性" class="headerlink" title="第 45 题：HTTPS 握手过程中，客户端如何验证证书的合法性"></a>第 45 题：HTTPS 握手过程中，客户端如何验证证书的合法性</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/74">第 45 题</a></p><br/><h3 id="第-46-题：输出以下代码执行的结果并解释为什么"><a href="#第-46-题：输出以下代码执行的结果并解释为什么" class="headerlink" title="第 46 题：输出以下代码执行的结果并解释为什么"></a>第 46 题：输出以下代码执行的结果并解释为什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span>,</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">obj.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/76">第 46 题</a></p><br/><h3 id="第-47-题：双向绑定和-vuex-是否冲突"><a href="#第-47-题：双向绑定和-vuex-是否冲突" class="headerlink" title="第 47 题：双向绑定和 vuex 是否冲突"></a>第 47 题：双向绑定和 vuex 是否冲突</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/81">第 47 题</a></p><br/><h3 id="第-48-题：call-和-apply-的区别是什么，哪个性能更好一些"><a href="#第-48-题：call-和-apply-的区别是什么，哪个性能更好一些" class="headerlink" title="第 48 题：call 和 apply 的区别是什么，哪个性能更好一些"></a>第 48 题：call 和 apply 的区别是什么，哪个性能更好一些</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/84">第 48 题</a></p><br/><h3 id="第-49-题：为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？"><a href="#第-49-题：为什么通常在发送数据埋点请求的时候使用的是-1x1-像素的透明-gif-图片？" class="headerlink" title="第 49 题：为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？"></a>第 49 题：为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/87">第 49 题</a></p><br/><h3 id="第-50-题：实现-5-add-3-minus-2-功能。"><a href="#第-50-题：实现-5-add-3-minus-2-功能。" class="headerlink" title="第 50 题：实现 (5).add(3).minus(2) 功能。"></a>第 50 题：实现 (5).add(3).minus(2) 功能。</h3><blockquote><p>例： 5 + 3 - 2，结果为 6</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/88">第 50 题</a></p><p>公司：百度</p><br/><h3 id="第-51-题：Vue-的响应式原理中-Object-defineProperty-有什么缺陷？"><a href="#第-51-题：Vue-的响应式原理中-Object-defineProperty-有什么缺陷？" class="headerlink" title="第 51 题：Vue 的响应式原理中 Object.defineProperty 有什么缺陷？"></a>第 51 题：Vue 的响应式原理中 Object.defineProperty 有什么缺陷？</h3><p>为什么在 Vue3.0 采用了 Proxy，抛弃了 Object.defineProperty？</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/90">第 51 题</a></p><br/><h3 id="第-52-题：怎么让一个-div-水平垂直居中"><a href="#第-52-题：怎么让一个-div-水平垂直居中" class="headerlink" title="第 52 题：怎么让一个 div 水平垂直居中"></a>第 52 题：怎么让一个 div 水平垂直居中</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/92">第 52 题</a></p><br/><h3 id="第-53-题：输出以下代码的执行结果并解释为什么"><a href="#第-53-题：输出以下代码的执行结果并解释为什么" class="headerlink" title="第 53 题：输出以下代码的执行结果并解释为什么"></a>第 53 题：输出以下代码的执行结果并解释为什么</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.<span class="property">x</span> = a = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">x</span>)</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/93">第 53 题</a></p><br/><h3 id="第-54-题：冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？"><a href="#第-54-题：冒泡排序如何实现，时间复杂度是多少，-还可以如何改进？" class="headerlink" title="第 54 题：冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？"></a>第 54 题：冒泡排序如何实现，时间复杂度是多少， 还可以如何改进？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/94">第 54 题</a></p><br/><h3 id="第-55-题：某公司-1-到-12-月份的销售额存在一个对象里面"><a href="#第-55-题：某公司-1-到-12-月份的销售额存在一个对象里面" class="headerlink" title="第 55 题：某公司 1 到 12 月份的销售额存在一个对象里面"></a>第 55 题：某公司 1 到 12 月份的销售额存在一个对象里面</h3><p>如下：{1:222, 2:123, 5:888}，请把数据处理为如下结构：[222, 123, null, null, 888, null, null, null, null, null, null, null]。</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/96">第 55 题</a></p><br/><h3 id="第-56-题：要求设计-LazyMan-类，实现以下功能。"><a href="#第-56-题：要求设计-LazyMan-类，实现以下功能。" class="headerlink" title="第 56 题：要求设计 LazyMan 类，实现以下功能。"></a>第 56 题：要求设计 LazyMan 类，实现以下功能。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;dinner&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating diner</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">LazyMan</span>(<span class="string">&#x27;Tony&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;lunch&#x27;</span>).<span class="title function_">eat</span>(<span class="string">&#x27;dinner&#x27;</span>).<span class="title function_">sleepFirst</span>(<span class="number">5</span>).<span class="title function_">sleep</span>(<span class="number">10</span>).<span class="title function_">eat</span>(<span class="string">&#x27;junk food&#x27;</span>);</span><br><span class="line"><span class="comment">// Hi I am Tony</span></span><br><span class="line"><span class="comment">// 等待了5秒...</span></span><br><span class="line"><span class="comment">// I am eating lunch</span></span><br><span class="line"><span class="comment">// I am eating dinner</span></span><br><span class="line"><span class="comment">// 等待了10秒...</span></span><br><span class="line"><span class="comment">// I am eating junk food</span></span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/98">第 56 题</a></p><br/><h3 id="第-57-题：分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。"><a href="#第-57-题：分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。" class="headerlink" title="第 57 题：分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。"></a>第 57 题：分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/100">第 57 题</a></p><br/><h3 id="第-58-题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用-new-生成实例，那么箭头函数可以吗？为什么？"><a href="#第-58-题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用-new-生成实例，那么箭头函数可以吗？为什么？" class="headerlink" title="第 58 题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？"></a>第 58 题：箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用 new 生成实例，那么箭头函数可以吗？为什么？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/101">第 58 题</a></p><br/><h3 id="第-59-题：给定两个数组，写一个方法来计算它们的交集。"><a href="#第-59-题：给定两个数组，写一个方法来计算它们的交集。" class="headerlink" title="第 59 题：给定两个数组，写一个方法来计算它们的交集。"></a>第 59 题：给定两个数组，写一个方法来计算它们的交集。</h3><blockquote><p>例如：给定 nums1 &#x3D; [1, 2, 2, 1]，nums2 &#x3D; [2, 2]，返回 [2, 2]。</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/102">第 59 题</a></p><br/><h3 id="第-60-题：已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改。"><a href="#第-60-题：已知如下代码，如何修改才能让图片宽度为-300px-？注意下面代码不可修改。" class="headerlink" title="第 60 题：已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。"></a>第 60 题：已知如下代码，如何修改才能让图片宽度为 300px ？注意下面代码不可修改。</h3><blockquote><p><code>&lt;img src=&quot;1.jpg&quot; style=&quot;width:480px!important;”&gt;</code></p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/105">第 60 题</a></p><br/><h3 id="第-61-题：介绍下如何实现-token-加密"><a href="#第-61-题：介绍下如何实现-token-加密" class="headerlink" title="第 61 题：介绍下如何实现 token 加密"></a>第 61 题：介绍下如何实现 token 加密</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/106">第 61 题</a></p><br/><h3 id="第-62-题：redux-为什么要把-reducer-设计成纯函数"><a href="#第-62-题：redux-为什么要把-reducer-设计成纯函数" class="headerlink" title="第 62 题：redux 为什么要把 reducer 设计成纯函数"></a>第 62 题：redux 为什么要把 reducer 设计成纯函数</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/107">第 62 题</a></p><br/><h3 id="第-63-题：如何设计实现无缝轮播"><a href="#第-63-题：如何设计实现无缝轮播" class="headerlink" title="第 63 题：如何设计实现无缝轮播"></a>第 63 题：如何设计实现无缝轮播</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/108">第 63 题</a></p><br/><h3 id="第-64-题：模拟实现一个-Promise-finally"><a href="#第-64-题：模拟实现一个-Promise-finally" class="headerlink" title="第 64 题：模拟实现一个 Promise.finally"></a>第 64 题：模拟实现一个 Promise.finally</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/109">第 64 题</a></p><br/><h3 id="第-65-题：-a-b-c-d-和-a-39-b-39-39-c-39-39-d-39-，哪个性能更高？"><a href="#第-65-题：-a-b-c-d-和-a-39-b-39-39-c-39-39-d-39-，哪个性能更高？" class="headerlink" title="第 65 题： a.b.c.d 和 a[&#39;b&#39;][&#39;c&#39;][&#39;d&#39;]，哪个性能更高？"></a>第 65 题： <code>a.b.c.d</code> 和 <code>a[&#39;b&#39;][&#39;c&#39;][&#39;d&#39;]</code>，哪个性能更高？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/111">第 65 题</a></p><br/><h3 id="第-66-题：ES6-代码转成-ES5-代码的实现思路是什么"><a href="#第-66-题：ES6-代码转成-ES5-代码的实现思路是什么" class="headerlink" title="第 66 题：ES6 代码转成 ES5 代码的实现思路是什么"></a>第 66 题：ES6 代码转成 ES5 代码的实现思路是什么</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/112">第 66 题</a></p><br/><h3 id="第-67-题：数组编程题"><a href="#第-67-题：数组编程题" class="headerlink" title="第 67 题：数组编程题"></a>第 67 题：数组编程题</h3><p>随机生成一个长度为 10 的整数类型的数组，例如 <code>[2, 10, 3, 4, 5, 11, 10, 11, 20]</code>，将其排列成一个新数组，要求新数组形式如下，例如 <code>[[2, 3, 4, 5], [10, 11], [20]]</code>。</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/113">第 67 题</a></p><br/><h3 id="第-68-题：-如何解决移动端-Retina-屏-1px-像素问题"><a href="#第-68-题：-如何解决移动端-Retina-屏-1px-像素问题" class="headerlink" title="第 68 题： 如何解决移动端 Retina 屏 1px 像素问题"></a>第 68 题： 如何解决移动端 Retina 屏 1px 像素问题</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/115">第 68 题</a></p><br/><h3 id="第-69-题：-如何把一个字符串的大小写取反（大写变小写小写变大写），例如-’AbC’-变成-‘aBc’-。"><a href="#第-69-题：-如何把一个字符串的大小写取反（大写变小写小写变大写），例如-’AbC’-变成-‘aBc’-。" class="headerlink" title="第 69 题： 如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’ 。"></a>第 69 题： 如何把一个字符串的大小写取反（大写变小写小写变大写），例如 ’AbC’ 变成 ‘aBc’ 。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/116">第 69 题</a></p><br/><h3 id="第-70-题：-介绍下-webpack-热更新原理，是如何做到在不刷新浏览器的前提下更新页面的"><a href="#第-70-题：-介绍下-webpack-热更新原理，是如何做到在不刷新浏览器的前提下更新页面的" class="headerlink" title="第 70 题： 介绍下 webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的"></a>第 70 题： 介绍下 webpack 热更新原理，是如何做到在不刷新浏览器的前提下更新页面的</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/118">第 70 题</a></p><br/><h3 id="第-71-题：-实现一个字符串匹配算法，从长度为-n-的字符串-S-中，查找是否存在字符串-T，T-的长度是-m，若存在返回所在位置。"><a href="#第-71-题：-实现一个字符串匹配算法，从长度为-n-的字符串-S-中，查找是否存在字符串-T，T-的长度是-m，若存在返回所在位置。" class="headerlink" title="第 71 题： 实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。"></a>第 71 题： 实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/119">第 71 题</a></p><br/><h3 id="第-72-题：-为什么普通-for-循环的性能远远高于-forEach-的性能，请解释其中的原因。"><a href="#第-72-题：-为什么普通-for-循环的性能远远高于-forEach-的性能，请解释其中的原因。" class="headerlink" title="第 72 题： 为什么普通 for 循环的性能远远高于 forEach 的性能，请解释其中的原因。"></a>第 72 题： 为什么普通 <code>for</code> 循环的性能远远高于 <code>forEach</code> 的性能，请解释其中的原因。</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1g2yxbg4ta8j31gh0u048h.jpg" alt="image-20190512225510941"></p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/121">第 72 题</a></p><br/><h3 id="第-73-题：-介绍下-BFC、IFC、GFC-和-FFC"><a href="#第-73-题：-介绍下-BFC、IFC、GFC-和-FFC" class="headerlink" title="第 73 题： 介绍下 BFC、IFC、GFC 和 FFC"></a>第 73 题： 介绍下 BFC、IFC、GFC 和 FFC</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/122">第 73 题</a></p><br/><h3 id="第-74-题：-使用-JavaScript-Proxy-实现简单的数据绑定"><a href="#第-74-题：-使用-JavaScript-Proxy-实现简单的数据绑定" class="headerlink" title="第 74 题： 使用 JavaScript Proxy 实现简单的数据绑定"></a>第 74 题： 使用 JavaScript Proxy 实现简单的数据绑定</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/123">第 74 题</a></p><br/><h3 id="第-75-题：数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少"><a href="#第-75-题：数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少" class="headerlink" title="第 75 题：数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少"></a>第 75 题：数组里面有10万个数据，取第一个元素和第10万个元素的时间相差多少</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/124">第 75 题</a></p><br/><h3 id="第-76-题：输出以下代码运行结果"><a href="#第-76-题：输出以下代码运行结果" class="headerlink" title="第 76 题：输出以下代码运行结果"></a>第 76 题：输出以下代码运行结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example 1</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;, b=<span class="string">&#x27;123&#x27;</span>, c=<span class="number">123</span>;  </span><br><span class="line">a[b]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c]=<span class="string">&#x27;c&#x27;</span>;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;, b=<span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>), c=<span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>);  </span><br><span class="line">a[b]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c]=<span class="string">&#x27;c&#x27;</span>;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"><span class="comment">// example 3</span></span><br><span class="line"><span class="keyword">var</span> a=&#123;&#125;, b=&#123;<span class="attr">key</span>:<span class="string">&#x27;123&#x27;</span>&#125;, c=&#123;<span class="attr">key</span>:<span class="string">&#x27;456&#x27;</span>&#125;;  </span><br><span class="line">a[b]=<span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c]=<span class="string">&#x27;c&#x27;</span>;  </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/125">第 76 题</a></p><br/><h3 id="第-77-题：算法题「旋转数组」"><a href="#第-77-题：算法题「旋转数组」" class="headerlink" title="第 77 题：算法题「旋转数组」"></a>第 77 题：算法题「旋转数组」</h3><blockquote><p>给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</p></blockquote><p>示例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] 和 k = <span class="number">3</span></span><br><span class="line">输出: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">解释:</span><br><span class="line">向右旋转 <span class="number">1</span> 步: [<span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">向右旋转 <span class="number">2</span> 步: [<span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">向右旋转 <span class="number">3</span> 步: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: [-<span class="number">1</span>, -<span class="number">100</span>, <span class="number">3</span>, <span class="number">99</span>] 和 k = <span class="number">2</span></span><br><span class="line">输出: [<span class="number">3</span>, <span class="number">99</span>, -<span class="number">1</span>, -<span class="number">100</span>]</span><br><span class="line">解释: </span><br><span class="line">向右旋转 <span class="number">1</span> 步: [<span class="number">99</span>, -<span class="number">1</span>, -<span class="number">100</span>, <span class="number">3</span>]</span><br><span class="line">向右旋转 <span class="number">2</span> 步: [<span class="number">3</span>, <span class="number">99</span>, -<span class="number">1</span>, -<span class="number">100</span>]</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/126">第 77 题</a></p><br/><h3 id="第-78-题：Vue-的父组件和子组件生命周期钩子执行顺序是什么"><a href="#第-78-题：Vue-的父组件和子组件生命周期钩子执行顺序是什么" class="headerlink" title="第 78 题：Vue 的父组件和子组件生命周期钩子执行顺序是什么"></a>第 78 题：Vue 的父组件和子组件生命周期钩子执行顺序是什么</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/128">第 78 题</a></p><br/><h3 id="第-79-题：input-搜索如何防抖，如何处理中文输入"><a href="#第-79-题：input-搜索如何防抖，如何处理中文输入" class="headerlink" title="第 79 题：input 搜索如何防抖，如何处理中文输入"></a>第 79 题：input 搜索如何防抖，如何处理中文输入</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/129">第 79 题</a></p><br/><h3 id="第-80-题：介绍下-Promise-all-使用、原理实现及错误处理"><a href="#第-80-题：介绍下-Promise-all-使用、原理实现及错误处理" class="headerlink" title="第 80 题：介绍下 Promise.all 使用、原理实现及错误处理"></a>第 80 题：介绍下 Promise.all 使用、原理实现及错误处理</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/130">第 80 题</a></p><br/><h3 id="第-81-题：打印出-1-10000-之间的所有对称数"><a href="#第-81-题：打印出-1-10000-之间的所有对称数" class="headerlink" title="第 81 题：打印出 1 - 10000 之间的所有对称数"></a>第 81 题：打印出 1 - 10000 之间的所有对称数</h3><blockquote><p>例如：121、1331 等</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/131">第 81 题</a></p><br/><h3 id="第-82-题：周一算法题之「移动零」"><a href="#第-82-题：周一算法题之「移动零」" class="headerlink" title="第 82 题：周一算法题之「移动零」"></a>第 82 题：周一算法题之「移动零」</h3><blockquote><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p>说明:</p><ol><li><p>必须在原数组上操作，不能拷贝额外的数组。</p></li><li><p>尽量减少操作次数。</p></li></ol></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/132">第 82 题</a></p><br/><h3 id="第-83-题：var、let-和-const-区别的实现原理是什么"><a href="#第-83-题：var、let-和-const-区别的实现原理是什么" class="headerlink" title="第 83 题：var、let 和 const 区别的实现原理是什么"></a>第 83 题：var、let 和 const 区别的实现原理是什么</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/133">第 83 题</a></p><br/><h3 id="第-84-题：请实现一个-add-函数，满足以下功能。"><a href="#第-84-题：请实现一个-add-函数，满足以下功能。" class="headerlink" title="第 84 题：请实现一个 add 函数，满足以下功能。"></a>第 84 题：请实现一个 add 函数，满足以下功能。</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>);  <span class="comment">// 3</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)；<span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/134">第 84 题</a></p><br/><h3 id="第-85-题：react-router-里的-lt-Link-gt-标签和-lt-a-gt-标签有什么区别"><a href="#第-85-题：react-router-里的-lt-Link-gt-标签和-lt-a-gt-标签有什么区别" class="headerlink" title="第 85 题：react-router 里的 &lt;Link&gt; 标签和 &lt;a&gt; 标签有什么区别"></a>第 85 题：react-router 里的 <code>&lt;Link&gt;</code> 标签和 <code>&lt;a&gt;</code> 标签有什么区别</h3><blockquote><p>如何禁掉 <code>&lt;a&gt;</code> 标签默认事件，禁掉之后如何实现跳转。</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/135">第 85 题</a></p><br/><h3 id="第-86-题：周一算法题之「两数之和」"><a href="#第-86-题：周一算法题之「两数之和」" class="headerlink" title="第 86 题：周一算法题之「两数之和」"></a>第 86 题：周一算法题之「两数之和」</h3><p>给定一个整数数组和一个目标值，找出数组中和为目标值的两个数。</p><p>你可以假设每个输入只对应一种答案，且同样的元素不能被重复利用。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/136">第 86 题</a></p><p>公司：京东、快手</p><br/><h3 id="第-87-题：在输入框中如何判断输入的是一个正确的网址。"><a href="#第-87-题：在输入框中如何判断输入的是一个正确的网址。" class="headerlink" title="第 87 题：在输入框中如何判断输入的是一个正确的网址。"></a>第 87 题：在输入框中如何判断输入的是一个正确的网址。</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/138">第 87 题</a></p><br/><h3 id="第-88-题：实现-convert-方法，把原始-list-转换成树形结构，要求尽可能降低时间复杂度"><a href="#第-88-题：实现-convert-方法，把原始-list-转换成树形结构，要求尽可能降低时间复杂度" class="headerlink" title="第 88 题：实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度"></a>第 88 题：实现 convert 方法，把原始 list 转换成树形结构，要求尽可能降低时间复杂度</h3><p>以下数据结构中，id 代表部门编号，name 是部门名称，parentId 是父部门编号，为 0 代表一级部门，现在要求实现一个 convert 方法，把原始 list 转换成树形结构，parentId 为多少就挂载在该 id 的属性 children 数组下，结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始 list 如下</span></span><br><span class="line"><span class="keyword">let</span> list =[</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;部门A&#x27;</span>,<span class="attr">parentId</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;部门B&#x27;</span>,<span class="attr">parentId</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;部门C&#x27;</span>,<span class="attr">parentId</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&#x27;部门D&#x27;</span>,<span class="attr">parentId</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&#x27;部门E&#x27;</span>,<span class="attr">parentId</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">6</span>,<span class="attr">name</span>:<span class="string">&#x27;部门F&#x27;</span>,<span class="attr">parentId</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">7</span>,<span class="attr">name</span>:<span class="string">&#x27;部门G&#x27;</span>,<span class="attr">parentId</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">8</span>,<span class="attr">name</span>:<span class="string">&#x27;部门H&#x27;</span>,<span class="attr">parentId</span>:<span class="number">4</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">convert</span>(list, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换后的结果如下</span></span><br><span class="line"><span class="keyword">let</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;部门A&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;部门C&#x27;</span>,</span><br><span class="line">          <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门F&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">3</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">16</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门L&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;部门D&#x27;</span>,</span><br><span class="line">          <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">8</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门H&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ···</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/139">第 88 题</a></p><br/><h3 id="第-89-题：设计并实现-Promise-race"><a href="#第-89-题：设计并实现-Promise-race" class="headerlink" title="第 89 题：设计并实现 Promise.race()"></a>第 89 题：设计并实现 Promise.race()</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/140">第 89 题</a></p><br/><h3 id="第-90-题：实现模糊搜索结果的关键词高亮显示"><a href="#第-90-题：实现模糊搜索结果的关键词高亮显示" class="headerlink" title="第 90 题：实现模糊搜索结果的关键词高亮显示"></a>第 90 题：实现模糊搜索结果的关键词高亮显示</h3><img src="https://ws3.sinaimg.cn/large/006tNc79ly1g43dykaccuj30u01hc49s.jpg" height="800"/><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/141">第 90 题</a></p><br/><h3 id="第-91-题：介绍下-HTTPS-中间人攻击"><a href="#第-91-题：介绍下-HTTPS-中间人攻击" class="headerlink" title="第 91 题：介绍下 HTTPS 中间人攻击"></a>第 91 题：介绍下 HTTPS 中间人攻击</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/142">第 91 题</a></p><br/><h3 id="第-92-题：已知数据格式，实现一个函数-fn-找出链条中所有的父级-id"><a href="#第-92-题：已知数据格式，实现一个函数-fn-找出链条中所有的父级-id" class="headerlink" title="第 92 题：已知数据格式，实现一个函数 fn 找出链条中所有的父级 id"></a>第 92 题：已知数据格式，实现一个函数 fn 找出链条中所有的父级 id</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="string">&#x27;112&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(value) <span class="comment">// 输出 [1， 11， 112]</span></span><br></pre></td></tr></table></figure></blockquote><img src="https://ws1.sinaimg.cn/large/006tNc79gy1g45a04ntttj30k20wen01.jpg" height="800"/><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/143">第 92 题</a></p><br/><h3 id="第-93-题：给定两个大小为-m-和-n-的有序数组-nums1-和-nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为-O-log-m-n-。"><a href="#第-93-题：给定两个大小为-m-和-n-的有序数组-nums1-和-nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为-O-log-m-n-。" class="headerlink" title="第 93 题：给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log(m+n))。"></a>第 93 题：给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请找出这两个有序数组的中位数。要求算法的时间复杂度为 O(log(m+n))。</h3><p>示例 1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>中位数是 2.0</p><p>示例 2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>中位数是(2 + 3) &#x2F; 2 &#x3D; 2.5</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/144">第 93 题</a></p><br/><h3 id="第-94-题：vue-在-v-for-时给每项元素绑定事件需要用事件代理吗？为什么？"><a href="#第-94-题：vue-在-v-for-时给每项元素绑定事件需要用事件代理吗？为什么？" class="headerlink" title="第 94 题：vue 在 v-for 时给每项元素绑定事件需要用事件代理吗？为什么？"></a>第 94 题：vue 在 v-for 时给每项元素绑定事件需要用事件代理吗？为什么？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/145">第 94 题</a></p><br/><h3 id="第-95-题：模拟实现一个深拷贝，并考虑对象相互引用以及-Symbol-拷贝的情况"><a href="#第-95-题：模拟实现一个深拷贝，并考虑对象相互引用以及-Symbol-拷贝的情况" class="headerlink" title="第 95 题：模拟实现一个深拷贝，并考虑对象相互引用以及 Symbol 拷贝的情况"></a>第 95 题：模拟实现一个深拷贝，并考虑对象相互引用以及 Symbol 拷贝的情况</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/148">第 95 题</a></p><br/><h3 id="第-96-题：介绍下前端加密的常见场景和方法"><a href="#第-96-题：介绍下前端加密的常见场景和方法" class="headerlink" title="第 96 题：介绍下前端加密的常见场景和方法"></a>第 96 题：介绍下前端加密的常见场景和方法</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/150">第 96 题</a></p><br/><h3 id="第-97-题：React-和-Vue-的-diff-时间复杂度从-O-n-3-优化到-O-n-，那么-O-n-3-和-O-n-是如何计算出来的？"><a href="#第-97-题：React-和-Vue-的-diff-时间复杂度从-O-n-3-优化到-O-n-，那么-O-n-3-和-O-n-是如何计算出来的？" class="headerlink" title="第 97 题：React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？"></a>第 97 题：React 和 Vue 的 diff 时间复杂度从 O(n^3) 优化到 O(n) ，那么 O(n^3) 和 O(n) 是如何计算出来的？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/151">第 97 题</a></p><br/><h3 id="第-98-题：写出如下代码的打印结果"><a href="#第-98-题：写出如下代码的打印结果" class="headerlink" title="第 98 题：写出如下代码的打印结果"></a>第 98 题：写出如下代码的打印结果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeObjProperty</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">  o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  o.<span class="property">siteUrl</span> = <span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> webSite = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">changeObjProperty</span>(webSite);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(webSite.<span class="property">siteUrl</span>);</span><br></pre></td></tr></table></figure><p>公司：京东</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/152">第 98 题</a></p><br/><h3 id="第-99-题：编程算法题"><a href="#第-99-题：编程算法题" class="headerlink" title="第 99 题：编程算法题"></a>第 99 题：编程算法题</h3><blockquote><p>用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。</p></blockquote><p>公司：bilibili</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/153">第 99 题</a></p><br/><h3 id="第-100-题：请写出如下代码的打印结果"><a href="#第-100-题：请写出如下代码的打印结果" class="headerlink" title="第 100 题：请写出如下代码的打印结果"></a>第 100 题：请写出如下代码的打印结果</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">a</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">obj.<span class="title function_">a</span>();</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">a</span>();</span><br></pre></td></tr></table></figure></blockquote><p>公司：京东</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/155">第 100 题</a></p><br/><h3 id="第-101-题：修改以下-print-函数，使之输出-0-到-99，或者-99-到-0"><a href="#第-101-题：修改以下-print-函数，使之输出-0-到-99，或者-99-到-0" class="headerlink" title="第 101 题：修改以下 print 函数，使之输出 0 到 99，或者 99 到 0"></a>第 101 题：修改以下 print 函数，使之输出 0 到 99，或者 99 到 0</h3><blockquote><p>要求：</p><p>1、只能修改 <code>setTimeout</code> 到 <code>Math.floor(Math.random() * 1000</code> 的代码</p><p>2、不能修改 <code>Math.floor(Math.random() * 1000</code></p><p>3、不能使用全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">n</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line"><span class="title function_">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>公司：头条</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/158">第 101 题</a></p><br/><h3 id="第-102-题：不用加减乘除运算符，求整数的7倍"><a href="#第-102-题：不用加减乘除运算符，求整数的7倍" class="headerlink" title="第 102 题：不用加减乘除运算符，求整数的7倍"></a>第 102 题：不用加减乘除运算符，求整数的7倍</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/161">第 102 题</a></p><br/><h3 id="第-103-题：模拟实现一个-localStorage"><a href="#第-103-题：模拟实现一个-localStorage" class="headerlink" title="第 103 题：模拟实现一个 localStorage"></a>第 103 题：模拟实现一个 localStorage</h3><p>公司：阿里</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/166">第 103 题</a></p><br/><h3 id="第-104-题：模拟-localStorage-时如何实现过期时间功能"><a href="#第-104-题：模拟-localStorage-时如何实现过期时间功能" class="headerlink" title="第 104 题：模拟 localStorage 时如何实现过期时间功能"></a>第 104 题：模拟 localStorage 时如何实现过期时间功能</h3><p>公司：阿里</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/171">第 104 题</a></p><br/><h3 id="第-105-题：编程题"><a href="#第-105-题：编程题" class="headerlink" title="第 105 题：编程题"></a>第 105 题：编程题</h3><blockquote><p>url有三种情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//www.xx.cn/api?keyword=&amp;level1=&amp;local_batch_id=&amp;elective=&amp;local_province_id=33</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.xx.cn/api?keyword=&amp;level1=&amp;local_batch_id=&amp;elective=800&amp;local_province_id=33</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.xx.cn/api?keyword=&amp;level1=&amp;local_batch_id=&amp;elective=800,700&amp;local_province_id=33</span></span><br></pre></td></tr></table></figure><p>匹配elective后的数字输出（写出你认为的最优解法）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] || [<span class="string">&#x27;800&#x27;</span>] || [<span class="string">&#x27;800&#x27;</span>,<span class="string">&#x27;700&#x27;</span>]</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/177">第 105 题</a></p><br/><h3 id="第-106-题：分别写出如下代码的返回值"><a href="#第-106-题：分别写出如下代码的返回值" class="headerlink" title="第 106 题：分别写出如下代码的返回值"></a>第 106 题：分别写出如下代码的返回值</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;11&#x27;</span>) == <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;11&#x27;</span>);</span><br><span class="line"><span class="title class_">String</span>(<span class="string">&#x27;11&#x27;</span>) === <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;11&#x27;</span>);</span><br></pre></td></tr></table></figure></blockquote><p>公司：京东</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/180">第 106 题</a></p><br/><h3 id="第-107-题：考虑到性能问题，如何快速从一个巨大的数组中随机获取部分元素。"><a href="#第-107-题：考虑到性能问题，如何快速从一个巨大的数组中随机获取部分元素。" class="headerlink" title="第 107 题：考虑到性能问题，如何快速从一个巨大的数组中随机获取部分元素。"></a>第 107 题：考虑到性能问题，如何快速从一个巨大的数组中随机获取部分元素。</h3><blockquote><p>比如有个数组有100K个元素，从中不重复随机选取10K个元素。</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/187">第 107 题</a></p><br/><h3 id="第-108-题：请写出如下代码的打印结果"><a href="#第-108-题：请写出如下代码的打印结果" class="headerlink" title="第 108 题：请写出如下代码的打印结果"></a>第 108 题：请写出如下代码的打印结果</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> name == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye &#x27;</span> + name);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></blockquote><p>公司：京东</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/190">第 108 题</a></p><br/><h3 id="第-109-题：扩展题，请写出如下代码的打印结果"><a href="#第-109-题：扩展题，请写出如下代码的打印结果" class="headerlink" title="第 109 题：扩展题，请写出如下代码的打印结果"></a>第 109 题：扩展题，请写出如下代码的打印结果</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> name == <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">     name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye &#x27;</span> + name);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></blockquote><p>公司：京东</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/198">第 109 题</a></p><br/><h3 id="第-110-题：编程题，请写一个函数，完成以下功能"><a href="#第-110-题：编程题，请写一个函数，完成以下功能" class="headerlink" title="第 110 题：编程题，请写一个函数，完成以下功能"></a>第 110 题：编程题，请写一个函数，完成以下功能</h3><blockquote><p>输入<br><code>&#39;1, 2, 3, 5, 7, 8, 10&#39;</code><br>输出<br><code>&#39;1~3, 5, 7~8, 10&#39;</code></p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/201">第 110 题</a></p><br/><h3 id="第-111-题：编程题，写个程序把-entry-转换成如下对象"><a href="#第-111-题：编程题，写个程序把-entry-转换成如下对象" class="headerlink" title="第 111 题：编程题，写个程序把 entry 转换成如下对象"></a>第 111 题：编程题，写个程序把 entry 转换成如下对象</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entry = &#123;</span><br><span class="line"><span class="attr">a</span>: &#123;</span><br><span class="line"><span class="attr">b</span>: &#123;</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">d</span>: &#123;</span><br><span class="line">  <span class="attr">xx</span>: <span class="string">&#x27;adxx&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">e</span>: <span class="string">&#x27;ae&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求转换成如下对象</span></span><br><span class="line"><span class="keyword">var</span> output = &#123;</span><br><span class="line"><span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a.d.xx&#x27;</span>: <span class="string">&#x27;adxx&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a.e&#x27;</span>: <span class="string">&#x27;ae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/206">第 111 题</a></p><br/><h3 id="第-112-题：编程题，写个程序把-entry-转换成如下对象（跟昨日题目相反）"><a href="#第-112-题：编程题，写个程序把-entry-转换成如下对象（跟昨日题目相反）" class="headerlink" title="第 112 题：编程题，写个程序把 entry 转换成如下对象（跟昨日题目相反）"></a>第 112 题：编程题，写个程序把 entry 转换成如下对象（跟昨日题目相反）</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entry = &#123;</span><br><span class="line"><span class="string">&#x27;a.b.c.dd&#x27;</span>: <span class="string">&#x27;abcdd&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a.d.xx&#x27;</span>: <span class="string">&#x27;adxx&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a.e&#x27;</span>: <span class="string">&#x27;ae&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求转换成如下对象</span></span><br><span class="line"><span class="keyword">var</span> output = &#123;</span><br><span class="line"><span class="attr">a</span>: &#123;</span><br><span class="line"><span class="attr">b</span>: &#123;</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">dd</span>: <span class="string">&#x27;abcdd&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">d</span>: &#123;</span><br><span class="line">  <span class="attr">xx</span>: <span class="string">&#x27;adxx&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">e</span>: <span class="string">&#x27;ae&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/212">第 112 题</a></p><br/><h3 id="第-113-题：编程题，根据以下要求，写一个数组去重函数（蘑菇街）"><a href="#第-113-题：编程题，根据以下要求，写一个数组去重函数（蘑菇街）" class="headerlink" title="第 113 题：编程题，根据以下要求，写一个数组去重函数（蘑菇街）"></a>第 113 题：编程题，根据以下要求，写一个数组去重函数（蘑菇街）</h3><blockquote><ol><li>如传入的数组元素为<code>[123, &quot;meili&quot;, &quot;123&quot;, &quot;mogu&quot;, 123]</code>，则输出：<code>[123, &quot;meili&quot;, &quot;123&quot;, &quot;mogu&quot;]</code></li><li>如传入的数组元素为<code>[123, [1, 2, 3], [1, &quot;2&quot;, 3], [1, 2, 3], &quot;meili&quot;]</code>，则输出：<code>[123, [1, 2, 3], [1, &quot;2&quot;, 3], &quot;meili&quot;]</code></li><li>如传入的数组元素为<code>[123, &#123;a: 1&#125;, &#123;a: &#123;b: 1&#125;&#125;, &#123;a: &quot;1&quot;&#125;, &#123;a: &#123;b: 1&#125;&#125;, &quot;meili&quot;]</code>，则输出：<code>[123, &#123;a: 1&#125;, &#123;a: &#123;b: 1&#125;&#125;, &#123;a: &quot;1&quot;&#125;, &quot;meili&quot;]</code></li></ol></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/215">第 113 题</a></p><br/><h3 id="第-114-题：编程题，找出字符串中连续出现最多的字符和个数（蘑菇街）"><a href="#第-114-题：编程题，找出字符串中连续出现最多的字符和个数（蘑菇街）" class="headerlink" title="第 114 题：编程题，找出字符串中连续出现最多的字符和个数（蘑菇街）"></a>第 114 题：编程题，找出字符串中连续出现最多的字符和个数（蘑菇街）</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abcaakjbb&#x27;</span> =&gt; &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="string">&#x27;abbkejsbcccwqaa&#x27;</span> =&gt; &#123;<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/220">第 114 题</a></p><br/><h3 id="第-115-题：写一个单向链数据结构的-js-实现并标注复杂度（水滴筹）"><a href="#第-115-题：写一个单向链数据结构的-js-实现并标注复杂度（水滴筹）" class="headerlink" title="第 115 题：写一个单向链数据结构的 js 实现并标注复杂度（水滴筹）"></a>第 115 题：写一个单向链数据结构的 js 实现并标注复杂度（水滴筹）</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/226">第 115 题</a></p><br/><h3 id="第-116-题：输出以下代码运行结果"><a href="#第-116-题：输出以下代码运行结果" class="headerlink" title="第 116 题：输出以下代码运行结果"></a>第 116 题：输出以下代码运行结果</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> * <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;a&quot;</span> + + <span class="string">&quot;b&quot;</span></span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/229">第 116 题</a></p><br/><h3 id="第-117-题：介绍下-http1-0、1-1、2-0-协议的区别？"><a href="#第-117-题：介绍下-http1-0、1-1、2-0-协议的区别？" class="headerlink" title="第 117 题：介绍下 http1.0、1.1、2.0 协议的区别？"></a>第 117 题：介绍下 http1.0、1.1、2.0 协议的区别？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/232">第 117 题</a></p><br/><h3 id="第-118-题：vue-渲染大量数据时应该怎么优化？"><a href="#第-118-题：vue-渲染大量数据时应该怎么优化？" class="headerlink" title="第 118 题：vue 渲染大量数据时应该怎么优化？"></a>第 118 题：vue 渲染大量数据时应该怎么优化？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/233">第 118 题</a></p><br/><h3 id="第-119-题：vue-如何优化首页的加载速度？vue-首页白屏是什么问题引起的？如何解决呢？"><a href="#第-119-题：vue-如何优化首页的加载速度？vue-首页白屏是什么问题引起的？如何解决呢？" class="headerlink" title="第 119 题：vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？"></a>第 119 题：vue 如何优化首页的加载速度？vue 首页白屏是什么问题引起的？如何解决呢？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/234">第 119 题</a></p><br/><h3 id="第-120-题：为什么-for-循环嵌套顺序会影响性能？"><a href="#第-120-题：为什么-for-循环嵌套顺序会影响性能？" class="headerlink" title="第 120 题：为什么 for 循环嵌套顺序会影响性能？"></a>第 120 题：为什么 for 循环嵌套顺序会影响性能？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t1 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">10000</span>; k++) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first time&#x27;</span>, t2 - t1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two time&#x27;</span>, t3 - t2)</span><br></pre></td></tr></table></figure><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/235">第 120 题</a></p><br/><h3 id="第-121-题：统计-1-n-整数中出现-1-的次数。"><a href="#第-121-题：统计-1-n-整数中出现-1-的次数。" class="headerlink" title="第 121 题：统计 1 ~ n 整数中出现 1 的次数。"></a>第 121 题：统计 1 ~ n 整数中出现 1 的次数。</h3><p>例如统计 1 ~ 400W 出现 1 的次数。</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/237">第 121 题</a></p><br/><h3 id="第-122-题：webpack-打包-vue-速度太慢怎么办？"><a href="#第-122-题：webpack-打包-vue-速度太慢怎么办？" class="headerlink" title="第 122 题：webpack 打包 vue 速度太慢怎么办？"></a>第 122 题：webpack 打包 vue 速度太慢怎么办？</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/238">第 122 题</a></p><br/><h3 id="第-123-题：vue-是如何对数组方法进行变异的？例如-push、pop、splice-等方法"><a href="#第-123-题：vue-是如何对数组方法进行变异的？例如-push、pop、splice-等方法" class="headerlink" title="第 123 题：vue 是如何对数组方法进行变异的？例如 push、pop、splice 等方法"></a>第 123 题：vue 是如何对数组方法进行变异的？例如 push、pop、splice 等方法</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/239">第 123 题</a></p><br/><h3 id="第-124-题：永久性重定向（301）和临时性重定向（302）对-SEO-有什么影响"><a href="#第-124-题：永久性重定向（301）和临时性重定向（302）对-SEO-有什么影响" class="headerlink" title="第 124 题：永久性重定向（301）和临时性重定向（302）对 SEO 有什么影响"></a>第 124 题：永久性重定向（301）和临时性重定向（302）对 SEO 有什么影响</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/241">第 124 题</a></p><br/><h3 id="第-125-题：算法题"><a href="#第-125-题：算法题" class="headerlink" title="第 125 题：算法题"></a>第 125 题：算法题</h3><p>如何将<code>[&#123;id: 1&#125;, &#123;id: 2, pId: 1&#125;, ...]</code> 的重复数组（有重复数据）转成树形结构的数组 <code>[&#123;id: 1, child: [&#123;id: 2, pId: 1&#125;]&#125;, ...]</code> （需要去重）</p><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/243">第 125 题</a></p><br/><h3 id="第-126-题：扑克牌问题"><a href="#第-126-题：扑克牌问题" class="headerlink" title="第 126 题：扑克牌问题"></a>第 126 题：扑克牌问题</h3><blockquote><p>有一堆扑克牌，将牌堆第一张放到桌子上，再将接下来的牌堆的第一张放到牌底，如此往复；</p><p>最后桌子上的牌顺序为： (牌底) 1,2,3,4,5,6,7,8,9,10,11,12,13 (牌顶)；</p><p>问：原来那堆牌的顺序，用函数实现。</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/245">第 126 题</a></p><br/><h3 id="第-127-题：如何用-css-或-js-实现多行文本溢出省略效果，考虑兼容性"><a href="#第-127-题：如何用-css-或-js-实现多行文本溢出省略效果，考虑兼容性" class="headerlink" title="第 127 题：如何用 css 或 js 实现多行文本溢出省略效果，考虑兼容性"></a>第 127 题：如何用 css 或 js 实现多行文本溢出省略效果，考虑兼容性</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/246">第 127 题</a></p><br/><h3 id="第-128-题：Http-状态码-301-和-302-的应用场景分别是什么"><a href="#第-128-题：Http-状态码-301-和-302-的应用场景分别是什么" class="headerlink" title="第 128 题：Http 状态码 301 和 302 的应用场景分别是什么"></a>第 128 题：Http 状态码 301 和 302 的应用场景分别是什么</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/249">第 128 题</a></p><br/><h3 id="第-129-题：输出以下代码执行结果"><a href="#第-129-题：输出以下代码执行结果" class="headerlink" title="第 129 题：输出以下代码执行结果"></a>第 129 题：输出以下代码执行结果</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(resolve, <span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>();</span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">wait</span>();</span><br><span class="line"><span class="keyword">const</span> y = <span class="title function_">wait</span>();</span><br><span class="line"><span class="keyword">const</span> z = <span class="title function_">wait</span>();</span><br><span class="line"><span class="keyword">await</span> x;</span><br><span class="line"><span class="keyword">await</span> y;</span><br><span class="line"><span class="keyword">await</span> z;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/251">第 129 题</a></p><br/><h3 id="第-130-题：输出以下代码执行结果，大致时间就好（不同于上题）"><a href="#第-130-题：输出以下代码执行结果，大致时间就好（不同于上题）" class="headerlink" title="第 130 题：输出以下代码执行结果，大致时间就好（不同于上题）"></a>第 130 题：输出以下代码执行结果，大致时间就好（不同于上题）</h3><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line"> <span class="built_in">setTimeout</span>(resolve, <span class="number">10</span> * <span class="number">1000</span>)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">wait</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">wait</span>();</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">wait</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/253">第 130 题</a></p><br/><h3 id="第-131-题：接口如何防刷"><a href="#第-131-题：接口如何防刷" class="headerlink" title="第 131 题：接口如何防刷"></a>第 131 题：接口如何防刷</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/254">第 131 题</a></p><br/><h3 id="第-132-题：实现一个-Dialog-类，Dialog可以创建-dialog-对话框，对话框支持可拖拽（腾讯）"><a href="#第-132-题：实现一个-Dialog-类，Dialog可以创建-dialog-对话框，对话框支持可拖拽（腾讯）" class="headerlink" title="第 132 题：实现一个 Dialog 类，Dialog可以创建 dialog 对话框，对话框支持可拖拽（腾讯）"></a>第 132 题：实现一个 Dialog 类，Dialog可以创建 dialog 对话框，对话框支持可拖拽（腾讯）</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/257">第 132 题</a></p><br/><h3 id="第-133-题：用-setTimeout-实现-setInterval，阐述实现的效果与-setInterval-的差异"><a href="#第-133-题：用-setTimeout-实现-setInterval，阐述实现的效果与-setInterval-的差异" class="headerlink" title="第 133 题：用 setTimeout 实现 setInterval，阐述实现的效果与 setInterval 的差异"></a>第 133 题：用 setTimeout 实现 setInterval，阐述实现的效果与 setInterval 的差异</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/259">第 133 题</a></p><br/><h3 id="第-134-题：求两个日期中间的有效日期"><a href="#第-134-题：求两个日期中间的有效日期" class="headerlink" title="第 134 题：求两个日期中间的有效日期"></a>第 134 题：求两个日期中间的有效日期</h3><blockquote><p>如 2015-2-8 到 2015-3-3，返回【2015-2-8 2015-2-9…】</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/264">第 134 题</a></p><br/><h3 id="第-135-题：算法题（盛大）"><a href="#第-135-题：算法题（盛大）" class="headerlink" title="第 135 题：算法题（盛大）"></a>第 135 题：算法题（盛大）</h3><blockquote><p>在一个字符串数组中有红、黄、蓝三种颜色的球，且个数不相等、顺序不一致，请为该数组排序。使得排序后数组中球的顺序为:黄、红、蓝。</p><p>例如：红蓝蓝黄红黄蓝红红黄红，排序后为：黄黄黄红红红红红蓝蓝蓝。</p></blockquote><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/266">第 135 题</a></p><br/><h3 id="第-136-题：如何实现骨架屏，说说你的思路"><a href="#第-136-题：如何实现骨架屏，说说你的思路" class="headerlink" title="第 136 题：如何实现骨架屏，说说你的思路"></a>第 136 题：如何实现骨架屏，说说你的思路</h3><p>解析：<a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/270">第 136 题</a></p><br/>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> 面试篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>adb报错文档</title>
      <link href="/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/adb%E6%8A%A5%E9%94%99%E6%96%87%E6%A1%A3/"/>
      <url>/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/adb%E6%8A%A5%E9%94%99%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ul><li>安卓系统未打开adb网络调试功能</li><li>通过USB方式连接到安卓系统设置即可</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>先通过USB线连接</li><li><code>adb devices</code> 能看到所连接的设备情况下</li><li><code>adb root</code> 权限提权(如果已经root可以无视)</li><li><code>adb shell</code> 进入到安卓系统的shell<ul><li><code>setprop service.adb.tcp.port 5555</code> 设置adb服务端口为5555， 打开adb网络调试功能</li><li><code>exit</code> 退出shell</li></ul></li><li><code>adb tcpip 5555</code></li><li>拔掉USB线</li><li><code>adb connect x.x.x.x:x</code>连接即可</li></ul><h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><ol><li>在android 10情况下，<code>adb root</code>失败</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">// adbd cannot run as root in production builds</span><br></pre></td></tr></table></figure><p>解决方案： <a href="https://github.com/evdenis/adb_root">https://github.com/evdenis/adb_root</a><br>Android 9&#x2F;10 only. Will not work on Android 11.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ADB命令</title>
      <link href="/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/ADB%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/07/30/%E5%B7%A5%E5%85%B7%E7%B1%BB/ADB%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>常用命令用于速查，都是经常需要用到的，没有接触过adb命令从第二节开始看，对每个命令有详细解释。</p><h2 id="1-常用命令"><a href="#1-常用命令" class="headerlink" title="1. 常用命令"></a>1. 常用命令</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">adb devices #查看连接设备</span><br><span class="line"></span><br><span class="line">adb -s cf27456f shell # 指定连接设备使用命令</span><br><span class="line"></span><br><span class="line">adb install test.apk # 安装应用</span><br><span class="line"></span><br><span class="line">adb install -r demo.apk #安装apk 到sd 卡：</span><br><span class="line"></span><br><span class="line">adb uninstall cn.com.test.mobile #卸载应用，需要指定包</span><br><span class="line"></span><br><span class="line">adb uninstall -k cn.com.test.mobile #卸载app 但保留数据和缓存文件</span><br><span class="line"></span><br><span class="line">adb shell pm list packages #列出手机装的所有app 的包名</span><br><span class="line"></span><br><span class="line">adb shell pm list packages -3 #列出除了系统应用的第三方应用包名</span><br><span class="line"></span><br><span class="line">adb shell pm clear cn.com.test.mobile #清除应用数据与缓存</span><br><span class="line"></span><br><span class="line">adb shell am start -ncn.com.test.mobile/.ui.SplashActivity #启动应用</span><br><span class="line"></span><br><span class="line">adb shell dumpsys package #包信息Package Information</span><br><span class="line"></span><br><span class="line">adb shell dumpsys meminfo #内存使用情况Memory Usage</span><br><span class="line"></span><br><span class="line">adb shell am force-stop cn.com.test.mobile #强制停止应用</span><br><span class="line"></span><br><span class="line">adb logcat #查看日志</span><br><span class="line"></span><br><span class="line">adb logcat -c #清除log 缓存</span><br><span class="line"></span><br><span class="line">adb reboot #重启</span><br><span class="line"></span><br><span class="line">adb get-serialno #获取序列号</span><br><span class="line"></span><br><span class="line">adb shell getprop ro.build.version.release #查看Android 系统版本</span><br><span class="line"></span><br><span class="line">adb shell top -s 10 #查看占用内存前10 的app</span><br><span class="line"></span><br><span class="line">adb push &lt;local&gt; &lt;remote&gt; #从本地复制文件到设备</span><br><span class="line"></span><br><span class="line">adb pull &lt;remote&gt; &lt;local&gt; #从设备复制文件到本地</span><br><span class="line"></span><br><span class="line">adb bugreport #查看bug 报告</span><br><span class="line"></span><br><span class="line">adb help #查看ADB 帮助</span><br></pre></td></tr></table></figure><h2 id="2-1-连接设备"><a href="#2-1-连接设备" class="headerlink" title="2.1 连接设备"></a>2.1 连接设备</h2><p><strong>adb [-d|-e|-s <serialNumber>] <command></strong></p><p>连接指定设备</p><p>参数：</p><p>-d 指定当前唯一通过USB 连接的Android 设备为命令目标</p><p>-e 指定当前唯一运行的模拟器为命令目标</p><p>-s <serialNumber> 指定相应serialNumber 号的设备&#x2F;模拟器为命令目标</p><p>command 为所需对设备执行的命令</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line">cf263b7f device</span><br><span class="line">emulator<span class="literal">-5554</span> offline</span><br><span class="line"><span class="number">192.168</span>.<span class="number">1.6</span>:<span class="number">5555</span> device</span><br><span class="line"><span class="variable">$adb</span> <span class="literal">-s</span> cf263b7f <span class="comment">#连接cf264b8f 设备</span></span><br></pre></td></tr></table></figure><p>adb devices 查看已连接的设备信息, 上面已经连接3台设备。</p><h2 id="2-2-查看信息"><a href="#2-2-查看信息" class="headerlink" title="2.2 查看信息"></a>2.2 查看信息</h2><p><strong>2.2.1 查看版本设备</strong></p><p><strong>adb version</strong> 查看adb 版本信息</p><p><strong>adb devices</strong> 查看adb 连接设备</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> devices</span><br><span class="line">List of devices attached</span><br><span class="line"><span class="number">1226959</span>f device</span><br><span class="line"><span class="number">3426422</span>f offline</span><br></pre></td></tr></table></figure><p>注意：offline 表示设备未连接成功或无响应，device 设备已连接</p><p><strong>adb shell getprop ro.product.model</strong> 查看设备型号</p><p><strong>adb get-serialno</strong> 获取设备序列号</p><p><strong>adb bugreport</strong> 查看bug 报告</p><p><strong>adb logcat</strong> 查看日志</p><p><strong>adb shell wm size</strong> 查看屏幕分辨率</p><p><strong>adb shell wm density</strong> 查看屏幕密度</p><p><strong>2.2.2 查看应用信息</strong></p><p><strong>adb shell pm list packages</strong> 列出手机装的所有app 的包名</p><p><strong>adb shell pm list packages -s</strong> 列出系统应用的所有包名</p><p><strong>adb shell pm list packages -3</strong> 列出除了系统应用的第三方应用包名</p><p><strong>adb shell pm list packages | find “test” win</strong> 列出手机装带有的test的包</p><p><strong>adb shell pm list packages | grep ‘test’ linux</strong> 列出手机装带有的test的包</p><p><strong>adb shell cat <em>&#x2F;sys&#x2F;class&#x2F;net&#x2F;wlan0&#x2F;address</em></strong> 获取MAC 地址, 根据系统版本参数可能不同</p><p><strong>adb shell getprop ro.build.version.release</strong> 查看Android 系统版本</p><p><strong>adb shell dumpsys activity services [<packagename>]</strong> 查看正在运行的Services</p><p><packagename> 参数不是必须的，指定<packagename> 表示查看与某个包名相关的Services，不指定表示查看所有Services。</p><p><packagename> 不一定要给出完整的包名，比如运行adb shell dumpsys activity services org.zhihu，那么包名org.zhihu.demo1、org.zhihu.demo2 和org.zhihu 等相关的Services 都会列出来。</p><h2 id="2-3-app-安装和卸载"><a href="#2-3-app-安装和卸载" class="headerlink" title="2.3 app 安装和卸载"></a>2.3 app 安装和卸载</h2><p><strong>2.3.1 app 安装：</strong></p><p><strong>adb install <apkfile></strong> 参数apkfile 为.apk 文件名称</p><p><strong>adb install -r <em>test.apk</em></strong> 保留数据和缓存文件，重新安装apk</p><p><strong>adb install -s <em>test.apk</em></strong> 安装apk 到sd 卡</p><p><strong>2.3.2 app 卸载</strong></p><p><strong>adb uninstall <package></strong> 参数package 为软件包名称</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> uninstall cn.com.test.mobile</span><br><span class="line"> </span><br><span class="line"><span class="comment">#  卸载app 但保留数据和缓存文件</span></span><br><span class="line"><span class="variable">$adb</span> uninstall <span class="literal">-k</span> ccn.com.test.mobile </span><br></pre></td></tr></table></figure><h2 id="2-4-启动停止服务"><a href="#2-4-启动停止服务" class="headerlink" title="2.4 启动停止服务"></a>2.4 启动停止服务</h2><p><strong>adb start-server</strong></p><p>启动adb 服务，基本不会用到，因为只要设备连接正确，会自动启动adb server</p><p><strong>adb kill-server</strong></p><p>停止adb server</p><p><strong>adb -P <port> start-server</strong></p><p>指定adb server 的网络端口port （默认为5037）启动服务</p><h2 id="2-5-与应用交互"><a href="#2-5-与应用交互" class="headerlink" title="2.5 与应用交互"></a>2.5 与应用交互</h2><p><strong>adb shell pm clear <packagename></strong></p><p>清除应用数据与缓存</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell pm <span class="built_in">clear</span> cn.com.test.mobile</span><br></pre></td></tr></table></figure><p><strong>adb shell am force-stop <packagename></strong></p><p>强制停止应用</p><p>示例：强制停止微信</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><p><strong>adb shell am <command></strong></p><p>command 命令详解</p><blockquote><p>command 用途<br>start [options] <INTENT> 启动 <INTENT> 指定的 Activity<br>startservice [options] <INTENT> 启动 <INTENT> 指定的 Service<br>broadcast [options] <INTENT> 发送 <INTENT> 指定的广播<br>force-stop <packagename> 停止 <packagename> 相关的进程</p></blockquote><p><INTENT> 参数很灵活，和写 Android 程序时代码里的 Intent 相对应,用于决定 intent 对象的选项如下：</p><blockquote><p>-a <ACTION> 指定 action，如android.intent.action.VIEW<br>-c <CATEGORY> 指定 category，如android.intent.category.APP_CONTACTS<br>-n <COMPONENT> 指定完整 component 名，用于明确指定启动哪个 Activity，如<br><a href="https://link.zhihu.com/?target=http://com.example.app/.ExampleActivity">com.example.app&#x2F;.ExampleActivity</a></p></blockquote><p><strong>2.5.1 启动 Activity</strong></p><p><strong>adb shell am start [options] <INTENT></strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#指定完整 component 名，用于明确指定启动哪个Activity</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> &lt;COMPONENT&gt;  </span><br><span class="line">如： <span class="comment">#表示调起微信主界面</span></span><br><span class="line"><span class="variable">$adb</span> shell am <span class="built_in">start</span> <span class="literal">-n</span> com.tencent.mm/.ui.LauncherUI  </span><br></pre></td></tr></table></figure><p><strong>2.5.2 启动 Service</strong></p><p><strong>adb shell am startservice [options] <INTENT></strong></p><p>示例： 表示调起微信的某 Service。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell am startservice <span class="literal">-n</span> com.tencent.mm/.plugin.accountsync.model.AccountAuthenticatorService</span><br></pre></td></tr></table></figure><p><strong>2.5.3 发送广播</strong></p><p>可以向所有组件广播，也可以只向指定组件广播。</p><p>adb shell am broadcast [options] <INTENT></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向所有组件广播 BOOT_COMPLETED (开机广播)</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED   </span><br><span class="line"><span class="comment">#如：只向 org.mazhuang.boottimemeasure/.BootCompletedReceiver 广播 BOOT_COMPLETED：</span></span><br><span class="line"><span class="variable">$adb</span> shell am broadcast <span class="literal">-a</span> android.intent.action.BOOT_COMPLETED <span class="literal">-n</span> org.mazhuang.boottimemeasure/.BootCompletedReceiver</span><br></pre></td></tr></table></figure><p>系统预定义的广播：</p><p><img src="https://pic4.zhimg.com/80/v2-c1eb5c565ef8dbea3610dc7957225917_720w.jpg"></p><p>Android 系统预定义广播</p><p><strong>2.5.4 强制停止应用</strong></p><p><strong>adb shell am force-stop <packagename></strong></p><p><em>示例：</em></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 查询出包名</span></span><br><span class="line"><span class="variable">$adb</span> shell pm list packages </span><br><span class="line">.....</span><br><span class="line"><span class="comment"># 强制停止微信</span></span><br><span class="line"><span class="variable">$adb</span> shell am force<span class="literal">-stop</span> com.tencent.mm</span><br></pre></td></tr></table></figure><h2 id="2-6-文件管理"><a href="#2-6-文件管理" class="headerlink" title="2.6 文件管理"></a><strong>2.6 文件管理</strong></h2><p><strong>2.6.1 复制设备里的文件到电脑</strong></p><p><strong>adb pull &lt;设备里的文件路径&gt; [电脑上的目录]</strong></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> pull /sdcard/abc.mp4  ~/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径可能需要 root 权限才能访问，如果你的设备已经 root 过，可以先使用 adb shell 和 su 命令在 adb shell 里获取 root 权限后，先 cp &#x2F;path&#x2F;on&#x2F;device &#x2F;sdcard&#x2F;filename 将文件复制到 sdcard，然后 adb pull &#x2F;sdcard&#x2F;filename &#x2F;path&#x2F;on&#x2F;pc。</em></p></blockquote><p><strong>2.6.2 复制电脑里的文件到设备</strong></p><p><strong>adb push &lt;电脑上的文件路径&gt; &lt;设备里的目录&gt;</strong></p><p><strong>示例：</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> push  e:/ss.au3  /<span class="keyword">data</span>/local/tmp/</span><br></pre></td></tr></table></figure><blockquote><p><em><strong>小技巧</strong>：设备上的文件路径普通权限可能无法直接写入，如果你的设备已经 root 过，可以先 adb push &#x2F;path&#x2F;on&#x2F;pc &#x2F;sdcard&#x2F;filename，然后 adb shell 和 su 在 adb shell 里获取 root 权限后，cp &#x2F;sdcard&#x2F;filename &#x2F;path&#x2F;on&#x2F;device</em></p></blockquote><h2 id="2-7-使用ADB命令模拟按键-x2F-输入"><a href="#2-7-使用ADB命令模拟按键-x2F-输入" class="headerlink" title="2.7 使用ADB命令模拟按键&#x2F;输入"></a><strong>2.7 使用ADB命令模拟按键&#x2F;输入</strong></h2><p><strong>adb shell input keyevent <keycode></strong></p><p>keycode位操作参数，不同的 keycode 能实现不同的功能</p><p>完整的功能见：<a href="https://link.zhihu.com/?target=https://developer.android.com/reference/android/view/KeyEvent.html">https://developer.android.com/reference/android/view/KeyEvent.html</a></p><p>keycode 能实现不同的功能，对应的编码如下：</p><p><img src="https://pic3.zhimg.com/80/v2-19f07a6dc7f9b589c0ca808be3302e32_720w.jpg"></p><p>keycode 列表</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">26</span>  <span class="comment">#电源键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">82</span>  <span class="comment">#菜单键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">3</span>  <span class="comment">#HOME 键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">4</span> <span class="comment">#返回键</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">24</span> <span class="comment">#增加音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">25</span> <span class="comment">#降低音量</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">164</span> <span class="comment">#静音</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">85</span>  <span class="comment">#播放/暂停</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">86</span> <span class="comment">#停止播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">87</span> <span class="comment">#播放下一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">88</span> <span class="comment">#播放上一首</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">126</span> <span class="comment">#恢复播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">127</span> <span class="comment">#暂停播放</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">224</span> <span class="comment">#点亮屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input keyevent <span class="number">223</span> <span class="comment">#熄灭屏幕</span></span><br><span class="line"><span class="variable">$adb</span> shell input swipe <span class="number">300</span> <span class="number">1000</span> <span class="number">300</span> <span class="number">500</span>  <span class="comment">#滑动解锁，向上滑动手势解锁</span></span><br><span class="line"><span class="comment">#参数 300 1000 300 500 分别表示起始点x坐标 起始点y坐标 结束点x坐标 结束点y坐标 </span></span><br><span class="line"><span class="variable">$adb</span> shell input text hello <span class="comment">#焦点处于某文本框时输入文本</span></span><br></pre></td></tr></table></figure><h2 id="2-8-查看日志"><a href="#2-8-查看日志" class="headerlink" title="2.8 查看日志"></a><strong>2.8 查看日志</strong></h2><h3 id="2-8-1-Android-日志"><a href="#2-8-1-Android-日志" class="headerlink" title="2.8.1 Android 日志"></a><strong>2.8.1 Android 日志</strong></h3><p><strong>[adb] logcat [<option>] … [<filter-spec>] …</strong></p><p><em><strong>按级别过滤日志</strong></em></p><p>按某级别过滤日志则会将该级别及以上的日志输出，Android 日志的优先级如下：</p><blockquote><p>V —— Verbose（最低，输出得最多）<br>D —— Debug<br>I —— Info<br>W —— Warning<br>E —— Error<br>F —— Fatal<br>S —— Silent（最高，啥也不输出）</p></blockquote><p>示例：输出W之上的日志，W,E,F,S</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat *:W</span><br></pre></td></tr></table></figure><p><em><strong>按 tag 和级别过滤日志</strong></em></p><p><filter-spec> 可以由多个 <tag>[:priority] 组成</p><p>示例：输出 tag ActivityManager 的 I 以上级别日志，输出tag MyApp的D 以上级别日志，及其它 tag 的 S 级别日志（即屏蔽其它 tag 日志）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat ActivityManager:I MyApp:D *:S</span><br></pre></td></tr></table></figure><p><em><strong>日志格式</strong></em></p><p><strong>adb logcat -v <format></strong></p><p>指定日志输出格式</p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> &lt;format&gt;  指定日志输出格式</span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> brief   <span class="comment">#默认格式,&lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> <span class="keyword">process</span> <span class="comment">#&lt;priority&gt;(&lt;pid&gt;) &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> tag  <span class="comment">#&lt;priority&gt;/&lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> raw  <span class="comment">#&lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> time  <span class="comment">#&lt;datetime&gt; &lt;priority&gt;/&lt;tag&gt;(&lt;pid&gt;): &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> threadtime <span class="comment">#&lt;datetime&gt; &lt;pid&gt; &lt;tid&gt; &lt;priority&gt; &lt;tag&gt;: &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long  <span class="comment">#[ &lt;datetime&gt; &lt;pid&gt;:&lt;tid&gt; &lt;priority&gt;/&lt;tag&gt;:] &lt;message&gt;</span></span><br><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-v</span> long ActivityManager:I *:S  <span class="comment">#指定格式可与上面的过滤同时使用</span></span><br></pre></td></tr></table></figure><p><em><strong>清空日志</strong></em></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> logcat <span class="literal">-c</span></span><br></pre></td></tr></table></figure><p><strong>2.8.2 内核日志</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dmesg  </span><br></pre></td></tr></table></figure><p>查看内核日志</p><h2 id="2-9-查看设备信息"><a href="#2-9-查看设备信息" class="headerlink" title="2.9 查看设备信息"></a><strong>2.9 查看设备信息</strong></h2><h3 id="2-9-1-型号"><a href="#2-9-1-型号" class="headerlink" title="2.9.1 型号"></a><strong>2.9.1 型号</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.product.model</span><br></pre></td></tr></table></figure><h3 id="2-9-2-电池状况"><a href="#2-9-2-电池状况" class="headerlink" title="2.9.2 电池状况"></a><strong>2.9.2 电池状况</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys battery</span><br></pre></td></tr></table></figure><h3 id="2-9-3-屏幕分辨率"><a href="#2-9-3-屏幕分辨率" class="headerlink" title="2.9.3 屏幕分辨率"></a><strong>2.9.3 屏幕分辨率</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm size</span><br></pre></td></tr></table></figure><h3 id="2-9-4-屏幕密度"><a href="#2-9-4-屏幕密度" class="headerlink" title="2.9.4 屏幕密度"></a><strong>2.9.4 屏幕密度</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell wm density</span><br></pre></td></tr></table></figure><h3 id="2-9-5-显示屏参数"><a href="#2-9-5-显示屏参数" class="headerlink" title="2.9.5 显示屏参数"></a><strong>2.9.5 显示屏参数</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys window displays</span><br></pre></td></tr></table></figure><h3 id="2-9-6-android-id"><a href="#2-9-6-android-id" class="headerlink" title="2.9.6 android_id"></a><strong>2.9.6 android_id</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell settings get secure android_id</span><br></pre></td></tr></table></figure><h3 id="2-9-7-IMEI"><a href="#2-9-7-IMEI" class="headerlink" title="2.9.7 IMEI"></a><strong>2.9.7 IMEI</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell dumpsys iphonesubinfo</span><br><span class="line"><span class="comment">#而在 Android 5.0 及以上版本里这个命令输出为空，得通过其它方式获取了（需要 root 权限）：</span></span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="variable">$service</span> call iphonesubinfo <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-9-8-Android-系统版本"><a href="#2-9-8-Android-系统版本" class="headerlink" title="2.9.8 Android 系统版本"></a><strong>2.9.8 Android 系统版本</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell getprop ro.build.version.release</span><br></pre></td></tr></table></figure><h3 id="2-9-9-IP-地址"><a href="#2-9-9-IP-地址" class="headerlink" title="2.9.9 IP 地址"></a><strong>2.9.9 IP 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell ifconfig | find “Mask”</span><br><span class="line"><span class="variable">$adb</span> shell ifconfig wlan0 <span class="comment">#设备连着 WiFi，可以使用如下命令来查看局域网 IP</span></span><br><span class="line"><span class="variable">$adb</span> shell netcfg <span class="comment"># 上面两个无结果可以用这个，查看网络连接状态</span></span><br></pre></td></tr></table></figure><h3 id="2-9-10-Mac-地址"><a href="#2-9-10-Mac-地址" class="headerlink" title="2.9.10 Mac 地址"></a><strong>2.9.10 Mac 地址</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /sys/<span class="class"><span class="keyword">class</span>/<span class="title">net</span>/<span class="title">wlan0</span>/<span class="title">address</span> # 设备不同可能地址不同</span></span><br></pre></td></tr></table></figure><h3 id="2-9-11-CPU-信息"><a href="#2-9-11-CPU-信息" class="headerlink" title="2.9.11 CPU 信息"></a><strong>2.9.11 CPU 信息</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure><h3 id="2-9-12-内存信息"><a href="#2-9-12-内存信息" class="headerlink" title="2.9.12 内存信息"></a><strong>2.9.12 内存信息</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /proc/meminfo</span><br></pre></td></tr></table></figure><h3 id="2-9-13更多硬件与系统属性"><a href="#2-9-13更多硬件与系统属性" class="headerlink" title="2.9.13更多硬件与系统属性"></a><strong>2.9.13更多硬件与系统属性</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop</span><br></pre></td></tr></table></figure><p><strong>adb shell getprop &lt;属性名&gt;</strong></p><p>也可以</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | grep ro.product.cpu.abi</span><br><span class="line"><span class="variable">$adb</span> shell <span class="built_in">cat</span> /system/build.prop | find “ro.product.cpu.abi”</span><br></pre></td></tr></table></figure><p><img src="https://pic2.zhimg.com/80/v2-1991d0e88f480209f16d87c8dabf69b5_720w.jpg"></p><h2 id="2-10-修改设置"><a href="#2-10-修改设置" class="headerlink" title="2.10 修改设置"></a><strong>2.10 修改设置</strong></h2><p>修改设置之后，运行恢复命令仍然不太正常，可以运行 adb reboot 重启设备或手动重启。</p><p>修改设置的原理主要是通过 settings 命令修改 &#x2F;data&#x2F;data&#x2F;com.android.providers.settings&#x2F;databases&#x2F;settings.db 里存放的设置值。</p><h3 id="2-10-1分辨率"><a href="#2-10-1分辨率" class="headerlink" title="2.10.1分辨率"></a><strong>2.10.1分辨率</strong></h3><p><strong>adb shell wm size <em>480x1024</em></strong> #将分辨率修改为 480px * 1024px</p><p><strong>adb shell wm size reset</strong> #恢复原分辨率</p><h3 id="2-10-2屏幕密度"><a href="#2-10-2屏幕密度" class="headerlink" title="2.10.2屏幕密度"></a><strong>2.10.2屏幕密度</strong></h3><p><strong>adb shell wm density <em>160</em></strong> #屏幕密度修改为 160dpi</p><p><strong>adb shell wm density reset</strong> #恢复原屏幕密度</p><h3 id="2-10-3显示区域"><a href="#2-10-3显示区域" class="headerlink" title="2.10.3显示区域"></a><strong>2.10.3显示区域</strong></h3><p><strong>adb shell wm overscan <em>0,0,0,100</em></strong></p><p># 四个数字分别表示距离左、上、右、下边缘的留白像素，以上命令表示将屏幕底部 100px留白</p><p><strong>adb shell wm overscan reset</strong> #恢复显示区域</p><h3 id="2-10-4-关闭-USB-调试模式"><a href="#2-10-4-关闭-USB-调试模式" class="headerlink" title="2.10.4 关闭 USB 调试模式"></a><strong>2.10.4 关闭 USB 调试模式</strong></h3><p><strong>adb shell settings put global adb_enabled 0</strong></p><p>使用命令无法恢复调试模式，只能通过手动</p><h3 id="2-10-5-状态栏和导航栏的显示隐藏"><a href="#2-10-5-状态栏和导航栏的显示隐藏" class="headerlink" title="2.10.5 状态栏和导航栏的显示隐藏"></a><strong>2.10.5 状态栏和导航栏的显示隐藏</strong></h3><p><strong>adb shell settings put global policy_control <key-values></strong></p><p><key-values> 可由如下几种键及其对应的值组成，格式为 <key1>&#x3D;<value1>:<key2>&#x3D;<value2></p><p>key 键对应的值</p><p><img src="https://pic3.zhimg.com/80/v2-bd196a935a4b328d77fdfef289dc1926_720w.jpg"></p><p>这些键对应的值可则如下值用逗号组合</p><p><img src="https://pic1.zhimg.com/80/v2-a88f429d1bdaccbae6f7feeef65546d8_720w.jpg"></p><p>示例：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置在所有界面下都同时隐藏状态栏和导航栏</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.full=*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置在包名为 com.package1 和 com.package2 的应用里隐藏状态栏，在除了包名为 com.package3 的所有应用里隐藏导航栏。</span></span><br><span class="line"><span class="variable">$adb</span> shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,<span class="literal">-com</span>.package3</span><br></pre></td></tr></table></figure><h2 id="2-11-实用功能"><a href="#2-11-实用功能" class="headerlink" title="2.11 实用功能"></a><strong>2.11 实用功能</strong></h2><h3 id="2-11-1屏幕截图"><a href="#2-11-1屏幕截图" class="headerlink" title="2.11.1屏幕截图"></a><strong>2.11.1屏幕截图</strong></h3><p><strong>adb exec-out screencap -p &gt; img.png</strong> # 老版本无exec-out命令，只适合于新版的截图</p><p><strong>adb shell screencap -p &#x2F;sdcard&#x2F;img.png</strong> # 老版本截图先保存在设备端</p><p><strong>adb pull &#x2F;sdcard&#x2F;img.png</strong> # 通过pull拷贝到本地</p><p>screencap 参数：</p><p>参数 含义</p><p>-p 指定保存文件为 png 格式</p><p>-d display-id 指定截图的显示屏编号（有多显示屏的情况下）</p><h3 id="2-11-2录制屏幕"><a href="#2-11-2录制屏幕" class="headerlink" title="2.11.2录制屏幕"></a><strong>2.11.2录制屏幕</strong></h3><p><strong>#</strong> 默认录制时间和最长录制时间都是180s</p><p><strong>adb shell screenrecord &#x2F;sdcard&#x2F;filename.mp4</strong></p><p>screenrecord 参数：</p><p>参数 含义</p><p>--size WIDTHxHEIGHT 视频的尺寸，比如 1280x720，默认是屏幕分辨率。</p><p>--bit-rate RATE 视频的比特率，默认是 4Mbps。</p><p>--time-limit TIME 录制时长，单位秒。</p><p>--verbose 输出更多信息。</p><p><strong>2.11.3 重新挂载 system 分区为可写</strong></p><p><strong>注：需要 root 权限</strong></p><p>&#x2F;system 分区默认挂载为只读，但有些操作比如给 Android 系统添加命令、删除自带应用等需要对 &#x2F;system 进行写操作，所以需要重新挂载它为可读写。</p><p>步骤：</p><p>1.进入 shell 并切换到 root 用户权限。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>2.查看当前分区挂载情况。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mount</span></span><br><span class="line">输出如下</span><br><span class="line">.....</span><br><span class="line">debugfs /sys/kernel/debug debugfs rw,relatime <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /acct cgroup rw,relatime,cpuacct <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /sys/fs/cgroup tmpfs rw,seclabel,relatime,mode=<span class="number">750</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">tmpfs /mnt/obb tmpfs rw,seclabel,relatime,mode=<span class="number">755</span>,gid=<span class="number">1000</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">none /dev/cpuctl cgroup rw,relatime,cpu <span class="number">0</span> <span class="number">0</span></span><br><span class="line">/dev/block/mtdblock0 /system ext4 ro,seclabel,relatime,<span class="keyword">data</span>=ordered <span class="number">0</span> <span class="number">0</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p>找到其中我们关注的带 <strong>&#x2F;system</strong> 的那一行：</p><p>3.重新挂载。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mount</span> <span class="literal">-o</span> remount,rw <span class="literal">-t</span> yaffs2 /dev/block/mtdblock0 /system</span><br></pre></td></tr></table></figure><p><strong>2.11.4 查看连接过的 WiFi 密码</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$cat</span> /<span class="keyword">data</span>/misc/wifi/*.conf</span><br></pre></td></tr></table></figure><p><strong>2.11.5设置系统日期和时间</strong></p><p><strong>注：需要 root 权限</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br><span class="line"><span class="variable">$date</span> <span class="literal">-s</span> <span class="number">20190531.131600</span>  <span class="comment">#将系统日期和时间更改为 2019 年 05 月 31 日 13 点 16 分 00 秒。</span></span><br></pre></td></tr></table></figure><p><strong>2.11.6 重启手机</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><p><strong>2.11.7 检测设备是否已 root</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> shell</span><br><span class="line"><span class="variable">$su</span></span><br></pre></td></tr></table></figure><p>此时命令行提示符是 $ 则表示没有 root 权限，是 # 则表示已 root。</p><p><strong>2.11.8 使用 Monkey 进行压力测试</strong></p><p>Monkey 可以生成伪随机用户事件来模拟单击、触摸、手势等操作，可以对正在开发中的程序进行随机压力测试。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 向 &lt;packagename&gt; 指定的应用程序发送 500 个伪随机事件</span></span><br><span class="line"><span class="variable">$adb</span> shell monkey <span class="literal">-p</span> &lt;packagename&gt; <span class="literal">-v</span> <span class="number">500</span></span><br></pre></td></tr></table></figure><p>monkey 官方文档 <a href="https://link.zhihu.com/?target=https://developer.android.com/studio/test/monkey.html">https://developer.android.com/studio/test/monkey.html</a></p><p><strong>2.11.9 开启&#x2F;关闭 WiFi</strong></p><p><strong>注：需要 root 权限</strong></p><p>开启 WiFi：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi enable</span><br></pre></td></tr></table></figure><p>关闭 WiFi：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> root</span><br><span class="line"><span class="variable">$adb</span> shell svc wifi disable</span><br></pre></td></tr></table></figure><h2 id="2-12刷机相关命令"><a href="#2-12刷机相关命令" class="headerlink" title="2.12刷机相关命令"></a><strong>2.12刷机相关命令</strong></h2><p><strong>注：不要随便操作，没实验过无法保证成功</strong></p><h3 id="2-12-1重启到-Recovery-模式"><a href="#2-12-1重启到-Recovery-模式" class="headerlink" title="2.12.1重启到 Recovery 模式"></a><strong>2.12.1重启到 Recovery 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><h3 id="2-12-2从-Recovery-重启到-Android"><a href="#2-12-2从-Recovery-重启到-Android" class="headerlink" title="2.12.2从 Recovery 重启到 Android"></a><strong>2.12.2从 Recovery 重启到 Android</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot</span><br></pre></td></tr></table></figure><h3 id="2-12-3重启到-Fastboot-模式"><a href="#2-12-3重启到-Fastboot-模式" class="headerlink" title="2.12.3重启到 Fastboot 模式"></a><strong>2.12.3重启到 Fastboot 模式</strong></h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot bootloader</span><br></pre></td></tr></table></figure><h3 id="2-12-4通过-sideload-更新系统"><a href="#2-12-4通过-sideload-更新系统" class="headerlink" title="2.12.4通过 sideload 更新系统"></a><strong>2.12.4通过 sideload 更新系统</strong></h3><p>如果我们下载了 Android 设备对应的系统更新包到电脑上，那么也可以通过 adb 来完成更新。</p><p>以 Recovery 模式下更新为例：</p><p>1.重启到 Recovery 模式。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> reboot recovery</span><br></pre></td></tr></table></figure><p>2.在设备的 Recovery 界面上操作进入 Apply update-Apply from ADB。</p><p>注：不同的 Recovery 菜单可能与此有差异，有的是一级菜单就有 Apply update from ADB。</p><p>3.通过 adb 上传和更新系统。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$adb</span> sideload &lt;path<span class="literal">-to-update</span>.zip&gt;</span><br></pre></td></tr></table></figure><h2 id="2-13-更多-adb-shell-命令"><a href="#2-13-更多-adb-shell-命令" class="headerlink" title="2.13 更多 adb shell 命令"></a><strong>2.13 更多 adb shell 命令</strong></h2><h3 id="2-13-1查看进程"><a href="#2-13-1查看进程" class="headerlink" title="2.13.1查看进程"></a><strong>2.13.1查看进程</strong></h3><p>adb shell ps</p><h3 id="2-13-2查看实时资源占用情况"><a href="#2-13-2查看实时资源占用情况" class="headerlink" title="2.13.2查看实时资源占用情况"></a><strong>2.13.2查看实时资源占用情况</strong></h3><p>adb shell top</p><p>top命令参数如下：</p><p>使用方法: top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]</p><blockquote><p>-m num 最多显示多少个进程<br>-n num 刷新多少次后退出<br>-d num 刷新时间间隔（单位秒，默认值 5）<br>-s col 按某列排序（可用 col 值：cpu, vss, rss, thr）<br>-t 显示线程信息<br>-h 显示帮助文档</p></blockquote><p><strong>2.13.3其它</strong></p><p><img src="https://pic1.zhimg.com/80/v2-6044fe28a519255e62608e7ea542e65c_720w.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue之父子组件同步数据</title>
      <link href="/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vue%E4%B9%8B%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/"/>
      <url>/2022/07/30/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/Vue%E4%B9%8B%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>通过父组件传递prop给子组件，子组件没有刷新，可能是以下几种问题导致</p><ol><li>父组件给子组件绑定的值，可能在组件渲染的时候没有获取到，导致后面父组件有数据更新，子组件也获取不到</li><li>父组件传给子组件的时候，子组件通过data函数去接收，此时父组件更新数据时，子组件仍然获取的是第一次传过来的值</li></ol><p>解决以上两个问题，首先要确认父组件的prop值是否存在，并且在子组件添加watch属性，及时更新同步data和prop的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">test</span> <span class="attr">:datas</span>=<span class="string">&quot;control&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    child: &#123;&#123;isA&#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isA</span>: <span class="variable language_">this</span>.<span class="property">datas</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">datas</span>: &#123;</span><br><span class="line">      <span class="attr">handler</span>: <span class="keyword">function</span>(<span class="params">n</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isA</span> = n</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git使用问题</title>
      <link href="/2022/07/25/Git%E7%AF%87/git%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/25/Git%E7%AF%87/git%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<!-- title【必需】文章標題date【必需】文章創建日期updated【可選】文章更新日期tags【可選】文章標籤categories【可選】文章分類keywords【可選】文章關鍵字description【可選】文章描述top_img【可選】文章頂部圖片cover【可選】文章縮略圖(如果沒有設置top_img,文章頁頂部將顯示縮略圖，可設為false/圖片地址/留空)comments【可選】顯示文章評論模塊(默認 true)toc【可選】顯示文章TOC(默認為設置中toc的enable配置)toc_number【可選】顯示toc_number(默認為設置中toc的number配置)toc_style_simple【可選】顯示 toc 簡潔模式copyright【可選】顯示文章版權模塊(默認為設置中post_copyright的enable配置)copyright_author【可選】文章版權模塊的文章作者copyright_author_href【可選】文章版權模塊的文章作者鏈接copyright_url【可選】文章版權模塊的文章連結鏈接copyright_info【可選】文章版權模塊的版權聲明文字mathjax【可選】顯示mathjax(當設置mathjax的per_page: false時，才需要配置，默認 false)katex【可選】顯示katex(當設置katex的per_page: false時，才需要配置，默認 false)aplayer【可選】在需要的頁面加載aplayer的js和css,請參考文章下面的音樂 配置highlight_shrink【可選】配置代碼框是否展開(true/false)(默認為設置中highlight_shrink的配置)aside【可選】顯示側邊欄 (默認 true) --><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p><code>git</code>一些使用的问题总结</p></div><h3 id="gitignore不生效"><a href="#gitignore不生效" class="headerlink" title=".gitignore不生效"></a>.gitignore不生效</h3><ol><li>.gitignore不生效的原因: 文件曾经被<code>track</code>过，所以不会被ignore<br> <strong>解决方法：</strong><br>  git清除本地缓存（改变成为track）的状态，然后再提交</li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br></pre></td></tr></table></figure><ol><li>clone下来的项目.gitignore不生效</li></ol><p>  <strong>解决方法:</strong><br>  在每个clone下来的仓库中手动设置不要检查特定文件的更改情况。</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git update-index --assume-unchanged PATH //在PATH处输入要忽略的文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>problem</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/problem/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/vue/problem/</url>
      
        <content type="html"><![CDATA[<ol><li>vue重载组件</li></ol><blockquote><p>应用场景: 异步加载数据,数据更新不及时(例如删除地图,应用地图)会展示错误的数据,和绑定key并无关系,可能是展示的数据太大.<br>解决办法:有三种重载组件的方法:1.使用v-if和$nextTick()组合对整个页面的DOM重新加载; 2.使用this.$router.go(0)重新刷新这个页面,但是会造成数据丢失,不推荐使用; 3.给子组件绑定一个key的值为时间戳,每次渲染的时候会去拿这个key 值做对比，如果这一次的key 值和上一次的key值是不一样的才会重新渲染dom元素,会重新执行子组件的周期函数.</p></blockquote><ol start="2"><li><p>map()方法需要return一个值,否则会返回一个undefined</p></li><li><p>Object.assign(target, source)可枚举属性的值从一个或多个源对象分配到目标对象。它将返回目标对象。</p></li></ol><blockquote><p>如果目标对象中的属性具有相同的键，则属性将被源对象中的属性覆盖。后面的源对象的属性将类似地覆盖前面的源对象的属性。</p></blockquote><ol start="4"><li>vue操作dom需要把对应属性绑定在data上</li><li>父子组件执行顺序:父组件(create)-&gt;子组件(create,mount)-&gt;父组件(mount)</li></ol><blockquote><p>此时父组件mount没执行,数据没挂载,所以子组件拿不到父组件的传递数据</p></blockquote><ol start="6"><li><p>transform, 操作地图的时候先操作平移再进行缩放的顺序,否则会出现偏差</p></li><li><p>axios请求数据时,设置全局content-type时有bug,需要在参数设置</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">header</span>:&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json;charset=UTF-8&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用post请求时,如果data参数为string类型时,<code>content-type</code>自动转化为<code>application/x-www-form-urlencoded</code></p><ol start="8"><li>增加删除class</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">contain</span>(<span class="string">&#x27;className&#x27;</span>)</span><br><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;className&#x27;</span>)</span><br><span class="line"><span class="variable constant_">DOM</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;className&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="9"><li>使用watch<br>handler:function(){<br>this.&#x2F;&#x2F;&#x2F;&#x2F;<br>&#x2F;&#x2F; <strong>如果使用箭头函数会报错,箭头函数会执行父级上下文,没有自己的作用域</strong><br>}</li><li>$emit传单个参数 $emit(‘test’,parma1)<br>@test($event,$1)</li></ol><p>传多个参数时 $emit(‘test’,parma1,parma2)<br>@test(arguments)</p><ol start="11"><li><p>store.state  数据变化太快监听不到值的变化,只能监听到最后一次,预测是watch只是等栈事件完成之后监听<br>通过watch 监听vuex数据,通过computed返回state的值, 注意需要在state里面初始化改变的值</p></li><li><p>后端开启的服务地址为 127.0.0.1:3000, 前端访问外网ip才能访问到后端<br>axios 配置withCredentials  后端不允许 配置Access-Control-Allow-Origin 为 “*”,只能为域名</p></li><li><p>has been blocked by CORS policy: Request header field cache-control is not allowed by Access-Control-Allow-Headers in preflight response. 配置跨域后预检测、<br>配置前端request Header 与后端配置 allow cor header 一致</p></li><li><p>使用顶级域名混用cookie时会导致不同环境存在多个cookie字段,导致登录数据出错</p></li><li><p>vue3中使用<code>&lt;script setup&gt;</code> await&#x2F;async 一定要赋值给一个变量，否则全局会返回一个<code>Promise</code>对象,造成页面渲染不出来</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>project_excise</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/project_excise/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/project_excise/</url>
      
        <content type="html"><![CDATA[<h3 id="扫地机器人项目"><a href="#扫地机器人项目" class="headerlink" title="扫地机器人项目"></a>扫地机器人项目</h3><ol><li>canvas使用</li><li>数据传输</li></ol><h3 id="电商小程序"><a href="#电商小程序" class="headerlink" title="电商小程序"></a>电商小程序</h3><ul><li>优化点：<ol><li>商品详情页可添加加载动画  </li><li>配置全局选项包括，字体，主题色,导航栏胶囊高度，自适应设备</li></ol></li></ul><h3 id="TB电商后台"><a href="#TB电商后台" class="headerlink" title="TB电商后台"></a>TB电商后台</h3>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在服务器上部署前端项目</title>
      <link href="/2022/07/22/Nginx%E7%AF%87/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/07/22/Nginx%E7%AF%87/%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在服务器上部署前端的项目"><a href="#如何在服务器上部署前端的项目" class="headerlink" title="如何在服务器上部署前端的项目"></a>如何在服务器上部署前端的项目</h1><blockquote><p>前端的项目必须跑在服务器上, 所有有两种选择, 一种是直接跑在Node环境上, 这种模式比较简单, 直接在服务器上克隆项目, 安装相关依赖, 开通端口就可以运行; 另外一种就是将项目打包成静态资源, 在服务器中配置Nginx代理服务,这种模式功能强大, 只需要配置Nginx服务器.</p></blockquote><ol><li><p>Node环境部署前端项目(<strong>不推荐</strong>)</p><p> 优点: 部署方便, 简单易懂,更新版本较为方便.适合不熟悉服务器的同学去使用<br> 缺点: 使用Node环境比较吃资源, 不适合大量用户同时访问</p><p> <strong>部署</strong></p><p>1.1 在服务器上部署Node环境</p><p> 和在本地一样, 去Node官网下载Linux版本的Nodejs,放在服务器上,配置环境变量,具体操作百度即可</p><p> 1.2 将项目放在服务器上</p><ul><li><p>新建文件夹<code>mkdir /www/wwwroot/项目名</code></p></li><li><p>使用Ftp工具FileZilla连接服务器, 将本地项目除<code>node_modules</code>以外的文件上传到服务器新建的文件夹中, 进入项目目录安装依赖<code>npm i</code></p></li><li><p>使用<code>pm2</code>工具后台运行项目</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//安装pm2</span><br><span class="line">npm install -g pm2</span><br><span class="line">//进入项目目录,运行项目</span><br><span class="line">pm2 start build/dev-server.js</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态资源部署前端项目</p><p> 优点: 响应速度更快,低系统资源消耗, 负载均衡,使用反向代理减少宕机的风险,热部署<br> 缺点: 对比apache不稳定，由于是单进程多线程，进程死掉会影响很多用户。</p><p> <strong>部署</strong></p><p> 2.1. 将项目打包成静态资源</p><p> 在项目终端运行<code>npm run build --production</code>,将环境切换成生产环境</p><p> 2.2. 将项目放到服务器上</p><p> 使用FTP工具将静态资源丢在服务器中<br> 去<code>FileZilla</code>官网下载window10的版本,安装完成后,在软件上填写相关信息.</p><ul><li>主机名: 服务器的ip</li><li>用户名: ftp的用户名</li><li>密码: ftp的密码</li><li>端口: 21</li></ul><p> 直接点快速连接就可以连接, 连接成功后会显示ftp用户的根目录</p><p> 把本地的静态资源直接丢在ftp用户根目录中即可</p><p> 2.3. 配置Nginx服务器(需要root用户权限)</p><p> 找到ngingx配置文件<code>nginx.conf</code>,添加配置</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span>   <span class="number">80</span>; <span class="comment"># 监听的端口</span></span><br><span class="line"><span class="attribute">server_name</span>  localhost;  <span class="comment"># 域名</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.php;</span><br><span class="line"><span class="attribute">root</span> /www/wwwroot/项目目录;  <span class="comment"># 服务器解析域名后会执行指定目录的文件</span></span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 跨域代理设置</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://www.proxy.com; <span class="comment"># 要实现跨域的域名</span></span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Nginx篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置Nginx环境</title>
      <link href="/2022/07/22/Nginx%E7%AF%87/%E9%85%8D%E7%BD%AENginx%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/07/22/Nginx%E7%AF%87/%E9%85%8D%E7%BD%AENginx%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="如何配置Nginx"><a href="#如何配置Nginx" class="headerlink" title="如何配置Nginx"></a>如何配置Nginx</h1><p><a href="https://zhuanlan.zhihu.com/p/34943332">原文链接</a></p><blockquote><p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p></blockquote><p><img src="https://picb.zhimg.com/80/v2-e1826bab1d07df8e97d61aa809b94a10_720w.jpg" alt="Nginx技术架构"></p><h2 id="Nginx的正反向代理"><a href="#Nginx的正反向代理" class="headerlink" title="Nginx的正反向代理"></a>Nginx的正反向代理</h2><p><strong>正向代理</strong>:由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现，这就是一个简单的正向代理的例子。这里你能够发现，正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p><p><img src="https://pic4.zhimg.com/80/v2-c8ac111c267ae0745f984e326ef0c47f_720w.jpg" alt="正向代理"></p><p><strong>反向代理</strong>:当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是透明的。</p><p><img src="https://pic2.zhimg.com/80/v2-4787a512240b238ebf928cd0651e1d99_720w.jpg" alt="反向代理"></p><p>反向代理的作用:</p><ol><li>保障应用服务器的安全（增加一层代理，可以屏蔽危险攻击，更方便的控制权限）</li><li>实现负载均衡（稍等~下面会讲）</li><li>实现跨域（号称是最简单的跨域方式）</li></ol><h3 id="服务器使部署多个网站"><a href="#服务器使部署多个网站" class="headerlink" title="服务器使部署多个网站"></a>服务器使部署多个网站</h3><p>通常在一个服务器中会部署多个网站,用户通过域名区分不同的网站,通过反向代理就可以配置访问的是哪个文件的内容</p><ol><li>配置Nginx文件nginx.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&#x27;nginx.conf&#x27;</span> <span class="comment"># 找到nginx配置的文件</span></span><br><span class="line">vim /path/nginx.conf  <span class="comment"># 编辑配置文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## nginx.conf里面添加新的server ##</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name host_name; <span class="comment">#添加新的域名</span></span><br><span class="line">    root /www/wwwroot/项目目录 <span class="comment">#指向新的目录</span></span><br><span class="line">    index index.html index.php index.htm</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加负载均衡配置"><a href="#添加负载均衡配置" class="headerlink" title="添加负载均衡配置"></a>添加负载均衡配置</h3><blockquote><p>随着业务的不断增长和用户的不断增多，一台服务已经满足不了系统要求了。这个时候就出现了服务器 集群。<br>在服务器集群中，Nginx 可以将接收到的客户端请求“均匀地”（严格讲并不一定均匀，可以通过设置权重）分配到这个集群中所有的服务器上。这个就叫做负载均衡。</p></blockquote><p>负载均衡的作用:</p><ul><li>分摊服务器集群压力</li><li>保证客户端访问的稳定性</li></ul><p>Nginx还带有健康检查（服务器心跳检查）功能，会定期轮询向集群里的所有服务器发送健康检查请求，来检查集群中是否有服务器处于异常状态。<br>一旦发现某台服务器异常，那么在这以后代理进来的客户端请求都不会被发送到该服务器上（直健康检查发现该服务器已恢复正常），从而保证客户端访问的稳定性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加两个新的服务,用于分担8080端口的压力</span></span><br><span class="line"> upstream domain &#123;</span><br><span class="line">    server localhost:9090;</span><br><span class="line">    server localhost:8081;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> server</span><br><span class="line">    &#123;</span><br><span class="line">    listen 8080;</span><br><span class="line">    server_name domain;</span><br><span class="line">    index index.html;</span><br><span class="line">    root /www/wwwroot;</span><br><span class="line">    location / &#123;</span><br><span class="line">              root   html; <span class="comment"># Nginx默认值</span></span><br><span class="line">              index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">             proxy_pass http://47.93.52.58; <span class="comment"># 负载均衡配置，请求会被平均分配到80和8001端口</span></span><br><span class="line">             proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h3><p><a href="https://juejin.im/post/6844904135951646733">原文链接</a></p><p>跨域是前端经常会遇到的问题，解决的方式有很多，例如：jsonp、node.js中转、CORS等。</p><p>但是使用 Nginx 来跨域简单明了，主要用到的是 Nginx 的反向代理原理。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首尾配置暂时忽略</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment"># 跨域代理设置</span></span><br><span class="line">            proxy_pass http://www.proxy.com; <span class="comment"># 要实现跨域的域名</span></span><br><span class="line">            add_header Access-Control-Allow-Origin *;</span><br><span class="line">            add_header Access-Control-Allow-Methods <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">            add_header Access-Control-Allow-Headers <span class="string">&#x27;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 首尾配置暂时忽略</span></span><br></pre></td></tr></table></figure><h3 id="配置静态文件服务器"><a href="#配置静态文件服务器" class="headerlink" title="配置静态文件服务器"></a>配置静态文件服务器</h3><p>~ 开头表示区分大小写的正则匹配，^非，&#x3D; 开头表示精确匹配</p><p>使用 <code>alias</code>会直接映射到<code>/www/wwwroot/api-tool/uploads/</code>目录下</p><p><strong>使用<code>root</code>会映射到<code>/www/wwwroot/api-tool/uploads/file/</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost; <span class="comment"># 自己PC的ip或者服务器的域名 charset utf-8; # 避免中文乱码</span></span><br><span class="line">                location ^~ /file/ &#123;</span><br><span class="line">                        index index.html index.htm;</span><br><span class="line">                        <span class="built_in">alias</span> /www/wwwroot/api-tool/uploads/; <span class="comment"># 存放文件的目录</span></span><br><span class="line">                        autoindex on; <span class="comment"># 索引</span></span><br><span class="line">                        autoindex_exact_size on; <span class="comment"># 显示文件大小</span></span><br><span class="line">                        autoindex_localtime on; <span class="comment"># 显示文件时间</span></span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础笔记</title>
      <link href="/2022/07/22/Python/python%E5%9F%BA%E7%A1%80%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/07/22/Python/python%E5%9F%BA%E7%A1%80%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='/img-url' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">name</div>  <p>description</p>  <a href='/link'></a>  </figcaption>  </figure>  </div><ol><li>python基本语法<br>  列表: List<br>  访问列表的值: list[1]<br>  访问列表片段: list[1:5] 截取第二个第四个  list[1:] 第二个开始截取<br>  更新列表: list.append(value)<br>  删除列表值: del list[index]<br>  比较两个元素  cmp(list1, list2) (python3废弃)</li></ol><ul><li><p>如果是数字,执行必要的数字强制类型转换,然后比较。<br>  如果有一方的元素是数字,则另一方的元素”大”(数字是”最小的”)<br>  否则,通过类型名字的字母顺序进行比较<br>列表长度 len(list)<br>最大值 max(list) 最小值 min()</p><p>元组: tuple和列表相似，区别之处在于tuple不能被修改,用()</p><p>字符串: String<br>以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+1 个子字符串 list.split(str&#x3D;””, num&#x3D;string.count(str))</p><p>字典: dictionary<br>del dic[‘key’] 删除字典某一个<br>dic.clear() 删除字典</p><p>dic.copy()  返回字典浅复制<br>dic.has_key(key) 返回bool<br>dic.items() 以列表返回可遍历(键, 值) 元组数组</p></li></ul><h3 id="python工具库"><a href="#python工具库" class="headerlink" title="python工具库"></a>python工具库</h3><ol><li>time:</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">time() <span class="comment"># 当前时间戳</span></span><br><span class="line">localtime() <span class="comment"># 获取当前时间</span></span><br><span class="line">asctime() <span class="comment"># 格式化时间</span></span><br><span class="line">strtime() <span class="comment"># 格式化日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成2016-03-20 11:45:39形式</span></span><br><span class="line"><span class="built_in">print</span> time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) <span class="comment"># 2016-04-07 10:25:09</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 格式化成Sat Mar 28 22:24:24 2016形式</span></span><br><span class="line"><span class="built_in">print</span> time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime())  <span class="comment"># Thu Apr 07 10:25:09 2016</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Mar 28 22:24:24 2016&quot;</span></span><br><span class="line"><span class="built_in">print</span> time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)) <span class="comment"># 1459175064.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>math:</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pi   <span class="comment"># Π</span></span><br><span class="line"><span class="built_in">pow</span>(x, y)  x值 y幂</span><br><span class="line"><span class="built_in">round</span>() 四舍五入</span><br><span class="line"><span class="built_in">range</span>(start, stop, step)</span><br><span class="line">sqart(number[, ndigits]) 开方</span><br></pre></td></tr></table></figure><ol start="3"><li>numpy:</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shape 返回ndarray长度元组</span><br><span class="line">ndim 返回ndarray维度</span><br><span class="line">size 返回多维数组元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  向量<br>  np.array(int)<br>  np.linspace(start,end,len) len為陣列大小，均分成幾等分<br>  np.arange(start,stop,step) 返回一个有终点和起点的固定步长的排列</p><p>  矩阵生成</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">np.mat(<span class="string">&quot;1,2,3;4,5,6;7,8,9&quot;</span>)</span><br><span class="line">np.matrix([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">np.empty(shape, dtype = <span class="built_in">float</span>, order=<span class="string">&#x27;C&#x27;</span>) shape 数组形状 dtype 数据类型，可选 產生一個無初始值的陣列</span><br><span class="line">np.zeros(shape) </span><br><span class="line">np.ones(shape)</span><br><span class="line">np.full(shape, N)</span><br></pre></td></tr></table></figure><p>  阵列生成</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">np.random.random(shape) 随机（<span class="number">0</span>-<span class="number">1</span>）阵列</span><br><span class="line">np.random.ranf(shape)</span><br><span class="line">np.random.randint(start,stop, shape) 随机整数阵列</span><br></pre></td></tr></table></figure><p>  <em>矩阵属性</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a.T 转阵列</span><br><span class="line">a.H 返回自身共轭位置</span><br><span class="line">a.I 返回自身逆矩阵</span><br><span class="line">a.A 返回自身数据<span class="number">2</span>维数组一个视图</span><br></pre></td></tr></table></figure><p>  <em>矩阵拼接</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">a*b  适用于 (<span class="number">1</span>,) * (n,<span class="number">1</span>)</span><br><span class="line">np.vstack([a,b])</span><br><span class="line">np.hstack([a,b])</span><br><span class="line">np.concatenate((a,b),axis=<span class="number">0</span>)</span><br><span class="line">np.split(shape,sliceNumber,axis)</span><br></pre></td></tr></table></figure><p>  <em>矩阵索引</em></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a[:][<span class="number">0</span>] [][]有先后顺序</span><br><span class="line">a[:,<span class="number">0</span>]  []同时进行</span><br><span class="line"></span><br><span class="line">np.dot(a,b) 点阵相乘</span><br><span class="line">A = [[a11,a12,a13],[a21,a22,a23]]</span><br><span class="line">B = [[b11,b12],[b21,b22],[b31,b32]]</span><br><span class="line">C = AB  = [[a11*b11 + a12*b21 + a13 * b31, a11 * b12 + a12 * b22 + a13*b32],</span><br><span class="line">            [a21*b11 + a22*b21 + a23*b32, a21*b12 + a22*b22 + a23*b32]]</span><br><span class="line"><span class="number">1</span>、当矩阵A的列数（column）等于矩阵B的行数（row）时，A与B可以相乘。</span><br><span class="line"><span class="number">2</span>、矩阵C的行数等于矩阵A的行数，C的列数等于B的列数。</span><br><span class="line"><span class="number">3</span>、乘积C的第m行第n列的元素等于矩阵A的第m行的元素与矩阵B的第n列对应元素乘积之和。</span><br><span class="line"></span><br><span class="line">np.mean(a, [sort]) 计算平均数, sort为<span class="number">0</span>计算每列平均数<span class="number">1</span>计算每行平均数  </span><br><span class="line">np.std(a)  计算标准差</span><br><span class="line">np.exp(num) 以自然常数e为底的指数函数</span><br><span class="line">np.argmin(num) 检索数组中最小值的位置，并返回其下标值</span><br></pre></td></tr></table></figure><ol start="4"><li>matplotlib: 可视化工具</li></ol>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">marker <span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;,&#x27;</span>   <span class="string">&#x27;o&#x27;</span> <span class="string">&quot;*&quot;</span>  <span class="number">7</span></span><br><span class="line"><span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;-.&#x27;</span>,<span class="string">&#x27;--&#x27;</span> 线类型</span><br><span class="line">markersize，简写为 ms：定义标记的大小。</span><br><span class="line">markerfacecolor，简写为 mfc：定义标记内部的颜色。rgbcmykw</span><br><span class="line">markeredgecolor，简写为 mec：定义标记边框的颜色</span><br><span class="line"></span><br><span class="line">plt.scatter(x,y) 散点图</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">  x，y：长度相同的数组，也就是我们即将绘制散点图的数据点，输入数据。</span><br><span class="line"></span><br><span class="line">  s：点的大小，默认 <span class="number">20</span>，也可以是个数组，数组每个参数为对应点的大小。</span><br><span class="line"></span><br><span class="line">  c：点的颜色，默认蓝色 <span class="string">&#x27;b&#x27;</span>，也可以是个 RGB 或 RGBA 二维行数组。</span><br><span class="line"></span><br><span class="line">  marker：点的样式，默认小圆圈 <span class="string">&#x27;o&#x27;</span>。</span><br><span class="line"></span><br><span class="line">  cmap：Colormap，默认 <span class="literal">None</span>，标量或者是一个 colormap 的名字，只有 c 是一个浮点数数组的时才使用。如果没有申明就是 image.cmap。</span><br><span class="line"></span><br><span class="line">  norm：Normalize，默认 <span class="literal">None</span>，数据亮度在 <span class="number">0</span>-<span class="number">1</span> 之间，只有 c 是一个浮点数的数组的时才使用。</span><br><span class="line"></span><br><span class="line">  vmin，vmax：：亮度设置，在 norm 参数存在时会忽略。</span><br><span class="line"></span><br><span class="line">  alpha：：透明度设置，<span class="number">0</span>-<span class="number">1</span> 之间，默认 <span class="literal">None</span>，即不透明。</span><br><span class="line"></span><br><span class="line">  linewidths：：标记点的长度。</span><br><span class="line"></span><br><span class="line">  edgecolors：：颜色或颜色序列，默认为 <span class="string">&#x27;face&#x27;</span>，可选值有 <span class="string">&#x27;face&#x27;</span>, <span class="string">&#x27;none&#x27;</span>, <span class="literal">None</span>。</span><br><span class="line"></span><br><span class="line">  plotnonfinite：：布尔值，设置是否使用非限定的 c ( inf, -inf 或 nan) 绘制点。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">plt.plot()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>scikit_learn</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element_problem</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/element_problem/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/element_problem/</url>
      
        <content type="html"><![CDATA[<ol><li>el-dialog组件使用v-if和:visible可以刷新组件，但是对于同一组件默认属性相同的数据<br>不能达到效果，数据会在组件渲染后传入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>-values=<span class="string">&quot;device.type == &#x27;department&#x27; ? device.deptData : device.identityData&quot;</span></span><br></pre></td></tr></table></figure><p>使用:key&#x3D;”new Date()” 会及时刷新组件，但是会产生闪烁</p><p>解决方案: 给dialog的子组件绑定key属性，只局部刷新内部组件，不刷新dialog组件就不会因为backgroud刷新引起<br>闪烁</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>basic_js</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/basic_js/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/basic_js/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript基础语法"><a href="#Javascript基础语法" class="headerlink" title="Javascript基础语法"></a>Javascript基础语法</h1><h2 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h2><ul><li><p>属性<br><code>length</code>: 返回数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].<span class="property">length</span>  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p>方法<br> <code>filter()</code>: 过滤满足条件的数组的每一项内容</p></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">42</span>,<span class="number">63</span>]</span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">filter</span>( <span class="keyword">function</span> (<span class="params">item</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 11,11,42,63</span></span><br></pre></td></tr></table></figure><p><code>indexOf()</code>:可返回被指定的值在字符串中首次出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;babdjacdab&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>))  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p><code>splice()</code>:用于添加或删除数组中元素,返回删除的数据以数组的形式,并改变原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>))  <span class="comment">//[&#x27;green&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">var</span> res = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;hello&#x27;, &#x27;pink&#x27;, &#x27;world&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>slice()</code>:用于删除数组中元素,返回删除的数据以数组的形式,不改变原数组</p><ul><li>和<code>splice</code>的区别在于不能新增数据,且不会改变原数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">2</span>,<span class="number">1</span>))  <span class="comment">//[&#x27;green&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;green&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p> <code>push()</code>:向数组末尾添加一个或多个元素，并返回新的长度</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>,<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">var</span> res = arr.<span class="title function_">push</span>(<span class="number">2</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)  <span class="comment">//5</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">//[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;green&#x27;, 2, &#x27;pink&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h2><ol><li>属性<br><code>length</code>: 返回字符串的长度</li><li>方法<br><code>substr(start, length?)</code>: 接受<code>start</code>参数，表示从<code>start</code>索引开始,如果为负数,则从<code>strleng + start</code> 开始.<code>length</code>参数可选，表示截取的长度.不带该参数，则返回从<code>start</code>开始之后的内容，如果为负数或0,就返回空字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">3</span>) <span class="comment">// &#x27;de&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(-<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// &#x27;d&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">1</span>) <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line"><span class="string">&#x27;abcde&#x27;</span>.<span class="title function_">substr</span>(<span class="number">2</span>, -<span class="number">1</span>) <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="对象-Object"><a href="#对象-Object" class="headerlink" title="对象 Object"></a>对象 Object</h2><h2 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h2><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><h2 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h2><ol><li>属性<br><code>scrollTop</code>: 设置或返回滚动条到顶部的像素值,当一个元素没有滚动条,<code>scrollTop</code>值为0</li><li>方法</li></ol><h2 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h2><p><code>removeChild()</code>:删除字节点列表中的某个节点，删除成功就返回被删除的节点，否则返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> abox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   small.<span class="title function_">removeChild</span>(p)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   abox.<span class="title function_">removeChild</span>(h1)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>children()</code>:返回被选元素的所有直接子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是p段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">       </span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> abox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="keyword">var</span> small = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.small&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(abox.<span class="property">children</span>);  <span class="comment">//[div.small, h1]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>offsetTop</code>: 只读属性,返回当前元素相对于<code>offsetParent</code>元素顶部内边距的距离</p><blockquote><p>该属性不会随着元素的<code>translate</code>位移移动而改变,但是改变其他定位可以改变其数值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ball.<span class="property">style</span>.<span class="property">marginTop</span> = <span class="string">&#x27;100px&#x27;</span> <span class="comment">// 改变</span></span><br><span class="line">ball.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;100px&#x27;</span> <span class="comment">// 改变</span></span><br><span class="line">ball.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translateY(100px)&#x27;</span> <span class="comment">// 不改变</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS缺陷</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/js%E7%BC%BA%E9%99%B7/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/javascript/js%E7%BC%BA%E9%99%B7/</url>
      
        <content type="html"><![CDATA[<p>服务端传Long类型数据，js最多16进度，会丢失数据</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>interview-Vue</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/interview-Vue/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/interview-Vue/</url>
      
        <content type="html"><![CDATA[<ol><li><p>VUE生命周期<br> 父子组件嵌套顺序<br> 两种路由优劣</p></li><li><p>vuex作用是什么,为什么不用全局变量<br> 用于DOM的渲染,重载DOM</p></li><li><p>vue和react区别</p><ol><li>数据传递<br> React一直不支持双向绑定，提倡的是单向数据流，称之为onChange&#x2F;setState()模式。不过由于我们一般都会用Vuex以及Redux等单向数据流的状态管理框架，因此很多时候我们感受不到这一点的区别了。</li><li>通信方式<br> Vue中有三种方式可以实现组件通信：父组件通过props向子组件传递数据或者回调，虽然可以传递回调，但是我们一般只传数据；子组件通过事件向父组件发送消息；通过V2.2.0中新增的provide&#x2F;inject来实现父组件向子组件注入数据，可以跨越多个层级。<br> React中也有对应的三种方式：父组件通过props可以向子组件传递数据或者回调；可以通过 context 进行跨层级的通信，这其实和 provide&#x2F;inject 起到的作用差不多。React 本身并不支持自定义事件，而Vue中子组件向父组件传递消息有两种方式：事件和回调函数，但Vue更倾向于使用事件。在React中我们都是使用回调函数的，这可能是他们二者最大的区别。</li><li>渲染方式<br> React是在组件JS代码中，通过原生JS实现模板中的常见语法，比如插值，条件，循环等，都是通过JS语法实现的，更加纯粹更加原生。而Vue是在和组件JS代码分离的单独的模板中，通过指令来实现的，比如条件语句就需要 v-if 来实现对这一点，这样的做法显得有些独特，会把HTML弄得很乱。</li></ol></li><li><p>vue2和3的区别</p><ol><li>响应式原理api的改变,vue2响应式采用的是defineProperty,vue3采用的proxy,前者修改对象属性的权限标签，后者代理整个对象</li></ol> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果一个描述符同时拥有 value 或 writable 和 get 或 set 键，则会产生一个异常。三个取其一</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;访问了x属性&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    q = n</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了x值&#x27;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举，访问 或for in</span></span><br><span class="line"><span class="attr">configurable</span>: <span class="literal">true</span> <span class="comment">// 修改属性描述符或删除描述符</span></span><br><span class="line">&#125;)</span><br><span class="line">a.<span class="property">x</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  <span class="comment">// 改变了x  访问了x</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>); <span class="comment">// 访问了x属性 [1,2,3,4]</span></span><br><span class="line">a.<span class="property">x</span>[<span class="number">1</span>] = <span class="string">&#x27;a&#x27;</span> <span class="comment">// 访问了  访问数组下标是无法监听到值得改变，但是值确实被改变过，所以没有去执行set()， 同理push和pop等数组的操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">x</span>) <span class="comment">// 访问了 [&#x27;a&#x27;,2,3,4]</span></span><br></pre></td></tr></table></figure><p> 但是使用proxy代理可以避免这种情况</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(a, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target[property]: &#x27;</span>, target[property]);</span><br><span class="line">    <span class="keyword">return</span> target[property]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">target, prop, n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(n)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this value is not a Array&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> a1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj)</span><br><span class="line">a1[<span class="number">1</span>] <span class="comment">// target[property]:  2</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">2</span>] <span class="comment">// target[property]:  3</span></span><br><span class="line"></span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">12</span> <span class="comment">// this value is not a Array</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a1[2] : &#x27;</span>, a1[<span class="number">2</span>] ); <span class="comment">// 12</span></span><br><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(o, &#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target[prop]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">target,prop,n</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop <span class="keyword">in</span> target) &#123;</span><br><span class="line">    target[prop] = n</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target[prop]: &#x27;</span>, target[prop]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;not exist props&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj2.<span class="property">x</span> = <span class="number">2</span> <span class="comment">// target[prop]:  2</span></span><br><span class="line">obj2.<span class="property">z</span> = <span class="number">3</span> <span class="comment">//  throw new Error(&#x27;not exist props&#x27;) 非目标属性也会运行set()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;obj2: &#x27;</span>, obj2); <span class="comment">// &#123;x:2,y:2&#125; proxy会改变原对象</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>diff算法， vue3采用block tree的做法，重新渲染算法利用闭包进行缓存，vue2对比所有DOM<br> 建立数据, vue2使用选项类型options API 对比vue3合成型Composition API， 旧的分割了不同的属性（data,computed,methods…） 新的Composition API能使用function来分割，</p></li><li><p>composition api和option api的区别<br> • 在逻辑组织和逻辑复用方面，Composition API是优于Options API<br> • Composition API中没有对this的使用，减少了this指向不明的情况<br> • 如果是小型组件，可以继续使用Options API，也是十分友好的</p></li></ol></li><li><p>实现组件逻辑复用（mixin和composition api）<br> 全局mixin</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;data () &#123;&#125;, <span class="title function_">created</span>(<span class="params"></span>) &#123;&#125;,<span class="attr">methods</span>:&#123;&#125;&#125;)</span><br></pre></td></tr></table></figure><p> 局部调用mixin</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123; <span class="title function_">data</span>(<span class="params"></span>) &#123;&#125;,<span class="attr">methods</span>: &#123;&#125; &#125;</span><br><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">&#x27;./xxx.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">mixins</span>:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Composition的使用</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;onMounted,reactive,watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span><br><span class="line"><span class="attr">props</span>: &#123; <span class="attr">name</span>: <span class="title class_">String</span>, &#125;, </span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>, </span><br><span class="line"><span class="attr">components</span>: &#123;&#125;, </span><br><span class="line"><span class="title function_">setup</span>(<span class="params">props,ctx</span>) &#123; </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">name</span>) </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>) </span><br><span class="line">    <span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;) </span><br><span class="line">    <span class="title function_">watch</span>( <span class="function">() =&gt;</span> data.<span class="property">a</span>, <span class="function">(<span class="params">val, oldVal</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(val) &#125; ) <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123; &#125;) </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">myMethod</span> = (<span class="params">obj</span>) =&gt;&#123; &#125; </span><br><span class="line">    retrun &#123; data, myMethod &#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;data, myMethod&#125; <span class="keyword">from</span> <span class="string">&#x27;./xxx.vue&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>具名插槽</p></li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- //子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    这是头部内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">:content</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    这是主体内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    这是尾部内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- //父组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 这是头部内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这是主体内容 --&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.content.prop&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这是尾部内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>excise</title>
      <link href="/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/excise/"/>
      <url>/2022/07/22/%E5%89%8D%E7%AB%AF%E7%AF%87/%E9%9D%A2%E8%AF%95%E7%AF%87/excise/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首字母大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">firstUpper</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toLowerCase</span>().<span class="title function_">replace</span>(<span class="regexp">/^\S/</span>, <span class="function"><span class="params">l</span> =&gt;</span> l.<span class="title function_">toUpperCase</span>() )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ar = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line">ar.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line">ar.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数组去重<br>大致分为两种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Set不会出现重复的值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr) <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  不能去除重复的对象,因为指针地址不同</span></span><br><span class="line"><span class="comment">//两层循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">e,index,arr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(e,<span class="number">0</span>) === index</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr) <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"> <span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">let</span> x = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre,curr</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (pre.<span class="title function_">indexOf</span>(curr) === -<span class="number">1</span>) &#123;</span><br><span class="line">         pre.<span class="title function_">push</span>(curr)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> pre</span><br><span class="line"> &#125;, [])</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否为数字</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;1111&#x27;</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="built_in">parseInt</span>(a)))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是数字&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//parseInt()会忽略掉数字后面的字符</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">isNaN</span>(<span class="title class_">Number</span>(a)))&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是数字&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断字符串是否全是中文</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="string">&#x27;#076&#x27;</span>, <span class="string">&#x27;#076&#x27;</span>, <span class="string">&#x27;隆隆岩&#x27;</span>, <span class="string">&#x27;ゴローニャ&#x27;</span>, <span class="string">&#x27;Golem&#x27;</span>, <span class="string">&#x27;岩石&#x27;</span>, <span class="string">&#x27;地面&#x27;</span> ]</span><br><span class="line">a.<span class="title function_">filter</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="regexp">/[A-Za-z]+/</span>.<span class="title function_">test</span>(e) || <span class="regexp">/^[\u4e00-\u9fa5]+$/</span>.<span class="title function_">test</span>(e) )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>求数组最大值</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...a)</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">filter</span>(<span class="function">(<span class="params">e,i</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[i]&gt;a[i+<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>父级元素宽高度位置,子元素设置宽高度一致</p></li><li><p>递归深拷贝</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> o = &#123;</span><br><span class="line"> <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line"> <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line"> <span class="attr">c</span>:&#123;</span><br><span class="line">     <span class="attr">x</span>:<span class="number">3</span>,</span><br><span class="line">     <span class="attr">y</span>:<span class="number">4</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyFun</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> copy;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> o === <span class="string">&#x27;string&#x27;</span> || <span class="keyword">typeof</span> o === <span class="string">&#x27;number&#x27;</span> || <span class="keyword">typeof</span> o === <span class="string">&#x27;array&#x27;</span>)&#123;</span><br><span class="line">        copy = o</span><br><span class="line">        <span class="keyword">return</span> copy</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> o === <span class="string">&#x27;object&#x27;</span> )&#123;</span><br><span class="line">        <span class="keyword">let</span> copyO = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(o, key)) &#123;</span><br><span class="line">                <span class="comment">// const e = o[key]</span></span><br><span class="line">                <span class="keyword">const</span> e = <span class="title function_">copyFun</span>(o[key]); <span class="comment">//递归</span></span><br><span class="line">                copyO[key] = e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> copyO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title function_">copyFun</span>(o)</span><br><span class="line">o.<span class="property">c</span>.<span class="property">x</span> = <span class="string">&#x27;sss&#x27;</span></span><br><span class="line">o.<span class="property">a</span> = <span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"></span><br><span class="line">json.<span class="title function_">stringify</span>()  json.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure></li><li><p>2!&#x3D;”2”+2&#x3D;&#x3D;”2”</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">2</span>!=<span class="string">&quot;2&quot;</span>+<span class="number">2</span>==<span class="string">&quot;2&quot;</span> <span class="comment">// false</span></span><br><span class="line"> <span class="comment">// ！=  ，  ==  优先级为 12      +，- 的优先级为14</span></span><br><span class="line"> <span class="comment">// 考虑由下面的表示法描述的表达式。其中，OP1 和 OP2 都是操作符的占位符。</span></span><br><span class="line"></span><br><span class="line"><span class="string">`a OP1 b OP2 c`</span></span><br><span class="line"><span class="comment">// 如果 OP1 和 OP2 具有不同的优先级，则优先级最高的运算符先执行，不用考虑结合性。观察乘法如何具有比加法更高的优先级并首先执行，即使加法是首先写入代码的。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + <span class="number">10</span> * <span class="number">2</span>);   <span class="comment">// 输出 23</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> + (<span class="number">10</span> * <span class="number">2</span>)); <span class="comment">// 输出 23 因为这里的括号是多余的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">3</span> + <span class="number">10</span>) * <span class="number">2</span>); <span class="comment">// 输出 26 因为括号改变了优先级</span></span><br><span class="line">&gt; 一般的结合性是从做到右, 像，<span class="string">`赋值,三元运算符,幂,逻辑非,按位非,await,typeof,一元加法,一元减法`</span> 则是从右到左</span><br></pre></td></tr></table></figure><ol start="10"><li><p>树形数据结构解析</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d</span><br></pre></td></tr></table></figure></li><li><p>循环打印倒三角形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1,2,3</span></span><br><span class="line"><span class="comment">// 1,2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">t</span>(<span class="params">N</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> arr = <span class="title class_">Array</span>(N).<span class="title function_">fill</span>(<span class="number">1</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">e, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> e + index</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(arr))</span><br><span class="line">    N--</span><br><span class="line">    <span class="keyword">if</span> (N &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_">t</span>(N)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组对象根据每一项key分组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">groupBy</span> = (<span class="params">arr, property</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> keys = [], data = &#123;&#125;</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data[e[property]]) &#123;</span><br><span class="line">      data[e[property]] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!keys.<span class="title function_">includes</span>(e[property])) &#123;</span><br><span class="line">      keys.<span class="title function_">push</span>(e[property])</span><br><span class="line">    &#125;</span><br><span class="line">    data[e[property]].<span class="title function_">push</span>(e)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;barney&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;fred&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;0000&#x27;</span>, <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;eqwewqe&#x27;</span>, <span class="attr">id</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;pebbles&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;pebbles&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">user</span>: <span class="string">&#x27;pebbles&#x27;</span>, <span class="attr">id</span>: <span class="number">3</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`output-&gt;groupBy(data, &#x27;id&#x27;)`</span>, <span class="title function_">groupBy</span>(data, <span class="string">&#x27;id&#x27;</span>))</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
          <category> 面试篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git-commond</title>
      <link href="/2022/07/22/Git%E7%AF%87/git-commond/"/>
      <url>/2022/07/22/Git%E7%AF%87/git-commond/</url>
      
        <content type="html"><![CDATA[<h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：</p><p><a href="http://msysgit.github.com/">http://msysgit.github.com/</a></p><p>完成安装之后，就可以使用命令行的 <code>git</code> 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。在 Fedora 上用 yum 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git-core</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p>在 Mac 上安装 Git 有两种方式。最容易的当属使用图形化的 Git 安装工具，界面如图 1-7，下载地址在：</p><p><a href="http://code.google.com/p/git-osx-installer">http://code.google.com/p/git-osx-installer</a></p><p>另一种是通过 MacPorts <a href="http://www.macports.org/">http://www.macports.org</a> 安装。如果已经装好了 MacPorts，用下面的命令安装 Git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo port install git-core +svn +doc +bash_completion +gitweb</span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>Git 提供了一个叫做 git config 的工具 - <code>etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</p><ul><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><p>在 Windows 系统上，Git 会找寻用户主目录下的 <code>.gitconfig</code> 文件。主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\Documents andSettings\$USER</code>。此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。 第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，<br>说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name John Doe</span><br><span class="line">git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><h2 id="git基础"><a href="#git基础" class="headerlink" title="git基础"></a>git基础</h2><h3 id="取得项目地址"><a href="#取得项目地址" class="headerlink" title="取得项目地址"></a>取得项目地址</h3><h3 id="在工作目录中初始化新仓库"><a href="#在工作目录中初始化新仓库" class="headerlink" title="在工作目录中初始化新仓库"></a>在工作目录中初始化新仓库</h3><p>要对现有的某个项目开始用 Git 管理，只需到此项目所在的目录，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 <code>git add</code> 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *.c</span><br><span class="line">git add README</span><br><span class="line">git commit -m &#x27;initial project version&#x27;</span><br></pre></td></tr></table></figure><h3 id="从现有仓库克隆"><a href="#从现有仓库克隆" class="headerlink" title="从现有仓库克隆"></a>从现有仓库克隆</h3><p>克隆仓库的命令格式为 <code>git clone [url]</code>。比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git</span><br><span class="line">git clone git://github.com/schacon/grit.git mygrit //重命名项目</span><br></pre></td></tr></table></figure><h3 id="记录更新到仓库"><a href="#记录更新到仓库" class="headerlink" title="记录更新到仓库"></a>记录更新到仓库</h3><p>在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文件，如此重复</p><h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><p>要确定哪些文件当前处于什么状态，可以用 <code>git status</code> 命令。如果在克隆仓库之后立即执行此命令，会看到类似这样的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit (working directory clean</span><br></pre></td></tr></table></figure><h3 id="跟踪新文件"><a href="#跟踪新文件" class="headerlink" title="跟踪新文件"></a>跟踪新文件</h3><p>使用命令 <code>git add</code> 开始跟踪一个新文件。所以，要跟踪 README 文件，运行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;添加要纳入版本控制的文件 <code>git add *</code> 添加所有文件 git add 三种效果根据文件状态不同</p><ul><li><code>untracked</code> 跟踪新文件</li><li><code>unmodified</code></li><li><code>modified</code> 放到暂存区</li><li><code>staged</code></li></ul><p>合并 把冲突文件标记为以解决 git commit -m &#39;项目修改描述&#39; ### 回滚</p><p>git reset –hard id 回滚id版本 git reset –hard HEAD^ 回退上一个版本 ### 分支</p><p>如果添加不想上传文件可以删除不需要的文件<br>git rm -r –cached [文件名]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch//查看分支</span><br><span class="line">git branch -a//查看所有分支包括远程*表示当前分支</span><br><span class="line">git branch day01//创建分支</span><br><span class="line">git branch -d day01  //删除day01分支</span><br><span class="line">git checkout 分支名 //进入当前分支</span><br><span class="line">git merge 分支名 //合并分支</span><br><span class="line">git checkout -b 分支名 //创建并跳转</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/schacon/grit.git(地址) mytest(重新命名) //克隆远程到本地</span><br><span class="line">git remote add &lt;origin&gt; &lt;address&gt; //添加到远程仓库 origin为仓库名</span><br><span class="line">git push -u origin master // 推送master分支到远程仓库</span><br><span class="line">git push origin [本地分支名]:[远程分支名]  //推送本地分支到远程分支</span><br><span class="line">git push origin --delete [远程分支]  //删除远程分支</span><br></pre></td></tr></table></figure><h3 id="从远程仓库更新到本地"><a href="#从远程仓库更新到本地" class="headerlink" title="从远程仓库更新到本地"></a><strong>从远程仓库更新到本地</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin master</span><br><span class="line">git log -p master origin/master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>以上命令的含义： 首先从远程的 origin 的 master 主分支下载最新的版本到 origin&#x2F;master 分支上 然后比较本地的 master 分支和 origin&#x2F;master 分支的差别 最后进行合并</p><h3 id="从远程仓库更新到本地并合并"><a href="#从远程仓库更新到本地并合并" class="headerlink" title="从远程仓库更新到本地并合并"></a><strong>从远程仓库更新到本地并合并</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master // 上述命令其实相当于 git fetch + git merge</span><br></pre></td></tr></table></figure><h2 id="Git进阶部分"><a href="#Git进阶部分" class="headerlink" title="Git进阶部分"></a>Git进阶部分</h2><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log [--pretty=online] //查看最近几次提交的记录 `[--pretty=online]`可选参数会显示详细信息比如注释</span><br><span class="line">git reset --hard [commit id]或者git reset --hard HEAD^ //回退到指定(commit id)版本或者回退到上一版本(HEAD^),上上版本(HEAD^^)</span><br><span class="line">git reflog //查看最近几次操作记录 回退远程仓库需要在本地回退到当前版本再强制推送到远程</span><br><span class="line">git push -f origin master //表示推送到主分支</span><br></pre></td></tr></table></figure><h3 id="合并提交代码"><a href="#合并提交代码" class="headerlink" title="合并提交代码"></a>合并提交代码</h3><blockquote><p>为了让代码提交更简洁，合并到主分支更容易，使用变基rebase简化commit</p></blockquote><ol><li>先切换到主分支更新代码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull origin master</span><br><span class="line">//然后切换到修改文件的分支</span><br><span class="line">git checkout [branch]</span><br><span class="line">git rebase master //进行变基操作</span><br><span class="line"> /*</span><br><span class="line">*[此时解决冲突并提交代码]</span><br><span class="line">*/</span><br><span class="line">git push origin [远程分支] //提交,可能会使用--force参数强制提交</span><br><span class="line">或者远程变基</span><br><span class="line">git rebase -i origin/master</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>使用stash命令提交，为了保证跟新代的成功，使用暂存操作</li></ol><p><img src="http://blog.ws865.com/wp-content/uploads/2019/11/1599557045-5bb2990fc95ada8.png" alt="暂存模式"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash save -a &#x27;message&#x27; //将本地修改添加到暂存区</span><br><span class="line">git stash list //查看暂存区列表</span><br><span class="line">git pull origin master //更新代码到当前分支</span><br><span class="line">git stash pop stash@&#123;id&#125; //恢复改动</span><br><span class="line">/*</span><br><span class="line">*[此时解决冲突并提交代码]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**推荐: ** [如何优雅的进行版本回退 · includeios/document](https://github.com/includeios/document/issues/12)</span><br><span class="line"></span><br><span class="line">1. -   [版本回退 - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/896043488029600/897013573512192)</span><br><span class="line">2. -   [git 回退到某版本后,再在此版本上更新,无法 push · Ruby China](https://ruby-china.org/topics/11637)</span><br><span class="line">3. -   [git回退版本（線上和本地倉庫） | 程式前沿](https://codertw.com/程式語言/561978/)</span><br><span class="line">4. -   [git reset soft,hard,mixed之区别深解 - 菜鸟++ - 博客园](https://www.cnblogs.com/keystone/p/10700617.html)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装jdk</title>
      <link href="/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85jdk/"/>
      <url>/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85jdk/</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7-x系统安装JAVA环境"><a href="#Centos7-x系统安装JAVA环境" class="headerlink" title="Centos7.x系统安装JAVA环境"></a>Centos7.x系统安装JAVA环境</h1><ol><li><p>下载jdk文件</p><p> 此次下载的是jdk8版本,官网地址<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">Java SE Development Kit 8 Downloads</a>,最近官网改版后,需要Oracle账户才能登录下载,推荐使用国内镜像<a href="https://mirrors.huaweicloud.com/java/jdk/8u152-b16/">华为开源镜像站-jdk8</a></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkcd /usr/local/src/java //新建并进入目录</span><br><span class="line"></span><br><span class="line">wget https://mirrors.huaweicloud.com/java/jdk/8u152-b16/jdk-8u152-linux-i586.tar.gz //下载文件</span><br><span class="line"></span><br><span class="line">tar -xzf jdk-8u152-linux-x64.tar.gz -C /usr/local/java //移动并重命名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /java/bin</span><br><span class="line"></span><br><span class="line">./java -version //java version <span class="string">&quot;1.8.0_xxxx&quot;</span>,说明安装成功</span><br></pre></td></tr></table></figure></li><li><p>配置java环境</p><p> 配置jdk全局环境变量</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">//在末尾添加</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile //执行刚修改的文件</span><br><span class="line"></span><br><span class="line">java -version //java version <span class="string">&quot;1.8.0_xxxx&quot;</span>,说明配置成功</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令积累</title>
      <link href="/2022/07/22/Linux%E7%AF%87/linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/"/>
      <url>/2022/07/22/Linux%E7%AF%87/linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令积累"><a href="#Linux命令积累" class="headerlink" title="Linux命令积累"></a>Linux命令积累</h1><ul><li><a href="#linux%E5%91%BD%E4%BB%A4%E7%A7%AF%E7%B4%AF">Linux命令积累</a><ul><li><a href="#%E6%96%87%E4%BB%B6%E5%A4%B9%E7%AE%A1%E7%90%86">文件夹管理</a></li><li><a href="#%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%BC%96%E8%BE%91">文件管理编辑</a></li><li><a href="#%E7%B3%BB%E7%BB%9F%E7%AE%A1%E7%90%86">系统管理</a></li><li><a href="#%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86">磁盘管理</a></li><li><a href="#%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93">文件传输</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF">网络通讯</a></li><li><a href="#%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86">设备管理</a></li><li><a href="#%E5%A4%87%E4%BB%BD%E5%8E%8B%E7%BC%A9">备份压缩</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4">其他命令</a></li><li><a href="#%E6%89%A9%E5%B1%95">扩展</a></li></ul></li></ul><h2 id="文件夹管理"><a href="#文件夹管理" class="headerlink" title="文件夹管理"></a>文件夹管理</h2><ol><li><code>ls</code> - 显示指定工作目录下的内容及属性信息</li><li><code>mkdir</code> - 创建目录</li><li><code>cp [option] src dest</code> - 复制文件或目录</li></ol><blockquote><p>option可选参数<br>   -a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。<br>   -d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。<br>   -f：覆盖已经存在的目标文件而不给出提示。<br>   -i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。<br>   -p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。<br>   -r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。<br>   -l：不复制文件，只是生成链接文件。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用指令 cp 将当前目录 test/ 下的所有文件复制到新目录 newtest 下，输入如下命令：</span></span><br><span class="line"><span class="built_in">cp</span> –r <span class="built_in">test</span>/ newtest    </span><br></pre></td></tr></table></figure><ol start="4"><li><code>mv</code> - 移动或改名文件</li><li><code>pwd</code> - 显示当前路径</li><li><code>mkdir dir &amp;&amp; cd $_</code> - 创建并进入目录</li></ol><h2 id="文件管理编辑"><a href="#文件管理编辑" class="headerlink" title="文件管理编辑"></a>文件管理编辑</h2><ol><li><p><code>cat</code> - 在终端设备上显示文件内容</p></li><li><p><code>echo</code> - 输出字符串或提取Shell变量的值</p></li><li><p><code>rm</code> - 移除文件或目录</p></li><li><p><code>tail</code> - 查看文件尾部内容</p></li><li><p><code>rmdir</code> - 删除空目录</p></li><li><p><code>sed</code> - 编辑文件</p></li><li><p>提取文件名<br><code>$(basename $&#123;file%.*&#125;)</code> 提取文件名<br><code>$&#123;files##*/&#125;</code> 提取最后一级目录名<br><code>$&#123;basename $&#123;file##*/&#125;&#125;</code> 提取文件后缀</p></li><li><p>解压文件<br><code>tar -zxvf abc.tgz</code></p></li></ol><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ol><li><code>find</code> - 查找和搜索文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find path -option [-<span class="built_in">print</span>] [-<span class="built_in">exec</span> -ok <span class="built_in">command</span>]</span><br></pre></td></tr></table></figure><ol start="2"><li><code>netstat</code> - 显示当前的网络状态<blockquote><p>可以通过<code>cd /proc/$&#123;进程id&#125;/cwd</code>进入该进程项目的目录</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-a (all)显示所有选项，默认不显示LISTEN相关</span><br><span class="line">-t (tcp)仅显示tcp相关选项</span><br><span class="line">-u (udp)仅显示udp相关选项</span><br><span class="line">-n 拒绝显示别名，能显示数字的全部转化成数字。</span><br><span class="line">-l 仅列出有在 Listen (监听) 的服務状态</span><br><span class="line"></span><br><span class="line">-p 显示建立相关链接的程序名</span><br><span class="line">-r 显示路由信息，路由表</span><br><span class="line">-e 显示扩展信息，例如uid等</span><br><span class="line">-s 按各个协议进行统计</span><br><span class="line">-c 每隔一个固定时间，执行该netstat命令。</span><br></pre></td></tr></table></figure></li></ol><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><ol><li><code>df -h [path]</code> - 显示磁盘空间使用情况</li><li><code>du -sh [path]*</code> 查看当前目录每个文件夹内存使用情况<blockquote><p>等同于 <code>du --max-depth=1 -h</code></p></blockquote></li></ol><p>可选参数</p><ul><li><code>-a, --all</code> 包含所有的具有 0 Blocks 的文件系统</li><li><code>--block-size=&#123;SIZE&#125;</code> 使用 {SIZE} 大小的 Blocks</li><li><code>-h, --human-readable</code> 使用人类可读的格式(预设值是不加这个选项的…)</li><li><code>-H, --si</code> 很像 -h, 但是用 1000 为单位而不是用 1024</li><li><code>-i, --inodes</code> 列出 inode 资讯，不列出已使用 block</li><li><code>-k, --kilobytes</code> 就像是 –block-size&#x3D;1024</li><li><code>-l, --local</code> 限制列出的文件结构</li><li><code>-m, --megabytes</code> 就像 –block-size&#x3D;1048576</li><li><code>--no-sync</code> 取得资讯前不 sync (预设值)</li><li><code>-P, --portability</code> 使用 POSIX 输出格式</li><li><code>--sync</code> 在取得资讯前 sync</li><li><code>-t, --type=TYPE</code> 限制列出文件系统的 TYPE</li><li><code>-T, --print-type</code> 显示文件系统的形式</li><li><code>-x, --exclude-type=TYPE</code> 限制列出文件系统不要显示 TYPE</li><li><code>-v</code> (忽略)</li><li><code>--help</code> 显示这个帮手并且离开</li><li><code>--version</code> 输出版本资讯并且离开</li></ul><ol start="3"><li><code>ps aux --sort -rss | head -n 10</code> 查看内存占用前10</li><li><code>ps aux --sort -pcpu | head -n 10</code> 查看CPU占用前10</li></ol><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><ol><li><code>curl</code> - 文件传输工具</li></ol><h2 id="网络通讯"><a href="#网络通讯" class="headerlink" title="网络通讯"></a>网络通讯</h2><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><h2 id="备份压缩"><a href="#备份压缩" class="headerlink" title="备份压缩"></a>备份压缩</h2><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ol><li>kill -9 $(netstat -tlnp|grep 8080|awk ‘{print $7}’|awk -F ‘&#x2F;‘ ‘{print $1}’)  杀死指定端口的进程</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><ol><li><code>reboot</code></li><li><code>shutdown -r now</code> 立即重启</li><li><code>shutdown -r 10</code> 10分钟后重启</li><li><code>shutdown -r 10:00</code> 10:00重启</li></ol><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><p><code>halt</code> 立即关机<br><code>poweroff</code> 立刻关机<br><code>shutdown -h now</code> 立刻关机<br><code>shutdown -h 10</code> 10分钟关机</p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器环境配置</title>
      <link href="/2022/07/22/Linux%E7%AF%87/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/22/Linux%E7%AF%87/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="配置服务器主机环境"><a href="#配置服务器主机环境" class="headerlink" title="配置服务器主机环境"></a>配置服务器主机环境</h1><h2 id="进行基础环境配置"><a href="#进行基础环境配置" class="headerlink" title="进行基础环境配置"></a>进行基础环境配置</h2><ol><li><p>查看当前系统的类型</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/issue          //适用于所有Linux发行版</span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release //仅适用于redhat系列的Linux</span><br></pre></td></tr></table></figure></li><li><p>配置网络开机自启</p><blockquote><p>因为适用主机作为服务器,重启时需要保证网络自动开启</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts //进入网络配置文件夹</span><br><span class="line">vim ifcfg-eno1                    //进入配置项，有可能是ifcfg-eno0，视机器不同</span><br><span class="line">ONBOOT=<span class="built_in">yes</span>                        //将ONBOOT=no改为ONBOOT=<span class="built_in">yes</span></span><br></pre></td></tr></table></figure></li><li><p>开启SSH连接</p><blockquote><p>centos7开启ssh连接的方法,将下面命令的前的<code>#</code>删掉,或者修改<code>yes</code>和<code>no</code></p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">Port: 22                    //开启端口监听</span><br><span class="line">PermitRootLogin <span class="built_in">yes</span>         //允许远程登录</span><br><span class="line">PasswordAuthentication <span class="built_in">yes</span>  //开启密码登录</span><br></pre></td></tr></table></figure><p> 然后保存文件并退出</p></li><li><p>开启sshd服务</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service sshd start</span><br></pre></td></tr></table></figure><p> 检查sshd服务是否已经开启,输入<code>ps -e | grep sshd</code></p><p> 显示<code>2248 ? 00:00:00 sshd</code>则开启成功</p><p> 查看ip地址：<code>ifconfig</code></p></li></ol><h2 id="配置软件环境"><a href="#配置软件环境" class="headerlink" title="配置软件环境"></a>配置软件环境</h2><h3 id="使用宝塔面板一键安装"><a href="#使用宝塔面板一键安装" class="headerlink" title="使用宝塔面板一键安装"></a>使用宝塔面板一键安装</h3><ol><li><p>centos7.x版本下安装命令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p> 安装完成之后可以看到用户名和密码,如果忘记密码可在远程终端输入<code>bt</code>命令查看宝塔相关信息,包括用户名和密码</p><p> <a href="https://www.bt.cn/bbs/thread-19376-1-1.html">其他Linux版本安装宝塔面板链接&gt;</a></p></li><li><p>一键配置LNMP<br> 安装完宝塔面板,在浏览器中输入<code>ip地址:8888</code>进入宝塔页面,即可在软件商店安装各种环境</p></li></ol><h3 id="使用wget网络下载安装"><a href="#使用wget网络下载安装" class="headerlink" title="使用wget网络下载安装"></a>使用wget网络下载安装</h3><h2 id="相关文献"><a href="#相关文献" class="headerlink" title="相关文献"></a>相关文献</h2><ol><li><a href="https://www.cnblogs.com/wzk-0000/p/7483262.html">查看Linux系统版本</a></li><li><a href="https://blog.csdn.net/trackle400/article/details/52755571">虚拟机下CentOS7开启SSH连接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装mysql57</title>
      <link href="/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85mysql57/"/>
      <url>/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85mysql57/</url>
      
        <content type="html"><![CDATA[<ol><li>查看当前安装得mysql(没有安装请跳过)</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#移除mysql依赖</span></span><br><span class="line">yum remove -y packageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除mysql得文件</span></span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="built_in">rm</span> -rf ./mysql_name</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>mysql5.7安装</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment"># 安装mysql 源</span></span><br><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看源</span></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"><span class="comment"># 移除源</span></span><br><span class="line">rpm -e 文件名 --nodeps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看安装成功否</span></span><br><span class="line">yum repolist enabled | grep <span class="string">&quot;mysql.*-community.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">yum install -y mysql-community-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看mysql状态</span></span><br><span class="line">systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl enabled mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重载配置</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改root账户密码</span></span><br><span class="line"><span class="comment"># mysql 安装完成之后，生成的默认密码在 /var/log/mysqld.log 文件中。使用 grep 命令找到日志中的密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入mysql</span></span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;MyNewPass4!&#x27;</span>; </span><br><span class="line"><span class="comment"># 查看修改密码规则</span></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">&#x27;validate_password%&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>其他纪要</p></li><li><p>安装报错Error: GPG check FAILED<br>  安装得时候<br>  <code>yum install packageName --nogpgcheck</code></p></li><li><p>跳过密码登录<br>  <code>vim /etc/my.cnf</code><br>  添加 <code>skip-grant-tables</code><br>  保存 <code>systemctl resatrt mysqld</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux系统文件分类</title>
      <link href="/2022/07/22/Linux%E7%AF%87/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/"/>
      <url>/2022/07/22/Linux%E7%AF%87/linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux安装后文件的分类及作用"><a href="#Linux安装后文件的分类及作用" class="headerlink" title="Linux安装后文件的分类及作用"></a>Linux安装后文件的分类及作用</h1><h2 id="文件系统的类型"><a href="#文件系统的类型" class="headerlink" title="文件系统的类型"></a>文件系统的类型</h2><p>Linux文件的类型有四种. 普通文件, 目录文件, 连接文件和特殊文件, 可用file命令识别.</p><ol><li><p><strong>普通文件</strong>: 如文本文件, 代码文件, shell脚本, 二进制可执行文件等,可用<code>cat, less, vi, emacs</code>来查看内容, 使用mv来改名.</p></li><li><p><strong>目录文件</strong>: 包括文件名、子目录名及其指针。它是LINUX储存文件名的唯一地方，可用ls列出目录文件.</p></li><li><p><strong>连接文件</strong>: 是指向同一索引节点的那些目录条目。用ls来查看是，连接文件的标志用l开头，而文件面后以”-&gt;”指向所连接的文件。</p></li><li><p><strong>特殊文件</strong>: LINUX的一些设备如磁盘、终端、打印机等都在文件系统中表示出来，则一类文件就是特殊文件，常放在&#x2F;dev目录内。例如，软驱A称为&#x2F;dev&#x2F;fd0。LINUX无C：的概念，而是用&#x2F;dev&#x2F;had来自第一硬盘。</p></li></ol><h2 id="文件系统分类"><a href="#文件系统分类" class="headerlink" title="文件系统分类"></a>文件系统分类</h2><ol><li><p><code>/</code>: 这是根目录,所有文件从根目录开始</p></li><li><p><code>/root</code>: 这是系统管理员(root user)的目录。对于系统来说，系统管理员就好比是上帝，它能对系统做任何事情，甚至包括删除你的文件。因此，请小心使用root帐号。</p></li><li><p><code>/bin</code>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><code>/boot</code>：<br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><code>/dev</code> ：<br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><code>/etc</code>：<br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><code>/home</code>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</p></li><li><p><code>/lib</code>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><code>/lost+found</code>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><code>/media</code>：<br>linux 系统会自动识别一些设备，例如U盘、光驱等等，当识别后，Linux 会把识别的设备挂载到这个目录下。</p></li><li><p><code>/mnt</code>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在 &#x2F;mnt&#x2F; 上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><code>/opt</code>：<br>opt 是 optional(可选) 的缩写，这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><code>/proc</code>：<br>proc 是 Processes(进程) 的缩写，&#x2F;proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li><li><p><code>/sbin</code>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><code>/selinux</code>：<br> 这个目录是 Redhat&#x2F;CentOS 所特有的目录，Selinux 是一个安全机制，类似于 windows 的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><code>/srv</code>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><code>/sys</code>：<br>这是 Linux2.6 内核的一个很大的变化。该目录下安装了 2.6 内核中新出现的一个文件系统 sysfs 。<br>sysfs 文件系统集成了下面3种文件系统的信息：针对进程信息的 proc 文件系统、针对设备的 devfs 文件系统以及针对伪终端的 devpts 文件系统。<br>该文件系统是内核设备树的一个直观反映。<br>当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</p></li><li><p><code>/tmp</code>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</p></li><li><p><code>/usr</code>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p><ul><li><code>/usr/bin</code>：</li></ul></li></ol><p>系统用户使用的应用程序。</p><pre><code>- /usr/sbin：</code></pre><p>超级用户使用的比较高级的管理程序和系统守护程序。</p><pre><code>- /usr/src：</code></pre><p>内核源代码默认的放置目录。</p><ol start="20"><li><p><code>/var</code>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><code>/run</code>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 &#x2F;var&#x2F;run 目录，应该让它指向 run。</p></li></ol><blockquote><p><code>/bin, /sbin, /usr/bin, /usr/sbin</code>: 这是系统预设的执行文件的放置目录，比如 ls 就是在 &#x2F;bin&#x2F;ls 目录下的.<br>值得提出的是，<code>/bin, /usr/bin</code> 是给系统用户使用的指令（除root外的通用户），而<code>/sbin, /usr/sbin</code> 则是给 root 使用的指令。<br><code>/var</code>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 <code>/var/log</code> 目录下，另外 mail 的预设放置也是在这里。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>centos安装php74</title>
      <link href="/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85php74/"/>
      <url>/2022/07/22/Linux%E7%AF%87/centos%E5%AE%89%E8%A3%85php74/</url>
      
        <content type="html"><![CDATA[<p>1.安装 EPEL 软件包：<br>yum install -y epel-release</p><p>2.安装 remi 源(安装后在&#x2F;etc&#x2F;yum.repos.d&#x2F;下就有php源了)：<br>yum install -y <a href="http://rpms.remirepo.net/enterprise/remi-release-7.rpm">http://rpms.remirepo.net/enterprise/remi-release-7.rpm</a></p><p>3.安装 yum 扩展包：<br>yum install -y yum-utils</p><p>4.安装及安装扩展<br>yum install -y php74</p><p>yum install -y php74-php-fpm php74-php-gd php74-php-json php74-php-mbstring php74-php-mysqlnd php74-php-xml php74-php-xmlrpc php74-php-opcache</p><p>yum install -y php74-php-devel</p><p>5.查看php版本<br>php74 -v</p><p>6.启动和添加开机启动<br>systemctl start php74-php-fpm<br>systemctl enable php74-php-fpm</p><p>7.链接php文件<br>ln -s &#x2F;opt&#x2F;remi&#x2F;php74&#x2F;root&#x2F;usr&#x2F;bin&#x2F;php &#x2F;usr&#x2F;bin&#x2F;php</p><p>8.如果运行的是nginx而不是apache，修改<br>vi &#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a><br>user &#x3D; apache<br>group &#x3D; apache<br>修改为<br>user &#x3D; nginx<br>group &#x3D; nginx</p><p>9.为nginx开启php的session权限<br>cd &#x2F;var&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;lib&#x2F;php&#x2F; #进入php目录<br>chown -R nginx:nginx session #开启nginx保存session的权限</p><hr><p>配置文件目录<br>&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;root&#x2F;usr&#x2F;bin&#x2F;php-config<br>&#x2F;var&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;lib&#x2F;php&#x2F;session<br>&#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php.ini<br>&#x2F;etc&#x2F;opt&#x2F;remi&#x2F;php74&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a></p><p>卸载<br>yum remove php74*</p>]]></content>
      
      
      <categories>
          
          <category> Linux篇 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
